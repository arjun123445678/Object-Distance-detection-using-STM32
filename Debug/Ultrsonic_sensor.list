
Ultrsonic_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abe4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800ad78  0800ad78  0000bd78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b250  0800b250  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b250  0800b250  0000c250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b258  0800b258  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b258  0800b258  0000c258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b25c  0800b25c  0000c25c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b260  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000093c  200001d4  0800b434  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  0800b434  0000db10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a5b9  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003159  00000000  00000000  000277bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c0  00000000  00000000  0002a918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000142e  00000000  00000000  0002c2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029772  00000000  00000000  0002d706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e423  00000000  00000000  00056e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdca9  00000000  00000000  0007529b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172f44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084f4  00000000  00000000  00172f88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0017b47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ad5c 	.word	0x0800ad5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800ad5c 	.word	0x0800ad5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <lcd_send_cmd>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lcd_send_cmd (char cmd)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  data_u = (cmd&0xf0);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f023 030f 	bic.w	r3, r3, #15
 8000ff4:	73fb      	strb	r3, [r7, #15]
  data_l = ((cmd<<4)&0xf0);
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	73bb      	strb	r3, [r7, #14]
  uint8_t data_t[4];
   data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	f043 030c 	orr.w	r3, r3, #12
 8001002:	b2db      	uxtb	r3, r3
 8001004:	723b      	strb	r3, [r7, #8]
   data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	f043 0308 	orr.w	r3, r3, #8
 800100c:	b2db      	uxtb	r3, r3
 800100e:	727b      	strb	r3, [r7, #9]

 	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001010:	7bbb      	ldrb	r3, [r7, #14]
 8001012:	f043 030c 	orr.w	r3, r3, #12
 8001016:	b2db      	uxtb	r3, r3
 8001018:	72bb      	strb	r3, [r7, #10]
 	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800101a:	7bbb      	ldrb	r3, [r7, #14]
 800101c:	f043 0308 	orr.w	r3, r3, #8
 8001020:	b2db      	uxtb	r3, r3
 8001022:	72fb      	strb	r3, [r7, #11]
 	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001024:	f107 0208 	add.w	r2, r7, #8
 8001028:	2364      	movs	r3, #100	@ 0x64
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2304      	movs	r3, #4
 800102e:	214e      	movs	r1, #78	@ 0x4e
 8001030:	4803      	ldr	r0, [pc, #12]	@ (8001040 <lcd_send_cmd+0x5c>)
 8001032:	f001 feb5 	bl	8002da0 <HAL_I2C_Master_Transmit>
 }
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000228 	.word	0x20000228

08001044 <lcd_send_data>:
void lcd_send_data (char data)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f023 030f 	bic.w	r3, r3, #15
 8001054:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	011b      	lsls	r3, r3, #4
 800105a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	f043 030d 	orr.w	r3, r3, #13
 8001062:	b2db      	uxtb	r3, r3
 8001064:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	f043 0309 	orr.w	r3, r3, #9
 800106c:	b2db      	uxtb	r3, r3
 800106e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 8001070:	7bbb      	ldrb	r3, [r7, #14]
 8001072:	f043 030d 	orr.w	r3, r3, #13
 8001076:	b2db      	uxtb	r3, r3
 8001078:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	f043 0309 	orr.w	r3, r3, #9
 8001080:	b2db      	uxtb	r3, r3
 8001082:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001084:	f107 0208 	add.w	r2, r7, #8
 8001088:	2364      	movs	r3, #100	@ 0x64
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2304      	movs	r3, #4
 800108e:	214e      	movs	r1, #78	@ 0x4e
 8001090:	4803      	ldr	r0, [pc, #12]	@ (80010a0 <lcd_send_data+0x5c>)
 8001092:	f001 fe85 	bl	8002da0 <HAL_I2C_Master_Transmit>
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000228 	.word	0x20000228

080010a4 <lcd_init>:
void lcd_init (void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  // 4 bit initialisation
  HAL_Delay(50);  // wait for >40ms
 80010a8:	2032      	movs	r0, #50	@ 0x32
 80010aa:	f001 f99f 	bl	80023ec <HAL_Delay>
  lcd_send_cmd (0x30);
 80010ae:	2030      	movs	r0, #48	@ 0x30
 80010b0:	f7ff ff98 	bl	8000fe4 <lcd_send_cmd>
  HAL_Delay(5);  // wait for >4.1ms
 80010b4:	2005      	movs	r0, #5
 80010b6:	f001 f999 	bl	80023ec <HAL_Delay>
  lcd_send_cmd (0x30);
 80010ba:	2030      	movs	r0, #48	@ 0x30
 80010bc:	f7ff ff92 	bl	8000fe4 <lcd_send_cmd>
  HAL_Delay(1);  // wait for >100us
 80010c0:	2001      	movs	r0, #1
 80010c2:	f001 f993 	bl	80023ec <HAL_Delay>
  lcd_send_cmd (0x30);
 80010c6:	2030      	movs	r0, #48	@ 0x30
 80010c8:	f7ff ff8c 	bl	8000fe4 <lcd_send_cmd>
  HAL_Delay(10);
 80010cc:	200a      	movs	r0, #10
 80010ce:	f001 f98d 	bl	80023ec <HAL_Delay>
  lcd_send_cmd (0x20);  // 4bit mode
 80010d2:	2020      	movs	r0, #32
 80010d4:	f7ff ff86 	bl	8000fe4 <lcd_send_cmd>
  HAL_Delay(10);
 80010d8:	200a      	movs	r0, #10
 80010da:	f001 f987 	bl	80023ec <HAL_Delay>

  // display initialisation
  lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80010de:	2028      	movs	r0, #40	@ 0x28
 80010e0:	f7ff ff80 	bl	8000fe4 <lcd_send_cmd>
  HAL_Delay(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f001 f981 	bl	80023ec <HAL_Delay>
  lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80010ea:	2008      	movs	r0, #8
 80010ec:	f7ff ff7a 	bl	8000fe4 <lcd_send_cmd>
  HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f001 f97b 	bl	80023ec <HAL_Delay>
  lcd_send_cmd (0x01);  // clear display
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff ff74 	bl	8000fe4 <lcd_send_cmd>
  HAL_Delay(2);
 80010fc:	2002      	movs	r0, #2
 80010fe:	f001 f975 	bl	80023ec <HAL_Delay>
  lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001102:	2006      	movs	r0, #6
 8001104:	f7ff ff6e 	bl	8000fe4 <lcd_send_cmd>
  HAL_Delay(1);
 8001108:	2001      	movs	r0, #1
 800110a:	f001 f96f 	bl	80023ec <HAL_Delay>
  lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800110e:	200c      	movs	r0, #12
 8001110:	f7ff ff68 	bl	8000fe4 <lcd_send_cmd>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <lcd_send_string>:
void lcd_send_string (char *str)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  while (*str) lcd_send_data (*str++);
 8001120:	e006      	b.n	8001130 <lcd_send_string+0x18>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	1c5a      	adds	r2, r3, #1
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff8a 	bl	8001044 <lcd_send_data>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d1f4      	bne.n	8001122 <lcd_send_string+0xa>
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <lcd_put_cur>:
void lcd_put_cur(int row, int col)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
    switch (row)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <lcd_put_cur+0x18>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d005      	beq.n	8001164 <lcd_put_cur+0x22>
 8001158:	e009      	b.n	800116e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001160:	603b      	str	r3, [r7, #0]
            break;
 8001162:	e004      	b.n	800116e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800116a:	603b      	str	r3, [r7, #0]
            break;
 800116c:	bf00      	nop
    }
    lcd_send_cmd (col);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff36 	bl	8000fe4 <lcd_send_cmd>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001184:	f001 f8bd 	bl	8002302 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001188:	f000 f8fc 	bl	8001384 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118c:	f000 fb24 	bl	80017d8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001190:	f000 f94a 	bl	8001428 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001194:	f000 f9c0 	bl	8001518 <MX_I2C2_Init>
  MX_SPI3_Init();
 8001198:	f000 f9fe 	bl	8001598 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800119c:	f000 fa8e 	bl	80016bc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80011a0:	f000 fabc 	bl	800171c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011a4:	f000 faea 	bl	800177c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80011a8:	f000 fa34 	bl	8001614 <MX_TIM1_Init>
  MX_I2C1_Init();
 80011ac:	f000 f974 	bl	8001498 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init ();
 80011b0:	f7ff ff78 	bl	80010a4 <lcd_init>
  HAL_TIM_Base_Start(&htim1);
 80011b4:	4866      	ldr	r0, [pc, #408]	@ (8001350 <main+0x1d0>)
 80011b6:	f003 ff19 	bl	8004fec <HAL_TIM_Base_Start>
   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2108      	movs	r1, #8
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f001 fd17 	bl	8002bf4 <HAL_GPIO_WritePin>

      /* USER CODE END 2 */

   while (1)
   {
	   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2108      	movs	r1, #8
 80011ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ce:	f001 fd11 	bl	8002bf4 <HAL_GPIO_WritePin>
	   	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80011d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001350 <main+0x1d0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24
	   	   while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 80011da:	bf00      	nop
 80011dc:	4b5c      	ldr	r3, [pc, #368]	@ (8001350 <main+0x1d0>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e2:	2b09      	cmp	r3, #9
 80011e4:	d9fa      	bls.n	80011dc <main+0x5c>
	   	   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2108      	movs	r1, #8
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ee:	f001 fd01 	bl	8002bf4 <HAL_GPIO_WritePin>

	   	  pMillis = HAL_GetTick();
 80011f2:	f001 f8ef 	bl	80023d4 <HAL_GetTick>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a56      	ldr	r2, [pc, #344]	@ (8001354 <main+0x1d4>)
 80011fa:	6013      	str	r3, [r2, #0]
	   	  while (!(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && (HAL_GetTick() - pMillis) < 100);  // 100ms timeout for echo to go high
 80011fc:	bf00      	nop
 80011fe:	2110      	movs	r1, #16
 8001200:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001204:	f001 fcde 	bl	8002bc4 <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d107      	bne.n	800121e <main+0x9e>
 800120e:	f001 f8e1 	bl	80023d4 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	4b4f      	ldr	r3, [pc, #316]	@ (8001354 <main+0x1d4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b63      	cmp	r3, #99	@ 0x63
 800121c:	d9ef      	bls.n	80011fe <main+0x7e>
	   	  val1 = __HAL_TIM_GET_COUNTER(&htim1);
 800121e:	4b4c      	ldr	r3, [pc, #304]	@ (8001350 <main+0x1d0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001224:	4a4c      	ldr	r2, [pc, #304]	@ (8001358 <main+0x1d8>)
 8001226:	6013      	str	r3, [r2, #0]

	   	  pMillis = HAL_GetTick();
 8001228:	f001 f8d4 	bl	80023d4 <HAL_GetTick>
 800122c:	4603      	mov	r3, r0
 800122e:	4a49      	ldr	r2, [pc, #292]	@ (8001354 <main+0x1d4>)
 8001230:	6013      	str	r3, [r2, #0]
	   	  while ((HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN)) && (HAL_GetTick() - pMillis) < 300);  // 300ms timeout for echo to go low
 8001232:	bf00      	nop
 8001234:	2110      	movs	r1, #16
 8001236:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800123a:	f001 fcc3 	bl	8002bc4 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <main+0xd6>
 8001244:	f001 f8c6 	bl	80023d4 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	4b42      	ldr	r3, [pc, #264]	@ (8001354 <main+0x1d4>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001254:	d3ee      	bcc.n	8001234 <main+0xb4>
	   	  val2 = __HAL_TIM_GET_COUNTER(&htim1);
 8001256:	4b3e      	ldr	r3, [pc, #248]	@ (8001350 <main+0x1d0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125c:	4a3f      	ldr	r2, [pc, #252]	@ (800135c <main+0x1dc>)
 800125e:	6013      	str	r3, [r2, #0]

	   	  if (val2 > val1) {
 8001260:	4b3e      	ldr	r3, [pc, #248]	@ (800135c <main+0x1dc>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b3c      	ldr	r3, [pc, #240]	@ (8001358 <main+0x1d8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d948      	bls.n	80012fe <main+0x17e>
 	     // Calculate distance and round to the nearest integer
 	     distance = (uint16_t)((val2 - val1) * 0.034 / 2);
 800126c:	4b3b      	ldr	r3, [pc, #236]	@ (800135c <main+0x1dc>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b39      	ldr	r3, [pc, #228]	@ (8001358 <main+0x1d8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f944 	bl	8000504 <__aeabi_ui2d>
 800127c:	a332      	add	r3, pc, #200	@ (adr r3, 8001348 <main+0x1c8>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f9b9 	bl	80005f8 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001296:	f7ff fad9 	bl	800084c <__aeabi_ddiv>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4610      	mov	r0, r2
 80012a0:	4619      	mov	r1, r3
 80012a2:	f7ff fc81 	bl	8000ba8 <__aeabi_d2uiz>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001360 <main+0x1e0>)
 80012ac:	801a      	strh	r2, [r3, #0]

 	     // Print on UART
 	     sprintf(string, "Distance:%d cm\r\n", distance);
 80012ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001360 <main+0x1e0>)
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	461a      	mov	r2, r3
 80012b4:	492b      	ldr	r1, [pc, #172]	@ (8001364 <main+0x1e4>)
 80012b6:	482c      	ldr	r0, [pc, #176]	@ (8001368 <main+0x1e8>)
 80012b8:	f006 f916 	bl	80074e8 <siprintf>
 	     HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 80012bc:	482a      	ldr	r0, [pc, #168]	@ (8001368 <main+0x1e8>)
 80012be:	f7fe ffd7 	bl	8000270 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	4927      	ldr	r1, [pc, #156]	@ (8001368 <main+0x1e8>)
 80012cc:	4827      	ldr	r0, [pc, #156]	@ (800136c <main+0x1ec>)
 80012ce:	f004 f9d5 	bl	800567c <HAL_UART_Transmit>

 	     // Print on LCD
 	     lcd_put_cur(0, 0); // Set cursor to the first row
 80012d2:	2100      	movs	r1, #0
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff ff34 	bl	8001142 <lcd_put_cur>
 	     lcd_send_string("ObstacleDetected");
 80012da:	4825      	ldr	r0, [pc, #148]	@ (8001370 <main+0x1f0>)
 80012dc:	f7ff ff1c 	bl	8001118 <lcd_send_string>

 	     lcd_put_cur(1, 0); // Set cursor to the second row
 80012e0:	2100      	movs	r1, #0
 80012e2:	2001      	movs	r0, #1
 80012e4:	f7ff ff2d 	bl	8001142 <lcd_put_cur>
 	     sprintf(string,"%d cm",distance);
 80012e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <main+0x1e0>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	461a      	mov	r2, r3
 80012ee:	4921      	ldr	r1, [pc, #132]	@ (8001374 <main+0x1f4>)
 80012f0:	481d      	ldr	r0, [pc, #116]	@ (8001368 <main+0x1e8>)
 80012f2:	f006 f8f9 	bl	80074e8 <siprintf>
 	     lcd_send_string(string);
 80012f6:	481c      	ldr	r0, [pc, #112]	@ (8001368 <main+0x1e8>)
 80012f8:	f7ff ff0e 	bl	8001118 <lcd_send_string>
 80012fc:	e01c      	b.n	8001338 <main+0x1b8>
 	 } else {
 	     // Handle no valid echo
 	     sprintf(string, "No valid echo\r\n");
 80012fe:	491e      	ldr	r1, [pc, #120]	@ (8001378 <main+0x1f8>)
 8001300:	4819      	ldr	r0, [pc, #100]	@ (8001368 <main+0x1e8>)
 8001302:	f006 f8f1 	bl	80074e8 <siprintf>
 	     HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), HAL_MAX_DELAY);
 8001306:	4818      	ldr	r0, [pc, #96]	@ (8001368 <main+0x1e8>)
 8001308:	f7fe ffb2 	bl	8000270 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	4914      	ldr	r1, [pc, #80]	@ (8001368 <main+0x1e8>)
 8001316:	4815      	ldr	r0, [pc, #84]	@ (800136c <main+0x1ec>)
 8001318:	f004 f9b0 	bl	800567c <HAL_UART_Transmit>

 	     lcd_put_cur(0, 0);
 800131c:	2100      	movs	r1, #0
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff ff0f 	bl	8001142 <lcd_put_cur>
 	     lcd_send_string("No valid echo  ");
 8001324:	4815      	ldr	r0, [pc, #84]	@ (800137c <main+0x1fc>)
 8001326:	f7ff fef7 	bl	8001118 <lcd_send_string>

 	     lcd_put_cur(1, 0);
 800132a:	2100      	movs	r1, #0
 800132c:	2001      	movs	r0, #1
 800132e:	f7ff ff08 	bl	8001142 <lcd_put_cur>
 	     lcd_send_string("Check sensor   ");
 8001332:	4813      	ldr	r0, [pc, #76]	@ (8001380 <main+0x200>)
 8001334:	f7ff fef0 	bl	8001118 <lcd_send_string>
 	 }
 	   HAL_Delay(500);
 8001338:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800133c:	f001 f856 	bl	80023ec <HAL_Delay>
	   HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8001340:	e741      	b.n	80011c6 <main+0x46>
 8001342:	bf00      	nop
 8001344:	f3af 8000 	nop.w
 8001348:	b020c49c 	.word	0xb020c49c
 800134c:	3fa16872 	.word	0x3fa16872
 8001350:	20000334 	.word	0x20000334
 8001354:	20000974 	.word	0x20000974
 8001358:	20000978 	.word	0x20000978
 800135c:	2000097c 	.word	0x2000097c
 8001360:	20000980 	.word	0x20000980
 8001364:	0800ad78 	.word	0x0800ad78
 8001368:	20000984 	.word	0x20000984
 800136c:	20000380 	.word	0x20000380
 8001370:	0800ad8c 	.word	0x0800ad8c
 8001374:	0800ada0 	.word	0x0800ada0
 8001378:	0800ada8 	.word	0x0800ada8
 800137c:	0800adb8 	.word	0x0800adb8
 8001380:	0800adc8 	.word	0x0800adc8

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b096      	sub	sp, #88	@ 0x58
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	2244      	movs	r2, #68	@ 0x44
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f006 f90b 	bl	80075ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013aa:	f002 fa03 	bl	80037b4 <HAL_PWREx_ControlVoltageScaling>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013b4:	f000 fbbc 	bl	8001b30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013b8:	2310      	movs	r3, #16
 80013ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013bc:	2301      	movs	r3, #1
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013c4:	2360      	movs	r3, #96	@ 0x60
 80013c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2302      	movs	r3, #2
 80013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013cc:	2301      	movs	r3, #1
 80013ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013d0:	2301      	movs	r3, #1
 80013d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013d4:	2328      	movs	r3, #40	@ 0x28
 80013d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013d8:	2307      	movs	r3, #7
 80013da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013dc:	2302      	movs	r3, #2
 80013de:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013e0:	2302      	movs	r3, #2
 80013e2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f002 fa49 	bl	8003880 <HAL_RCC_OscConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013f4:	f000 fb9c 	bl	8001b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f8:	230f      	movs	r3, #15
 80013fa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fc:	2303      	movs	r3, #3
 80013fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	2104      	movs	r1, #4
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fe11 	bl	8004038 <HAL_RCC_ClockConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800141c:	f000 fb88 	bl	8001b30 <Error_Handler>
  }
}
 8001420:	bf00      	nop
 8001422:	3758      	adds	r7, #88	@ 0x58
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 800142e:	4a19      	ldr	r2, [pc, #100]	@ (8001494 <MX_DFSDM1_Init+0x6c>)
 8001430:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 8001434:	2201      	movs	r2, #1
 8001436:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 8001440:	2202      	movs	r2, #2
 8001442:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 800144c:	2200      	movs	r2, #0
 800144e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 8001452:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001456:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001458:	4b0d      	ldr	r3, [pc, #52]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 8001460:	2204      	movs	r2, #4
 8001462:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001464:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 8001466:	2200      	movs	r2, #0
 8001468:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 800146c:	2201      	movs	r2, #1
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001470:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 8001472:	2200      	movs	r2, #0
 8001474:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 8001478:	2200      	movs	r2, #0
 800147a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	@ (8001490 <MX_DFSDM1_Init+0x68>)
 800147e:	f001 f8eb 	bl	8002658 <HAL_DFSDM_ChannelInit>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001488:	f000 fb52 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200001f0 	.word	0x200001f0
 8001494:	40016020 	.word	0x40016020

08001498 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800149c:	4b1b      	ldr	r3, [pc, #108]	@ (800150c <MX_I2C1_Init+0x74>)
 800149e:	4a1c      	ldr	r2, [pc, #112]	@ (8001510 <MX_I2C1_Init+0x78>)
 80014a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F12981;
 80014a2:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <MX_I2C1_Init+0x74>)
 80014a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001514 <MX_I2C1_Init+0x7c>)
 80014a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014a8:	4b18      	ldr	r3, [pc, #96]	@ (800150c <MX_I2C1_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ae:	4b17      	ldr	r3, [pc, #92]	@ (800150c <MX_I2C1_Init+0x74>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b4:	4b15      	ldr	r3, [pc, #84]	@ (800150c <MX_I2C1_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014ba:	4b14      	ldr	r3, [pc, #80]	@ (800150c <MX_I2C1_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014c0:	4b12      	ldr	r3, [pc, #72]	@ (800150c <MX_I2C1_Init+0x74>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c6:	4b11      	ldr	r3, [pc, #68]	@ (800150c <MX_I2C1_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <MX_I2C1_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d2:	480e      	ldr	r0, [pc, #56]	@ (800150c <MX_I2C1_Init+0x74>)
 80014d4:	f001 fbc9 	bl	8002c6a <HAL_I2C_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014de:	f000 fb27 	bl	8001b30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4809      	ldr	r0, [pc, #36]	@ (800150c <MX_I2C1_Init+0x74>)
 80014e6:	f001 ff8d 	bl	8003404 <HAL_I2CEx_ConfigAnalogFilter>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014f0:	f000 fb1e 	bl	8001b30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014f4:	2100      	movs	r1, #0
 80014f6:	4805      	ldr	r0, [pc, #20]	@ (800150c <MX_I2C1_Init+0x74>)
 80014f8:	f001 ffcf 	bl	800349a <HAL_I2CEx_ConfigDigitalFilter>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001502:	f000 fb15 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000228 	.word	0x20000228
 8001510:	40005400 	.word	0x40005400
 8001514:	00f12981 	.word	0x00f12981

08001518 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800151c:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <MX_I2C2_Init+0x74>)
 800151e:	4a1c      	ldr	r2, [pc, #112]	@ (8001590 <MX_I2C2_Init+0x78>)
 8001520:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001522:	4b1a      	ldr	r3, [pc, #104]	@ (800158c <MX_I2C2_Init+0x74>)
 8001524:	4a1b      	ldr	r2, [pc, #108]	@ (8001594 <MX_I2C2_Init+0x7c>)
 8001526:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001528:	4b18      	ldr	r3, [pc, #96]	@ (800158c <MX_I2C2_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800152e:	4b17      	ldr	r3, [pc, #92]	@ (800158c <MX_I2C2_Init+0x74>)
 8001530:	2201      	movs	r2, #1
 8001532:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001534:	4b15      	ldr	r3, [pc, #84]	@ (800158c <MX_I2C2_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_I2C2_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001540:	4b12      	ldr	r3, [pc, #72]	@ (800158c <MX_I2C2_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001546:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_I2C2_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_I2C2_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001552:	480e      	ldr	r0, [pc, #56]	@ (800158c <MX_I2C2_Init+0x74>)
 8001554:	f001 fb89 	bl	8002c6a <HAL_I2C_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800155e:	f000 fae7 	bl	8001b30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001562:	2100      	movs	r1, #0
 8001564:	4809      	ldr	r0, [pc, #36]	@ (800158c <MX_I2C2_Init+0x74>)
 8001566:	f001 ff4d 	bl	8003404 <HAL_I2CEx_ConfigAnalogFilter>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001570:	f000 fade 	bl	8001b30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001574:	2100      	movs	r1, #0
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_I2C2_Init+0x74>)
 8001578:	f001 ff8f 	bl	800349a <HAL_I2CEx_ConfigDigitalFilter>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001582:	f000 fad5 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000027c 	.word	0x2000027c
 8001590:	40005800 	.word	0x40005800
 8001594:	10d19ce4 	.word	0x10d19ce4

08001598 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <MX_SPI3_Init+0x74>)
 800159e:	4a1c      	ldr	r2, [pc, #112]	@ (8001610 <MX_SPI3_Init+0x78>)
 80015a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <MX_SPI3_Init+0x74>)
 80015a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015aa:	4b18      	ldr	r3, [pc, #96]	@ (800160c <MX_SPI3_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80015b0:	4b16      	ldr	r3, [pc, #88]	@ (800160c <MX_SPI3_Init+0x74>)
 80015b2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80015b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015b8:	4b14      	ldr	r3, [pc, #80]	@ (800160c <MX_SPI3_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015be:	4b13      	ldr	r3, [pc, #76]	@ (800160c <MX_SPI3_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_SPI3_Init+0x74>)
 80015c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_SPI3_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_SPI3_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <MX_SPI3_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015de:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <MX_SPI3_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80015e4:	4b09      	ldr	r3, [pc, #36]	@ (800160c <MX_SPI3_Init+0x74>)
 80015e6:	2207      	movs	r2, #7
 80015e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ea:	4b08      	ldr	r3, [pc, #32]	@ (800160c <MX_SPI3_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <MX_SPI3_Init+0x74>)
 80015f2:	2208      	movs	r2, #8
 80015f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80015f6:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_SPI3_Init+0x74>)
 80015f8:	f003 fbfe 	bl	8004df8 <HAL_SPI_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001602:	f000 fa95 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200002d0 	.word	0x200002d0
 8001610:	40003c00 	.word	0x40003c00

08001614 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	f107 0310 	add.w	r3, r7, #16
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001632:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 8001634:	4a20      	ldr	r2, [pc, #128]	@ (80016b8 <MX_TIM1_Init+0xa4>)
 8001636:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001638:	4b1e      	ldr	r3, [pc, #120]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 800163a:	2247      	movs	r2, #71	@ 0x47
 800163c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163e:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 8001646:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800164a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164c:	4b19      	ldr	r3, [pc, #100]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800165e:	4815      	ldr	r0, [pc, #84]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 8001660:	f003 fc6d 	bl	8004f3e <HAL_TIM_Base_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800166a:	f000 fa61 	bl	8001b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001672:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4619      	mov	r1, r3
 800167a:	480e      	ldr	r0, [pc, #56]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 800167c:	f003 fd1e 	bl	80050bc <HAL_TIM_ConfigClockSource>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001686:	f000 fa53 	bl	8001b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_TIM1_Init+0xa0>)
 800169c:	f003 ff18 	bl	80054d0 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016a6:	f000 fa43 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000334 	.word	0x20000334
 80016b8:	40012c00 	.word	0x40012c00

080016bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c0:	4b14      	ldr	r3, [pc, #80]	@ (8001714 <MX_USART1_UART_Init+0x58>)
 80016c2:	4a15      	ldr	r2, [pc, #84]	@ (8001718 <MX_USART1_UART_Init+0x5c>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016c6:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <MX_USART1_UART_Init+0x58>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_USART1_UART_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <MX_USART1_UART_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <MX_USART1_UART_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_USART1_UART_Init+0x58>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <MX_USART1_UART_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_USART1_UART_Init+0x58>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MX_USART1_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_USART1_UART_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_USART1_UART_Init+0x58>)
 8001700:	f003 ff6e 	bl	80055e0 <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800170a:	f000 fa11 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000380 	.word	0x20000380
 8001718:	40013800 	.word	0x40013800

0800171c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <MX_USART3_UART_Init+0x58>)
 8001722:	4a15      	ldr	r2, [pc, #84]	@ (8001778 <MX_USART3_UART_Init+0x5c>)
 8001724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001726:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <MX_USART3_UART_Init+0x58>)
 8001728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800172c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <MX_USART3_UART_Init+0x58>)
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001734:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <MX_USART3_UART_Init+0x58>)
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_USART3_UART_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <MX_USART3_UART_Init+0x58>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	@ (8001774 <MX_USART3_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <MX_USART3_UART_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001752:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <MX_USART3_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <MX_USART3_UART_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <MX_USART3_UART_Init+0x58>)
 8001760:	f003 ff3e 	bl	80055e0 <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800176a:	f000 f9e1 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000408 	.word	0x20000408
 8001778:	40004800 	.word	0x40004800

0800177c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001780:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001782:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001786:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800178a:	2206      	movs	r2, #6
 800178c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800178e:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001790:	2202      	movs	r2, #2
 8001792:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001794:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001796:	2202      	movs	r2, #2
 8001798:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	@ (80017d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80017ac:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	@ (80017d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017c0:	f001 feb7 	bl	8003532 <HAL_PCD_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80017ca:	f000 f9b1 	bl	8001b30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000490 	.word	0x20000490

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	@ 0x30
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ee:	4bbb      	ldr	r3, [pc, #748]	@ (8001adc <MX_GPIO_Init+0x304>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f2:	4aba      	ldr	r2, [pc, #744]	@ (8001adc <MX_GPIO_Init+0x304>)
 80017f4:	f043 0310 	orr.w	r3, r3, #16
 80017f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017fa:	4bb8      	ldr	r3, [pc, #736]	@ (8001adc <MX_GPIO_Init+0x304>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001806:	4bb5      	ldr	r3, [pc, #724]	@ (8001adc <MX_GPIO_Init+0x304>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180a:	4ab4      	ldr	r2, [pc, #720]	@ (8001adc <MX_GPIO_Init+0x304>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001812:	4bb2      	ldr	r3, [pc, #712]	@ (8001adc <MX_GPIO_Init+0x304>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800181e:	4baf      	ldr	r3, [pc, #700]	@ (8001adc <MX_GPIO_Init+0x304>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4aae      	ldr	r2, [pc, #696]	@ (8001adc <MX_GPIO_Init+0x304>)
 8001824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4bac      	ldr	r3, [pc, #688]	@ (8001adc <MX_GPIO_Init+0x304>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4ba9      	ldr	r3, [pc, #676]	@ (8001adc <MX_GPIO_Init+0x304>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	4aa8      	ldr	r2, [pc, #672]	@ (8001adc <MX_GPIO_Init+0x304>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001842:	4ba6      	ldr	r3, [pc, #664]	@ (8001adc <MX_GPIO_Init+0x304>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	4ba3      	ldr	r3, [pc, #652]	@ (8001adc <MX_GPIO_Init+0x304>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	4aa2      	ldr	r2, [pc, #648]	@ (8001adc <MX_GPIO_Init+0x304>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185a:	4ba0      	ldr	r3, [pc, #640]	@ (8001adc <MX_GPIO_Init+0x304>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001866:	4b9d      	ldr	r3, [pc, #628]	@ (8001adc <MX_GPIO_Init+0x304>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186a:	4a9c      	ldr	r2, [pc, #624]	@ (8001adc <MX_GPIO_Init+0x304>)
 800186c:	f043 0308 	orr.w	r3, r3, #8
 8001870:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001872:	4b9a      	ldr	r3, [pc, #616]	@ (8001adc <MX_GPIO_Init+0x304>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800187e:	2200      	movs	r2, #0
 8001880:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001884:	4896      	ldr	r0, [pc, #600]	@ (8001ae0 <MX_GPIO_Init+0x308>)
 8001886:	f001 f9b5 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|GPIO_PIN_3|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	f248 110c 	movw	r1, #33036	@ 0x810c
 8001890:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001894:	f001 f9ae 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001898:	2200      	movs	r2, #0
 800189a:	f24f 0114 	movw	r1, #61460	@ 0xf014
 800189e:	4891      	ldr	r0, [pc, #580]	@ (8001ae4 <MX_GPIO_Init+0x30c>)
 80018a0:	f001 f9a8 	bl	8002bf4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80018a4:	2200      	movs	r2, #0
 80018a6:	f241 0181 	movw	r1, #4225	@ 0x1081
 80018aa:	488f      	ldr	r0, [pc, #572]	@ (8001ae8 <MX_GPIO_Init+0x310>)
 80018ac:	f001 f9a2 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018b6:	488c      	ldr	r0, [pc, #560]	@ (8001ae8 <MX_GPIO_Init+0x310>)
 80018b8:	f001 f99c 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 7110 	mov.w	r1, #576	@ 0x240
 80018c2:	488a      	ldr	r0, [pc, #552]	@ (8001aec <MX_GPIO_Init+0x314>)
 80018c4:	f001 f996 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	2120      	movs	r1, #32
 80018cc:	4885      	ldr	r0, [pc, #532]	@ (8001ae4 <MX_GPIO_Init+0x30c>)
 80018ce:	f001 f991 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80018d2:	2201      	movs	r2, #1
 80018d4:	2101      	movs	r1, #1
 80018d6:	4882      	ldr	r0, [pc, #520]	@ (8001ae0 <MX_GPIO_Init+0x308>)
 80018d8:	f001 f98c 	bl	8002bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80018dc:	f240 1315 	movw	r3, #277	@ 0x115
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	2300      	movs	r3, #0
 80018ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	487a      	ldr	r0, [pc, #488]	@ (8001ae0 <MX_GPIO_Init+0x308>)
 80018f6:	f000 ffbb 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80018fa:	236a      	movs	r3, #106	@ 0x6a
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	4874      	ldr	r0, [pc, #464]	@ (8001ae0 <MX_GPIO_Init+0x308>)
 8001910:	f000 ffae 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001914:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800191a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800191e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	4870      	ldr	r0, [pc, #448]	@ (8001aec <MX_GPIO_Init+0x314>)
 800192c:	f000 ffa0 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001930:	233f      	movs	r3, #63	@ 0x3f
 8001932:	61fb      	str	r3, [r7, #28]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001934:	230b      	movs	r3, #11
 8001936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4619      	mov	r1, r3
 8001942:	486a      	ldr	r0, [pc, #424]	@ (8001aec <MX_GPIO_Init+0x314>)
 8001944:	f000 ff94 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001948:	2303      	movs	r3, #3
 800194a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001958:	2308      	movs	r3, #8
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001966:	f000 ff83 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin PA3 SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|GPIO_PIN_3|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800196a:	f248 130c 	movw	r3, #33036	@ 0x810c
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001970:	2301      	movs	r3, #1
 8001972:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	f107 031c 	add.w	r3, r7, #28
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001986:	f000 ff73 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800198a:	2310      	movs	r3, #16
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019a0:	f000 ff66 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 80019a4:	23e0      	movs	r3, #224	@ 0xe0
 80019a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b0:	2303      	movs	r3, #3
 80019b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019b4:	2305      	movs	r3, #5
 80019b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	4619      	mov	r1, r3
 80019be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c2:	f000 ff55 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80019c6:	2301      	movs	r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	4842      	ldr	r0, [pc, #264]	@ (8001ae4 <MX_GPIO_Init+0x30c>)
 80019dc:	f000 ff48 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019e4:	230b      	movs	r3, #11
 80019e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	483c      	ldr	r0, [pc, #240]	@ (8001ae4 <MX_GPIO_Init+0x30c>)
 80019f4:	f000 ff3c 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80019f8:	f24f 0334 	movw	r3, #61492	@ 0xf034
 80019fc:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4834      	ldr	r0, [pc, #208]	@ (8001ae4 <MX_GPIO_Init+0x30c>)
 8001a12:	f000 ff2d 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001a16:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001a1a:	61fb      	str	r3, [r7, #28]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a28:	230a      	movs	r3, #10
 8001a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	482b      	ldr	r0, [pc, #172]	@ (8001ae0 <MX_GPIO_Init+0x308>)
 8001a34:	f000 ff1c 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001a38:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 8001a3c:	61fb      	str	r3, [r7, #28]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4826      	ldr	r0, [pc, #152]	@ (8001ae8 <MX_GPIO_Init+0x310>)
 8001a50:	f000 ff0e 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001a54:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	481e      	ldr	r0, [pc, #120]	@ (8001ae8 <MX_GPIO_Init+0x310>)
 8001a6e:	f000 feff 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001a72:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4818      	ldr	r0, [pc, #96]	@ (8001aec <MX_GPIO_Init+0x314>)
 8001a8c:	f000 fef0 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001a90:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a96:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4811      	ldr	r0, [pc, #68]	@ (8001aec <MX_GPIO_Init+0x314>)
 8001aa8:	f000 fee2 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001aac:	2302      	movs	r3, #2
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001abc:	2305      	movs	r3, #5
 8001abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4808      	ldr	r0, [pc, #32]	@ (8001ae8 <MX_GPIO_Init+0x310>)
 8001ac8:	f000 fed2 	bl	8002870 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001acc:	2378      	movs	r3, #120	@ 0x78
 8001ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad8:	e00a      	b.n	8001af0 <MX_GPIO_Init+0x318>
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	48001000 	.word	0x48001000
 8001ae4:	48000400 	.word	0x48000400
 8001ae8:	48000c00 	.word	0x48000c00
 8001aec:	48000800 	.word	0x48000800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af0:	2303      	movs	r3, #3
 8001af2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001af4:	2307      	movs	r3, #7
 8001af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001af8:	f107 031c 	add.w	r3, r7, #28
 8001afc:	4619      	mov	r1, r3
 8001afe:	480b      	ldr	r0, [pc, #44]	@ (8001b2c <MX_GPIO_Init+0x354>)
 8001b00:	f000 feb6 	bl	8002870 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	2017      	movs	r0, #23
 8001b0a:	f000 fd6e 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b0e:	2017      	movs	r0, #23
 8001b10:	f000 fd87 	bl	8002622 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2100      	movs	r1, #0
 8001b18:	2028      	movs	r0, #40	@ 0x28
 8001b1a:	f000 fd66 	bl	80025ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b1e:	2028      	movs	r0, #40	@ 0x28
 8001b20:	f000 fd7f 	bl	8002622 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b24:	bf00      	nop
 8001b26:	3730      	adds	r7, #48	@ 0x30
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	48000c00 	.word	0x48000c00

08001b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b34:	b672      	cpsid	i
}
 8001b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <Error_Handler+0x8>

08001b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <HAL_MspInit+0x44>)
 8001b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b46:	4a0e      	ldr	r2, [pc, #56]	@ (8001b80 <HAL_MspInit+0x44>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <HAL_MspInit+0x44>)
 8001b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	607b      	str	r3, [r7, #4]
 8001b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b09      	ldr	r3, [pc, #36]	@ (8001b80 <HAL_MspInit+0x44>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	4a08      	ldr	r2, [pc, #32]	@ (8001b80 <HAL_MspInit+0x44>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b66:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <HAL_MspInit+0x44>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000

08001b84 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b0ac      	sub	sp, #176	@ 0xb0
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2288      	movs	r2, #136	@ 0x88
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f005 fd02 	bl	80075ae <memset>
  if(DFSDM1_Init == 0)
 8001baa:	4b25      	ldr	r3, [pc, #148]	@ (8001c40 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d142      	bne.n	8001c38 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001bb2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 fc5c 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001bce:	f7ff ffaf 	bl	8001b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c44 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bdc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bea:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bee:	4a15      	ldr	r2, [pc, #84]	@ (8001c44 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bf0:	f043 0310 	orr.w	r3, r3, #16
 8001bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bf6:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001c02:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001c06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c1c:	2306      	movs	r3, #6
 8001c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c22:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c26:	4619      	mov	r1, r3
 8001c28:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001c2a:	f000 fe21 	bl	8002870 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001c2e:	4b04      	ldr	r3, [pc, #16]	@ (8001c40 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	3301      	adds	r3, #1
 8001c34:	4a02      	ldr	r2, [pc, #8]	@ (8001c40 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c36:	6013      	str	r3, [r2, #0]
  }

}
 8001c38:	bf00      	nop
 8001c3a:	37b0      	adds	r7, #176	@ 0xb0
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000994 	.word	0x20000994
 8001c44:	40021000 	.word	0x40021000
 8001c48:	48001000 	.word	0x48001000

08001c4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b0ac      	sub	sp, #176	@ 0xb0
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2288      	movs	r2, #136	@ 0x88
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f005 fc9e 	bl	80075ae <memset>
  if(hi2c->Instance==I2C1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a21      	ldr	r2, [pc, #132]	@ (8001cfc <HAL_I2C_MspInit+0xb0>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d13b      	bne.n	8001cf4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c7c:	2340      	movs	r3, #64	@ 0x40
 8001c7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 fbf9 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c94:	f7ff ff4c 	bl	8001b30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c98:	4b19      	ldr	r3, [pc, #100]	@ (8001d00 <HAL_I2C_MspInit+0xb4>)
 8001c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c9c:	4a18      	ldr	r2, [pc, #96]	@ (8001d00 <HAL_I2C_MspInit+0xb4>)
 8001c9e:	f043 0302 	orr.w	r3, r3, #2
 8001ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ca4:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <HAL_I2C_MspInit+0xb4>)
 8001ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001cb0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cb4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb8:	2312      	movs	r3, #18
 8001cba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480b      	ldr	r0, [pc, #44]	@ (8001d04 <HAL_I2C_MspInit+0xb8>)
 8001cd8:	f000 fdca 	bl	8002870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_I2C_MspInit+0xb4>)
 8001cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <HAL_I2C_MspInit+0xb4>)
 8001ce2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ce8:	4b05      	ldr	r3, [pc, #20]	@ (8001d00 <HAL_I2C_MspInit+0xb4>)
 8001cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001cf4:	bf00      	nop
 8001cf6:	37b0      	adds	r7, #176	@ 0xb0
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40005400 	.word	0x40005400
 8001d00:	40021000 	.word	0x40021000
 8001d04:	48000400 	.word	0x48000400

08001d08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	@ 0x28
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a17      	ldr	r2, [pc, #92]	@ (8001d84 <HAL_SPI_MspInit+0x7c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d128      	bne.n	8001d7c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d2a:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_SPI_MspInit+0x80>)
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	4a16      	ldr	r2, [pc, #88]	@ (8001d88 <HAL_SPI_MspInit+0x80>)
 8001d30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_SPI_MspInit+0x80>)
 8001d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d42:	4b11      	ldr	r3, [pc, #68]	@ (8001d88 <HAL_SPI_MspInit+0x80>)
 8001d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d46:	4a10      	ldr	r2, [pc, #64]	@ (8001d88 <HAL_SPI_MspInit+0x80>)
 8001d48:	f043 0304 	orr.w	r3, r3, #4
 8001d4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_SPI_MspInit+0x80>)
 8001d50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001d5a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d60:	2302      	movs	r3, #2
 8001d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d6c:	2306      	movs	r3, #6
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	4619      	mov	r1, r3
 8001d76:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <HAL_SPI_MspInit+0x84>)
 8001d78:	f000 fd7a 	bl	8002870 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001d7c:	bf00      	nop
 8001d7e:	3728      	adds	r7, #40	@ 0x28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40003c00 	.word	0x40003c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48000800 	.word	0x48000800

08001d90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <HAL_TIM_Base_MspInit+0x38>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d10b      	bne.n	8001dba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_TIM_Base_MspInit+0x3c>)
 8001da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da6:	4a09      	ldr	r2, [pc, #36]	@ (8001dcc <HAL_TIM_Base_MspInit+0x3c>)
 8001da8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001dac:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <HAL_TIM_Base_MspInit+0x3c>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40012c00 	.word	0x40012c00
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0ae      	sub	sp, #184	@ 0xb8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	2288      	movs	r2, #136	@ 0x88
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f005 fbdc 	bl	80075ae <memset>
  if(huart->Instance==USART1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a42      	ldr	r2, [pc, #264]	@ (8001f04 <HAL_UART_MspInit+0x134>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d13b      	bne.n	8001e78 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e04:	2300      	movs	r3, #0
 8001e06:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e08:	f107 031c 	add.w	r3, r7, #28
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f002 fb37 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e18:	f7ff fe8a 	bl	8001b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f08 <HAL_UART_MspInit+0x138>)
 8001e1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e20:	4a39      	ldr	r2, [pc, #228]	@ (8001f08 <HAL_UART_MspInit+0x138>)
 8001e22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e26:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e28:	4b37      	ldr	r3, [pc, #220]	@ (8001f08 <HAL_UART_MspInit+0x138>)
 8001e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e34:	4b34      	ldr	r3, [pc, #208]	@ (8001f08 <HAL_UART_MspInit+0x138>)
 8001e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e38:	4a33      	ldr	r2, [pc, #204]	@ (8001f08 <HAL_UART_MspInit+0x138>)
 8001e3a:	f043 0302 	orr.w	r3, r3, #2
 8001e3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e40:	4b31      	ldr	r3, [pc, #196]	@ (8001f08 <HAL_UART_MspInit+0x138>)
 8001e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001e4c:	23c0      	movs	r3, #192	@ 0xc0
 8001e4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e64:	2307      	movs	r3, #7
 8001e66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4826      	ldr	r0, [pc, #152]	@ (8001f0c <HAL_UART_MspInit+0x13c>)
 8001e72:	f000 fcfd 	bl	8002870 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e76:	e040      	b.n	8001efa <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a24      	ldr	r2, [pc, #144]	@ (8001f10 <HAL_UART_MspInit+0x140>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d13b      	bne.n	8001efa <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e82:	2304      	movs	r3, #4
 8001e84:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 faf6 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001e9a:	f7ff fe49 	bl	8001b30 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <HAL_UART_MspInit+0x138>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ea2:	4a19      	ldr	r2, [pc, #100]	@ (8001f08 <HAL_UART_MspInit+0x138>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eaa:	4b17      	ldr	r3, [pc, #92]	@ (8001f08 <HAL_UART_MspInit+0x138>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb6:	4b14      	ldr	r3, [pc, #80]	@ (8001f08 <HAL_UART_MspInit+0x138>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eba:	4a13      	ldr	r2, [pc, #76]	@ (8001f08 <HAL_UART_MspInit+0x138>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_UART_MspInit+0x138>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001ece:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ee8:	2307      	movs	r3, #7
 8001eea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4807      	ldr	r0, [pc, #28]	@ (8001f14 <HAL_UART_MspInit+0x144>)
 8001ef6:	f000 fcbb 	bl	8002870 <HAL_GPIO_Init>
}
 8001efa:	bf00      	nop
 8001efc:	37b8      	adds	r7, #184	@ 0xb8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	48000400 	.word	0x48000400
 8001f10:	40004800 	.word	0x40004800
 8001f14:	48000c00 	.word	0x48000c00

08001f18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b0ac      	sub	sp, #176	@ 0xb0
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2288      	movs	r2, #136	@ 0x88
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f005 fb38 	bl	80075ae <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f46:	d17c      	bne.n	8002042 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f4c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001f4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001f52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001f56:	2301      	movs	r3, #1
 8001f58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001f5e:	2318      	movs	r3, #24
 8001f60:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001f62:	2307      	movs	r3, #7
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001f66:	2302      	movs	r3, #2
 8001f68:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001f6e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f72:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f002 fa81 	bl	8004480 <HAL_RCCEx_PeriphCLKConfig>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001f84:	f7ff fdd4 	bl	8001b30 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f88:	4b30      	ldr	r3, [pc, #192]	@ (800204c <HAL_PCD_MspInit+0x134>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8c:	4a2f      	ldr	r2, [pc, #188]	@ (800204c <HAL_PCD_MspInit+0x134>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f94:	4b2d      	ldr	r3, [pc, #180]	@ (800204c <HAL_PCD_MspInit+0x134>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	613b      	str	r3, [r7, #16]
 8001f9e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001fa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fa4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001fb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fbe:	f000 fc57 	bl	8002870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001fc2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001fc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fdc:	230a      	movs	r3, #10
 8001fde:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fec:	f000 fc40 	bl	8002870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ff0:	4b16      	ldr	r3, [pc, #88]	@ (800204c <HAL_PCD_MspInit+0x134>)
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff4:	4a15      	ldr	r2, [pc, #84]	@ (800204c <HAL_PCD_MspInit+0x134>)
 8001ff6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ffa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ffc:	4b13      	ldr	r3, [pc, #76]	@ (800204c <HAL_PCD_MspInit+0x134>)
 8001ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002000:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002008:	4b10      	ldr	r3, [pc, #64]	@ (800204c <HAL_PCD_MspInit+0x134>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d114      	bne.n	800203e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002014:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <HAL_PCD_MspInit+0x134>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002018:	4a0c      	ldr	r2, [pc, #48]	@ (800204c <HAL_PCD_MspInit+0x134>)
 800201a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800201e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002020:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <HAL_PCD_MspInit+0x134>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002024:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800202c:	f001 fc18 	bl	8003860 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002030:	4b06      	ldr	r3, [pc, #24]	@ (800204c <HAL_PCD_MspInit+0x134>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002034:	4a05      	ldr	r2, [pc, #20]	@ (800204c <HAL_PCD_MspInit+0x134>)
 8002036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800203a:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800203c:	e001      	b.n	8002042 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800203e:	f001 fc0f 	bl	8003860 <HAL_PWREx_EnableVddUSB>
}
 8002042:	bf00      	nop
 8002044:	37b0      	adds	r7, #176	@ 0xb0
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000

08002050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <NMI_Handler+0x4>

08002058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <MemManage_Handler+0x4>

08002068 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <BusFault_Handler+0x4>

08002070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <UsageFault_Handler+0x4>

08002078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a6:	f000 f981 	bl	80023ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}

080020ae <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80020b2:	2020      	movs	r0, #32
 80020b4:	f000 fdb6 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80020b8:	2040      	movs	r0, #64	@ 0x40
 80020ba:	f000 fdb3 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80020be:	2080      	movs	r0, #128	@ 0x80
 80020c0:	f000 fdb0 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80020c4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80020c8:	f000 fdac 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80020d4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80020d8:	f000 fda4 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80020dc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80020e0:	f000 fda0 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80020e4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020e8:	f000 fd9c 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80020ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80020f0:	f000 fd98 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80020f4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80020f8:	f000 fd94 	bl	8002c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return 1;
 8002104:	2301      	movs	r3, #1
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_kill>:

int _kill(int pid, int sig)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800211a:	f005 fa9b 	bl	8007654 <__errno>
 800211e:	4603      	mov	r3, r0
 8002120:	2216      	movs	r2, #22
 8002122:	601a      	str	r2, [r3, #0]
  return -1;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_exit>:

void _exit (int status)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ffe7 	bl	8002110 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002142:	bf00      	nop
 8002144:	e7fd      	b.n	8002142 <_exit+0x12>

08002146 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	e00a      	b.n	800216e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002158:	f3af 8000 	nop.w
 800215c:	4601      	mov	r1, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	60ba      	str	r2, [r7, #8]
 8002164:	b2ca      	uxtb	r2, r1
 8002166:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	dbf0      	blt.n	8002158 <_read+0x12>
  }

  return len;
 8002176:	687b      	ldr	r3, [r7, #4]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
 8002190:	e009      	b.n	80021a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1c5a      	adds	r2, r3, #1
 8002196:	60ba      	str	r2, [r7, #8]
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	dbf1      	blt.n	8002192 <_write+0x12>
  }
  return len;
 80021ae:	687b      	ldr	r3, [r7, #4]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_close>:

int _close(int file)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021e0:	605a      	str	r2, [r3, #4]
  return 0;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_isatty>:

int _isatty(int file)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021f8:	2301      	movs	r3, #1
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002206:	b480      	push	{r7}
 8002208:	b085      	sub	sp, #20
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	@ (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	@ (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f005 fa00 	bl	8007654 <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	@ (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	@ (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20018000 	.word	0x20018000
 8002280:	00000400 	.word	0x00000400
 8002284:	20000998 	.word	0x20000998
 8002288:	20000b10 	.word	0x20000b10

0800228c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <SystemInit+0x20>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002296:	4a05      	ldr	r2, [pc, #20]	@ (80022ac <SystemInit+0x20>)
 8002298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800229c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022b4:	f7ff ffea 	bl	800228c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022b8:	480c      	ldr	r0, [pc, #48]	@ (80022ec <LoopForever+0x6>)
  ldr r1, =_edata
 80022ba:	490d      	ldr	r1, [pc, #52]	@ (80022f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022bc:	4a0d      	ldr	r2, [pc, #52]	@ (80022f4 <LoopForever+0xe>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c0:	e002      	b.n	80022c8 <LoopCopyDataInit>

080022c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c6:	3304      	adds	r3, #4

080022c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022cc:	d3f9      	bcc.n	80022c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ce:	4a0a      	ldr	r2, [pc, #40]	@ (80022f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022d0:	4c0a      	ldr	r4, [pc, #40]	@ (80022fc <LoopForever+0x16>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d4:	e001      	b.n	80022da <LoopFillZerobss>

080022d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d8:	3204      	adds	r2, #4

080022da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022dc:	d3fb      	bcc.n	80022d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022de:	f005 f9bf 	bl	8007660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022e2:	f7fe ff4d 	bl	8001180 <main>

080022e6 <LoopForever>:

LoopForever:
    b LoopForever
 80022e6:	e7fe      	b.n	80022e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80022f4:	0800b260 	.word	0x0800b260
  ldr r2, =_sbss
 80022f8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80022fc:	20000b10 	.word	0x20000b10

08002300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC1_2_IRQHandler>

08002302 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800230c:	2003      	movs	r0, #3
 800230e:	f000 f961 	bl	80025d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002312:	2000      	movs	r0, #0
 8002314:	f000 f80e 	bl	8002334 <HAL_InitTick>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	71fb      	strb	r3, [r7, #7]
 8002322:	e001      	b.n	8002328 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002324:	f7ff fc0a 	bl	8001b3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002328:	79fb      	ldrb	r3, [r7, #7]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002340:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <HAL_InitTick+0x6c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d023      	beq.n	8002390 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002348:	4b16      	ldr	r3, [pc, #88]	@ (80023a4 <HAL_InitTick+0x70>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <HAL_InitTick+0x6c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f96d 	bl	800263e <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10f      	bne.n	800238a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b0f      	cmp	r3, #15
 800236e:	d809      	bhi.n	8002384 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002370:	2200      	movs	r2, #0
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f000 f937 	bl	80025ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800237c:	4a0a      	ldr	r2, [pc, #40]	@ (80023a8 <HAL_InitTick+0x74>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e007      	b.n	8002394 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	e004      	b.n	8002394 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e001      	b.n	8002394 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000008 	.word	0x20000008
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000004 	.word	0x20000004

080023ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_IncTick+0x20>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_IncTick+0x24>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a04      	ldr	r2, [pc, #16]	@ (80023d0 <HAL_IncTick+0x24>)
 80023be:	6013      	str	r3, [r2, #0]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	20000008 	.word	0x20000008
 80023d0:	2000099c 	.word	0x2000099c

080023d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b03      	ldr	r3, [pc, #12]	@ (80023e8 <HAL_GetTick+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	2000099c 	.word	0x2000099c

080023ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f4:	f7ff ffee 	bl	80023d4 <HAL_GetTick>
 80023f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d005      	beq.n	8002412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002406:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <HAL_Delay+0x44>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4413      	add	r3, r2
 8002410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002412:	bf00      	nop
 8002414:	f7ff ffde 	bl	80023d4 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	429a      	cmp	r2, r3
 8002422:	d8f7      	bhi.n	8002414 <HAL_Delay+0x28>
  {
  }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000008 	.word	0x20000008

08002434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002450:	4013      	ands	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800245c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002466:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	60d3      	str	r3, [r2, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002480:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <__NVIC_GetPriorityGrouping+0x18>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	f003 0307 	and.w	r3, r3, #7
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db0b      	blt.n	80024c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4907      	ldr	r1, [pc, #28]	@ (80024d0 <__NVIC_EnableIRQ+0x38>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2001      	movs	r0, #1
 80024ba:	fa00 f202 	lsl.w	r2, r0, r2
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	e000e100 	.word	0xe000e100

080024d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	db0a      	blt.n	80024fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	490c      	ldr	r1, [pc, #48]	@ (8002520 <__NVIC_SetPriority+0x4c>)
 80024ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f2:	0112      	lsls	r2, r2, #4
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024fc:	e00a      	b.n	8002514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4908      	ldr	r1, [pc, #32]	@ (8002524 <__NVIC_SetPriority+0x50>)
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	3b04      	subs	r3, #4
 800250c:	0112      	lsls	r2, r2, #4
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	440b      	add	r3, r1
 8002512:	761a      	strb	r2, [r3, #24]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000e100 	.word	0xe000e100
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002528:	b480      	push	{r7}
 800252a:	b089      	sub	sp, #36	@ 0x24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f1c3 0307 	rsb	r3, r3, #7
 8002542:	2b04      	cmp	r3, #4
 8002544:	bf28      	it	cs
 8002546:	2304      	movcs	r3, #4
 8002548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3304      	adds	r3, #4
 800254e:	2b06      	cmp	r3, #6
 8002550:	d902      	bls.n	8002558 <NVIC_EncodePriority+0x30>
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3b03      	subs	r3, #3
 8002556:	e000      	b.n	800255a <NVIC_EncodePriority+0x32>
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 32ff 	mov.w	r2, #4294967295
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	fa02 f303 	lsl.w	r3, r2, r3
 8002566:	43da      	mvns	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	401a      	ands	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002570:	f04f 31ff 	mov.w	r1, #4294967295
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	fa01 f303 	lsl.w	r3, r1, r3
 800257a:	43d9      	mvns	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	4313      	orrs	r3, r2
         );
}
 8002582:	4618      	mov	r0, r3
 8002584:	3724      	adds	r7, #36	@ 0x24
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025a0:	d301      	bcc.n	80025a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00f      	b.n	80025c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a6:	4a0a      	ldr	r2, [pc, #40]	@ (80025d0 <SysTick_Config+0x40>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ae:	210f      	movs	r1, #15
 80025b0:	f04f 30ff 	mov.w	r0, #4294967295
 80025b4:	f7ff ff8e 	bl	80024d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b8:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <SysTick_Config+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025be:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <SysTick_Config+0x40>)
 80025c0:	2207      	movs	r2, #7
 80025c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	e000e010 	.word	0xe000e010

080025d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff ff29 	bl	8002434 <__NVIC_SetPriorityGrouping>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4603      	mov	r3, r0
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025fc:	f7ff ff3e 	bl	800247c <__NVIC_GetPriorityGrouping>
 8002600:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	6978      	ldr	r0, [r7, #20]
 8002608:	f7ff ff8e 	bl	8002528 <NVIC_EncodePriority>
 800260c:	4602      	mov	r2, r0
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	4611      	mov	r1, r2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff5d 	bl	80024d4 <__NVIC_SetPriority>
}
 800261a:	bf00      	nop
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff ff31 	bl	8002498 <__NVIC_EnableIRQ>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ffa2 	bl	8002590 <SysTick_Config>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0ac      	b.n	80027c4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f8b2 	bl	80027d8 <DFSDM_GetChannelFromInstance>
 8002674:	4603      	mov	r3, r0
 8002676:	4a55      	ldr	r2, [pc, #340]	@ (80027cc <HAL_DFSDM_ChannelInit+0x174>)
 8002678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e09f      	b.n	80027c4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff fa7d 	bl	8001b84 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800268a:	4b51      	ldr	r3, [pc, #324]	@ (80027d0 <HAL_DFSDM_ChannelInit+0x178>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	4a4f      	ldr	r2, [pc, #316]	@ (80027d0 <HAL_DFSDM_ChannelInit+0x178>)
 8002692:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002694:	4b4e      	ldr	r3, [pc, #312]	@ (80027d0 <HAL_DFSDM_ChannelInit+0x178>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d125      	bne.n	80026e8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800269c:	4b4d      	ldr	r3, [pc, #308]	@ (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a4c      	ldr	r2, [pc, #304]	@ (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026a6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80026a8:	4b4a      	ldr	r3, [pc, #296]	@ (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4948      	ldr	r1, [pc, #288]	@ (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80026b6:	4b47      	ldr	r3, [pc, #284]	@ (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a46      	ldr	r2, [pc, #280]	@ (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026bc:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 80026c0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	791b      	ldrb	r3, [r3, #4]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d108      	bne.n	80026dc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80026ca:	4b42      	ldr	r3, [pc, #264]	@ (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	493f      	ldr	r1, [pc, #252]	@ (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80026dc:	4b3d      	ldr	r3, [pc, #244]	@ (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a3c      	ldr	r2, [pc, #240]	@ (80027d4 <HAL_DFSDM_ChannelInit+0x17c>)
 80026e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026e6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 80026f6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002706:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800270c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 020f 	bic.w	r2, r2, #15
 8002724:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6819      	ldr	r1, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 800274c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f002 0207 	and.w	r2, r2, #7
 8002778:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80027a4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f810 	bl	80027d8 <DFSDM_GetChannelFromInstance>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4904      	ldr	r1, [pc, #16]	@ (80027cc <HAL_DFSDM_ChannelInit+0x174>)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	200009a4 	.word	0x200009a4
 80027d0:	200009a0 	.word	0x200009a0
 80027d4:	40016000 	.word	0x40016000

080027d8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002854 <DFSDM_GetChannelFromInstance+0x7c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d102      	bne.n	80027ee <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e02b      	b.n	8002846 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a19      	ldr	r2, [pc, #100]	@ (8002858 <DFSDM_GetChannelFromInstance+0x80>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d102      	bne.n	80027fc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	e024      	b.n	8002846 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a17      	ldr	r2, [pc, #92]	@ (800285c <DFSDM_GetChannelFromInstance+0x84>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d102      	bne.n	800280a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002804:	2302      	movs	r3, #2
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	e01d      	b.n	8002846 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a14      	ldr	r2, [pc, #80]	@ (8002860 <DFSDM_GetChannelFromInstance+0x88>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d102      	bne.n	8002818 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002812:	2304      	movs	r3, #4
 8002814:	60fb      	str	r3, [r7, #12]
 8002816:	e016      	b.n	8002846 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4a12      	ldr	r2, [pc, #72]	@ (8002864 <DFSDM_GetChannelFromInstance+0x8c>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d102      	bne.n	8002826 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002820:	2305      	movs	r3, #5
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	e00f      	b.n	8002846 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a0f      	ldr	r2, [pc, #60]	@ (8002868 <DFSDM_GetChannelFromInstance+0x90>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d102      	bne.n	8002834 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800282e:	2306      	movs	r3, #6
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e008      	b.n	8002846 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4a0d      	ldr	r2, [pc, #52]	@ (800286c <DFSDM_GetChannelFromInstance+0x94>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d102      	bne.n	8002842 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800283c:	2307      	movs	r3, #7
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e001      	b.n	8002846 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002842:	2303      	movs	r3, #3
 8002844:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002846:	68fb      	ldr	r3, [r7, #12]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40016000 	.word	0x40016000
 8002858:	40016020 	.word	0x40016020
 800285c:	40016040 	.word	0x40016040
 8002860:	40016080 	.word	0x40016080
 8002864:	400160a0 	.word	0x400160a0
 8002868:	400160c0 	.word	0x400160c0
 800286c:	400160e0 	.word	0x400160e0

08002870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800287e:	e17f      	b.n	8002b80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	2101      	movs	r1, #1
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	fa01 f303 	lsl.w	r3, r1, r3
 800288c:	4013      	ands	r3, r2
 800288e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 8171 	beq.w	8002b7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d005      	beq.n	80028b0 <HAL_GPIO_Init+0x40>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f003 0303 	and.w	r3, r3, #3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d130      	bne.n	8002912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4013      	ands	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028e6:	2201      	movs	r2, #1
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	091b      	lsrs	r3, r3, #4
 80028fc:	f003 0201 	and.w	r2, r3, #1
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b03      	cmp	r3, #3
 800291c:	d118      	bne.n	8002950 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002924:	2201      	movs	r2, #1
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	43db      	mvns	r3, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	08db      	lsrs	r3, r3, #3
 800293a:	f003 0201 	and.w	r2, r3, #1
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b03      	cmp	r3, #3
 800295a:	d017      	beq.n	800298c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	2203      	movs	r2, #3
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43db      	mvns	r3, r3
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	4013      	ands	r3, r2
 8002972:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	005b      	lsls	r3, r3, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d123      	bne.n	80029e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	08da      	lsrs	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3208      	adds	r2, #8
 80029a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	220f      	movs	r2, #15
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	08da      	lsrs	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3208      	adds	r2, #8
 80029da:	6939      	ldr	r1, [r7, #16]
 80029dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0203 	and.w	r2, r3, #3
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80ac 	beq.w	8002b7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	4b5f      	ldr	r3, [pc, #380]	@ (8002ba0 <HAL_GPIO_Init+0x330>)
 8002a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a26:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba0 <HAL_GPIO_Init+0x330>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba0 <HAL_GPIO_Init+0x330>)
 8002a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a3a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ba4 <HAL_GPIO_Init+0x334>)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	089b      	lsrs	r3, r3, #2
 8002a40:	3302      	adds	r3, #2
 8002a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	220f      	movs	r2, #15
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a64:	d025      	beq.n	8002ab2 <HAL_GPIO_Init+0x242>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4f      	ldr	r2, [pc, #316]	@ (8002ba8 <HAL_GPIO_Init+0x338>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01f      	beq.n	8002aae <HAL_GPIO_Init+0x23e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4e      	ldr	r2, [pc, #312]	@ (8002bac <HAL_GPIO_Init+0x33c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_Init+0x23a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4d      	ldr	r2, [pc, #308]	@ (8002bb0 <HAL_GPIO_Init+0x340>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0x236>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4c      	ldr	r2, [pc, #304]	@ (8002bb4 <HAL_GPIO_Init+0x344>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <HAL_GPIO_Init+0x232>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4b      	ldr	r2, [pc, #300]	@ (8002bb8 <HAL_GPIO_Init+0x348>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_Init+0x22e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4a      	ldr	r2, [pc, #296]	@ (8002bbc <HAL_GPIO_Init+0x34c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_GPIO_Init+0x22a>
 8002a96:	2306      	movs	r3, #6
 8002a98:	e00c      	b.n	8002ab4 <HAL_GPIO_Init+0x244>
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	e00a      	b.n	8002ab4 <HAL_GPIO_Init+0x244>
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	e008      	b.n	8002ab4 <HAL_GPIO_Init+0x244>
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x244>
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e004      	b.n	8002ab4 <HAL_GPIO_Init+0x244>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e002      	b.n	8002ab4 <HAL_GPIO_Init+0x244>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_GPIO_Init+0x244>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	f002 0203 	and.w	r2, r2, #3
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	4093      	lsls	r3, r2
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ac4:	4937      	ldr	r1, [pc, #220]	@ (8002ba4 <HAL_GPIO_Init+0x334>)
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	3302      	adds	r3, #2
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc0 <HAL_GPIO_Init+0x350>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002af6:	4a32      	ldr	r2, [pc, #200]	@ (8002bc0 <HAL_GPIO_Init+0x350>)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002afc:	4b30      	ldr	r3, [pc, #192]	@ (8002bc0 <HAL_GPIO_Init+0x350>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b20:	4a27      	ldr	r2, [pc, #156]	@ (8002bc0 <HAL_GPIO_Init+0x350>)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b26:	4b26      	ldr	r3, [pc, #152]	@ (8002bc0 <HAL_GPIO_Init+0x350>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	4013      	ands	r3, r2
 8002b34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc0 <HAL_GPIO_Init+0x350>)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b50:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <HAL_GPIO_Init+0x350>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b74:	4a12      	ldr	r2, [pc, #72]	@ (8002bc0 <HAL_GPIO_Init+0x350>)
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f47f ae78 	bne.w	8002880 <HAL_GPIO_Init+0x10>
  }
}
 8002b90:	bf00      	nop
 8002b92:	bf00      	nop
 8002b94:	371c      	adds	r7, #28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	48000400 	.word	0x48000400
 8002bac:	48000800 	.word	0x48000800
 8002bb0:	48000c00 	.word	0x48000c00
 8002bb4:	48001000 	.word	0x48001000
 8002bb8:	48001400 	.word	0x48001400
 8002bbc:	48001800 	.word	0x48001800
 8002bc0:	40010400 	.word	0x40010400

08002bc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	887b      	ldrh	r3, [r7, #2]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d002      	beq.n	8002be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
 8002be0:	e001      	b.n	8002be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002be2:	2300      	movs	r3, #0
 8002be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	807b      	strh	r3, [r7, #2]
 8002c00:	4613      	mov	r3, r2
 8002c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c04:	787b      	ldrb	r3, [r7, #1]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c0a:	887a      	ldrh	r2, [r7, #2]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c10:	e002      	b.n	8002c18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c12:	887a      	ldrh	r2, [r7, #2]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c2e:	4b08      	ldr	r3, [pc, #32]	@ (8002c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c3a:	4a05      	ldr	r2, [pc, #20]	@ (8002c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c40:	88fb      	ldrh	r3, [r7, #6]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f806 	bl	8002c54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40010400 	.word	0x40010400

08002c54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e08d      	b.n	8002d98 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d106      	bne.n	8002c96 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7fe ffdb 	bl	8001c4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2224      	movs	r2, #36	@ 0x24
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	e006      	b.n	8002cf2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002cf0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d108      	bne.n	8002d0c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	e007      	b.n	8002d1c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d1a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6812      	ldr	r2, [r2, #0]
 8002d26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d2e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d3e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69d9      	ldr	r1, [r3, #28]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0201 	orr.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3708      	adds	r7, #8
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	461a      	mov	r2, r3
 8002dac:	460b      	mov	r3, r1
 8002dae:	817b      	strh	r3, [r7, #10]
 8002db0:	4613      	mov	r3, r2
 8002db2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	f040 80fd 	bne.w	8002fbc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_I2C_Master_Transmit+0x30>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e0f6      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x21e>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dd8:	f7ff fafc 	bl	80023d4 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2319      	movs	r3, #25
 8002de4:	2201      	movs	r2, #1
 8002de6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f914 	bl	8003018 <I2C_WaitOnFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0e1      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2221      	movs	r2, #33	@ 0x21
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2210      	movs	r2, #16
 8002e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	893a      	ldrh	r2, [r7, #8]
 8002e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	2bff      	cmp	r3, #255	@ 0xff
 8002e2a:	d906      	bls.n	8002e3a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	22ff      	movs	r2, #255	@ 0xff
 8002e30:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002e32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e007      	b.n	8002e4a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002e44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e48:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d024      	beq.n	8002e9c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	8979      	ldrh	r1, [r7, #10]
 8002e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002fc8 <HAL_I2C_Master_Transmit+0x228>)
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fa83 	bl	80033a0 <I2C_TransferConfig>
 8002e9a:	e066      	b.n	8002f6a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	8979      	ldrh	r1, [r7, #10]
 8002ea4:	4b48      	ldr	r3, [pc, #288]	@ (8002fc8 <HAL_I2C_Master_Transmit+0x228>)
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fa78 	bl	80033a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002eb0:	e05b      	b.n	8002f6a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	6a39      	ldr	r1, [r7, #32]
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f907 	bl	80030ca <I2C_WaitOnTXISFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e07b      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	781a      	ldrb	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d034      	beq.n	8002f6a <HAL_I2C_Master_Transmit+0x1ca>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d130      	bne.n	8002f6a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2180      	movs	r1, #128	@ 0x80
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f880 	bl	8003018 <I2C_WaitOnFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e04d      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2bff      	cmp	r3, #255	@ 0xff
 8002f2a:	d90e      	bls.n	8002f4a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	22ff      	movs	r2, #255	@ 0xff
 8002f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	8979      	ldrh	r1, [r7, #10]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fa2c 	bl	80033a0 <I2C_TransferConfig>
 8002f48:	e00f      	b.n	8002f6a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	8979      	ldrh	r1, [r7, #10]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 fa1b 	bl	80033a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d19e      	bne.n	8002eb2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	6a39      	ldr	r1, [r7, #32]
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f8ed 	bl	8003158 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e01a      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002fcc <HAL_I2C_Master_Transmit+0x22c>)
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	e000      	b.n	8002fbe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002fbc:	2302      	movs	r3, #2
  }
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	80002000 	.word	0x80002000
 8002fcc:	fe00e800 	.word	0xfe00e800

08002fd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d103      	bne.n	8002fee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2200      	movs	r2, #0
 8002fec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d007      	beq.n	800300c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	619a      	str	r2, [r3, #24]
  }
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003028:	e03b      	b.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	6839      	ldr	r1, [r7, #0]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f8d6 	bl	80031e0 <I2C_IsErrorOccurred>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e041      	b.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d02d      	beq.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003046:	f7ff f9c5 	bl	80023d4 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d122      	bne.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4013      	ands	r3, r2
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	429a      	cmp	r2, r3
 8003078:	d113      	bne.n	80030a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	f043 0220 	orr.w	r2, r3, #32
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e00f      	b.n	80030c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699a      	ldr	r2, [r3, #24]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4013      	ands	r3, r2
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	bf0c      	ite	eq
 80030b2:	2301      	moveq	r3, #1
 80030b4:	2300      	movne	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d0b4      	beq.n	800302a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	60f8      	str	r0, [r7, #12]
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030d6:	e033      	b.n	8003140 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	68b9      	ldr	r1, [r7, #8]
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f87f 	bl	80031e0 <I2C_IsErrorOccurred>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e031      	b.n	8003150 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d025      	beq.n	8003140 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f4:	f7ff f96e 	bl	80023d4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	429a      	cmp	r2, r3
 8003102:	d302      	bcc.n	800310a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d11a      	bne.n	8003140 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b02      	cmp	r3, #2
 8003116:	d013      	beq.n	8003140 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e007      	b.n	8003150 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b02      	cmp	r3, #2
 800314c:	d1c4      	bne.n	80030d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003164:	e02f      	b.n	80031c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 f838 	bl	80031e0 <I2C_IsErrorOccurred>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e02d      	b.n	80031d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7ff f92b 	bl	80023d4 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11a      	bne.n	80031c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	f003 0320 	and.w	r3, r3, #32
 800319a:	2b20      	cmp	r3, #32
 800319c:	d013      	beq.n	80031c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	f043 0220 	orr.w	r2, r3, #32
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e007      	b.n	80031d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d1c8      	bne.n	8003166 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	@ 0x28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	f003 0310 	and.w	r3, r3, #16
 8003208:	2b00      	cmp	r3, #0
 800320a:	d068      	beq.n	80032de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2210      	movs	r2, #16
 8003212:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003214:	e049      	b.n	80032aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d045      	beq.n	80032aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800321e:	f7ff f8d9 	bl	80023d4 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	d302      	bcc.n	8003234 <I2C_IsErrorOccurred+0x54>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d13a      	bne.n	80032aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800323e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003246:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003252:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003256:	d121      	bne.n	800329c <I2C_IsErrorOccurred+0xbc>
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800325e:	d01d      	beq.n	800329c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003260:	7cfb      	ldrb	r3, [r7, #19]
 8003262:	2b20      	cmp	r3, #32
 8003264:	d01a      	beq.n	800329c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685a      	ldr	r2, [r3, #4]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003274:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003276:	f7ff f8ad 	bl	80023d4 <HAL_GetTick>
 800327a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800327c:	e00e      	b.n	800329c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800327e:	f7ff f8a9 	bl	80023d4 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b19      	cmp	r3, #25
 800328a:	d907      	bls.n	800329c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	f043 0320 	orr.w	r3, r3, #32
 8003292:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800329a:	e006      	b.n	80032aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d1e9      	bne.n	800327e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	f003 0320 	and.w	r3, r3, #32
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d003      	beq.n	80032c0 <I2C_IsErrorOccurred+0xe0>
 80032b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0aa      	beq.n	8003216 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80032c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d103      	bne.n	80032d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2220      	movs	r2, #32
 80032ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	f043 0304 	orr.w	r3, r3, #4
 80032d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00b      	beq.n	8003308 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003300:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	f043 0308 	orr.w	r3, r3, #8
 8003318:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003322:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00b      	beq.n	800334c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	f043 0302 	orr.w	r3, r3, #2
 800333a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003344:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800334c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01c      	beq.n	800338e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f7ff fe3b 	bl	8002fd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b0d      	ldr	r3, [pc, #52]	@ (800339c <I2C_IsErrorOccurred+0x1bc>)
 8003366:	400b      	ands	r3, r1
 8003368:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	431a      	orrs	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800338e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003392:	4618      	mov	r0, r3
 8003394:	3728      	adds	r7, #40	@ 0x28
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	fe00e800 	.word	0xfe00e800

080033a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b087      	sub	sp, #28
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	607b      	str	r3, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	817b      	strh	r3, [r7, #10]
 80033ae:	4613      	mov	r3, r2
 80033b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033b2:	897b      	ldrh	r3, [r7, #10]
 80033b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033b8:	7a7b      	ldrb	r3, [r7, #9]
 80033ba:	041b      	lsls	r3, r3, #16
 80033bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80033ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	0d5b      	lsrs	r3, r3, #21
 80033da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80033de:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <I2C_TransferConfig+0x60>)
 80033e0:	430b      	orrs	r3, r1
 80033e2:	43db      	mvns	r3, r3
 80033e4:	ea02 0103 	and.w	r1, r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033f2:	bf00      	nop
 80033f4:	371c      	adds	r7, #28
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	03ff63ff 	.word	0x03ff63ff

08003404 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b20      	cmp	r3, #32
 8003418:	d138      	bne.n	800348c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003424:	2302      	movs	r3, #2
 8003426:	e032      	b.n	800348e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2224      	movs	r2, #36	@ 0x24
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 0201 	bic.w	r2, r2, #1
 8003446:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003456:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6819      	ldr	r1, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800348c:	2302      	movs	r3, #2
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800349a:	b480      	push	{r7}
 800349c:	b085      	sub	sp, #20
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d139      	bne.n	8003524 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e033      	b.n	8003526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2224      	movs	r2, #36	@ 0x24
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80034ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	af02      	add	r7, sp, #8
 8003538:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e101      	b.n	8003748 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d106      	bne.n	800355e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7fe fcdd 	bl	8001f18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2203      	movs	r2, #3
 8003562:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f002 fe0d 	bl	8006190 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	7c1a      	ldrb	r2, [r3, #16]
 800357e:	f88d 2000 	strb.w	r2, [sp]
 8003582:	3304      	adds	r3, #4
 8003584:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003586:	f002 fdd6 	bl	8006136 <USB_CoreInit>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d005      	beq.n	800359c <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0d5      	b.n	8003748 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f002 fe05 	bl	80061b2 <USB_SetCurrentMode>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2202      	movs	r2, #2
 80035b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0c6      	b.n	8003748 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	73fb      	strb	r3, [r7, #15]
 80035be:	e04a      	b.n	8003656 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	3315      	adds	r3, #21
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3314      	adds	r3, #20
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035e8:	7bfa      	ldrb	r2, [r7, #15]
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	b298      	uxth	r0, r3
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	332e      	adds	r3, #46	@ 0x2e
 80035fc:	4602      	mov	r2, r0
 80035fe:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003600:	7bfa      	ldrb	r2, [r7, #15]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	4413      	add	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	3318      	adds	r3, #24
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003614:	7bfa      	ldrb	r2, [r7, #15]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	440b      	add	r3, r1
 8003622:	331c      	adds	r3, #28
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003628:	7bfa      	ldrb	r2, [r7, #15]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	3320      	adds	r3, #32
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800363c:	7bfa      	ldrb	r2, [r7, #15]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3324      	adds	r3, #36	@ 0x24
 800364c:	2200      	movs	r2, #0
 800364e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	3301      	adds	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	791b      	ldrb	r3, [r3, #4]
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	429a      	cmp	r2, r3
 800365e:	d3af      	bcc.n	80035c0 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003660:	2300      	movs	r3, #0
 8003662:	73fb      	strb	r3, [r7, #15]
 8003664:	e044      	b.n	80036f0 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800367c:	7bfa      	ldrb	r2, [r7, #15]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800368e:	7bfa      	ldrb	r2, [r7, #15]
 8003690:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036a8:	7bfa      	ldrb	r2, [r7, #15]
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036be:	7bfa      	ldrb	r2, [r7, #15]
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	4613      	mov	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	4613      	mov	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	3301      	adds	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	791b      	ldrb	r3, [r3, #4]
 80036f4:	7bfa      	ldrb	r2, [r7, #15]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3b5      	bcc.n	8003666 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6818      	ldr	r0, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	7c1a      	ldrb	r2, [r3, #16]
 8003702:	f88d 2000 	strb.w	r2, [sp]
 8003706:	3304      	adds	r3, #4
 8003708:	cb0e      	ldmia	r3, {r1, r2, r3}
 800370a:	f002 fd9f 	bl	800624c <USB_DevInit>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e013      	b.n	8003748 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	7b1b      	ldrb	r3, [r3, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d102      	bne.n	800373c <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f80a 	bl	8003750 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f002 ff44 	bl	80065ce <USB_DevDisconnect>

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003782:	f043 0303 	orr.w	r3, r3, #3
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800379c:	4b04      	ldr	r3, [pc, #16]	@ (80037b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40007000 	.word	0x40007000

080037b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037c2:	d130      	bne.n	8003826 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c4:	4b23      	ldr	r3, [pc, #140]	@ (8003854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037d0:	d038      	beq.n	8003844 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037d2:	4b20      	ldr	r3, [pc, #128]	@ (8003854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037da:	4a1e      	ldr	r2, [pc, #120]	@ (8003854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037e2:	4b1d      	ldr	r3, [pc, #116]	@ (8003858 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2232      	movs	r2, #50	@ 0x32
 80037e8:	fb02 f303 	mul.w	r3, r2, r3
 80037ec:	4a1b      	ldr	r2, [pc, #108]	@ (800385c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	0c9b      	lsrs	r3, r3, #18
 80037f4:	3301      	adds	r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037f8:	e002      	b.n	8003800 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003800:	4b14      	ldr	r3, [pc, #80]	@ (8003854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003808:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800380c:	d102      	bne.n	8003814 <HAL_PWREx_ControlVoltageScaling+0x60>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f2      	bne.n	80037fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003814:	4b0f      	ldr	r3, [pc, #60]	@ (8003854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003820:	d110      	bne.n	8003844 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e00f      	b.n	8003846 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003826:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800382e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003832:	d007      	beq.n	8003844 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003834:	4b07      	ldr	r3, [pc, #28]	@ (8003854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800383c:	4a05      	ldr	r2, [pc, #20]	@ (8003854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003842:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40007000 	.word	0x40007000
 8003858:	20000000 	.word	0x20000000
 800385c:	431bde83 	.word	0x431bde83

08003860 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003864:	4b05      	ldr	r3, [pc, #20]	@ (800387c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	4a04      	ldr	r2, [pc, #16]	@ (800387c <HAL_PWREx_EnableVddUSB+0x1c>)
 800386a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800386e:	6053      	str	r3, [r2, #4]
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40007000 	.word	0x40007000

08003880 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e3ca      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003892:	4b97      	ldr	r3, [pc, #604]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800389c:	4b94      	ldr	r3, [pc, #592]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0310 	and.w	r3, r3, #16
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80e4 	beq.w	8003a7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d007      	beq.n	80038ca <HAL_RCC_OscConfig+0x4a>
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	2b0c      	cmp	r3, #12
 80038be:	f040 808b 	bne.w	80039d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	f040 8087 	bne.w	80039d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038ca:	4b89      	ldr	r3, [pc, #548]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_RCC_OscConfig+0x62>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e3a2      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1a      	ldr	r2, [r3, #32]
 80038e6:	4b82      	ldr	r3, [pc, #520]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <HAL_RCC_OscConfig+0x7c>
 80038f2:	4b7f      	ldr	r3, [pc, #508]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038fa:	e005      	b.n	8003908 <HAL_RCC_OscConfig+0x88>
 80038fc:	4b7c      	ldr	r3, [pc, #496]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 80038fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003908:	4293      	cmp	r3, r2
 800390a:	d223      	bcs.n	8003954 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fd55 	bl	80043c0 <RCC_SetFlashLatencyFromMSIRange>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e383      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003920:	4b73      	ldr	r3, [pc, #460]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a72      	ldr	r2, [pc, #456]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003926:	f043 0308 	orr.w	r3, r3, #8
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	4b70      	ldr	r3, [pc, #448]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	496d      	ldr	r1, [pc, #436]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800393e:	4b6c      	ldr	r3, [pc, #432]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	021b      	lsls	r3, r3, #8
 800394c:	4968      	ldr	r1, [pc, #416]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 800394e:	4313      	orrs	r3, r2
 8003950:	604b      	str	r3, [r1, #4]
 8003952:	e025      	b.n	80039a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003954:	4b66      	ldr	r3, [pc, #408]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a65      	ldr	r2, [pc, #404]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 800395a:	f043 0308 	orr.w	r3, r3, #8
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4b63      	ldr	r3, [pc, #396]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	4960      	ldr	r1, [pc, #384]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003972:	4b5f      	ldr	r3, [pc, #380]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	495b      	ldr	r1, [pc, #364]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003982:	4313      	orrs	r3, r2
 8003984:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d109      	bne.n	80039a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a1b      	ldr	r3, [r3, #32]
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fd15 	bl	80043c0 <RCC_SetFlashLatencyFromMSIRange>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e343      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039a0:	f000 fc4a 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b52      	ldr	r3, [pc, #328]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f003 030f 	and.w	r3, r3, #15
 80039b0:	4950      	ldr	r1, [pc, #320]	@ (8003af4 <HAL_RCC_OscConfig+0x274>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	fa22 f303 	lsr.w	r3, r2, r3
 80039bc:	4a4e      	ldr	r2, [pc, #312]	@ (8003af8 <HAL_RCC_OscConfig+0x278>)
 80039be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80039c0:	4b4e      	ldr	r3, [pc, #312]	@ (8003afc <HAL_RCC_OscConfig+0x27c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fe fcb5 	bl	8002334 <HAL_InitTick>
 80039ca:	4603      	mov	r3, r0
 80039cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d052      	beq.n	8003a7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	e327      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d032      	beq.n	8003a46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80039e0:	4b43      	ldr	r3, [pc, #268]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a42      	ldr	r2, [pc, #264]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80039ec:	f7fe fcf2 	bl	80023d4 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039f4:	f7fe fcee 	bl	80023d4 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e310      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a06:	4b3a      	ldr	r3, [pc, #232]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0f0      	beq.n	80039f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a12:	4b37      	ldr	r3, [pc, #220]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a36      	ldr	r2, [pc, #216]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a18:	f043 0308 	orr.w	r3, r3, #8
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b34      	ldr	r3, [pc, #208]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4931      	ldr	r1, [pc, #196]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a30:	4b2f      	ldr	r3, [pc, #188]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	492c      	ldr	r1, [pc, #176]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]
 8003a44:	e01a      	b.n	8003a7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003a46:	4b2a      	ldr	r3, [pc, #168]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a29      	ldr	r2, [pc, #164]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a4c:	f023 0301 	bic.w	r3, r3, #1
 8003a50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a52:	f7fe fcbf 	bl	80023d4 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a5a:	f7fe fcbb 	bl	80023d4 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e2dd      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003a6c:	4b20      	ldr	r3, [pc, #128]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f0      	bne.n	8003a5a <HAL_RCC_OscConfig+0x1da>
 8003a78:	e000      	b.n	8003a7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d074      	beq.n	8003b72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d005      	beq.n	8003a9a <HAL_RCC_OscConfig+0x21a>
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d10e      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d10b      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a9a:	4b15      	ldr	r3, [pc, #84]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d064      	beq.n	8003b70 <HAL_RCC_OscConfig+0x2f0>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d160      	bne.n	8003b70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e2ba      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x24a>
 8003abc:	4b0c      	ldr	r3, [pc, #48]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0b      	ldr	r2, [pc, #44]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	e026      	b.n	8003b18 <HAL_RCC_OscConfig+0x298>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ad2:	d115      	bne.n	8003b00 <HAL_RCC_OscConfig+0x280>
 8003ad4:	4b06      	ldr	r3, [pc, #24]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a05      	ldr	r2, [pc, #20]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003ada:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b03      	ldr	r3, [pc, #12]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a02      	ldr	r2, [pc, #8]	@ (8003af0 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	e014      	b.n	8003b18 <HAL_RCC_OscConfig+0x298>
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
 8003af4:	0800add8 	.word	0x0800add8
 8003af8:	20000000 	.word	0x20000000
 8003afc:	20000004 	.word	0x20000004
 8003b00:	4ba0      	ldr	r3, [pc, #640]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a9f      	ldr	r2, [pc, #636]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b9d      	ldr	r3, [pc, #628]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a9c      	ldr	r2, [pc, #624]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d013      	beq.n	8003b48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b20:	f7fe fc58 	bl	80023d4 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b28:	f7fe fc54 	bl	80023d4 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	@ 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e276      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b3a:	4b92      	ldr	r3, [pc, #584]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x2a8>
 8003b46:	e014      	b.n	8003b72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fe fc44 	bl	80023d4 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b50:	f7fe fc40 	bl	80023d4 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	@ 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e262      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b62:	4b88      	ldr	r3, [pc, #544]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x2d0>
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d060      	beq.n	8003c40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	2b04      	cmp	r3, #4
 8003b82:	d005      	beq.n	8003b90 <HAL_RCC_OscConfig+0x310>
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b0c      	cmp	r3, #12
 8003b88:	d119      	bne.n	8003bbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d116      	bne.n	8003bbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b90:	4b7c      	ldr	r3, [pc, #496]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x328>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e23f      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba8:	4b76      	ldr	r3, [pc, #472]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	4973      	ldr	r1, [pc, #460]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bbc:	e040      	b.n	8003c40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d023      	beq.n	8003c0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bc6:	4b6f      	ldr	r3, [pc, #444]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a6e      	ldr	r2, [pc, #440]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd2:	f7fe fbff 	bl	80023d4 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bda:	f7fe fbfb 	bl	80023d4 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e21d      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bec:	4b65      	ldr	r3, [pc, #404]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf8:	4b62      	ldr	r3, [pc, #392]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	061b      	lsls	r3, r3, #24
 8003c06:	495f      	ldr	r1, [pc, #380]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]
 8003c0c:	e018      	b.n	8003c40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a5c      	ldr	r2, [pc, #368]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fe fbdb 	bl	80023d4 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c22:	f7fe fbd7 	bl	80023d4 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e1f9      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c34:	4b53      	ldr	r3, [pc, #332]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1f0      	bne.n	8003c22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d03c      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d01c      	beq.n	8003c8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c54:	4b4b      	ldr	r3, [pc, #300]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c5a:	4a4a      	ldr	r2, [pc, #296]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c64:	f7fe fbb6 	bl	80023d4 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c6c:	f7fe fbb2 	bl	80023d4 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e1d4      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c7e:	4b41      	ldr	r3, [pc, #260]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ef      	beq.n	8003c6c <HAL_RCC_OscConfig+0x3ec>
 8003c8c:	e01b      	b.n	8003cc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c94:	4a3b      	ldr	r2, [pc, #236]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003c96:	f023 0301 	bic.w	r3, r3, #1
 8003c9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9e:	f7fe fb99 	bl	80023d4 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca6:	f7fe fb95 	bl	80023d4 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e1b7      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cb8:	4b32      	ldr	r3, [pc, #200]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1ef      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80a6 	beq.w	8003e20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10d      	bne.n	8003d00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ce4:	4b27      	ldr	r3, [pc, #156]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce8:	4a26      	ldr	r2, [pc, #152]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cee:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cf0:	4b24      	ldr	r3, [pc, #144]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf8:	60bb      	str	r3, [r7, #8]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d00:	4b21      	ldr	r3, [pc, #132]	@ (8003d88 <HAL_RCC_OscConfig+0x508>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d118      	bne.n	8003d3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8003d88 <HAL_RCC_OscConfig+0x508>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a1d      	ldr	r2, [pc, #116]	@ (8003d88 <HAL_RCC_OscConfig+0x508>)
 8003d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d18:	f7fe fb5c 	bl	80023d4 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d20:	f7fe fb58 	bl	80023d4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e17a      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d32:	4b15      	ldr	r3, [pc, #84]	@ (8003d88 <HAL_RCC_OscConfig+0x508>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d108      	bne.n	8003d58 <HAL_RCC_OscConfig+0x4d8>
 8003d46:	4b0f      	ldr	r3, [pc, #60]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003d4e:	f043 0301 	orr.w	r3, r3, #1
 8003d52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d56:	e029      	b.n	8003dac <HAL_RCC_OscConfig+0x52c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d115      	bne.n	8003d8c <HAL_RCC_OscConfig+0x50c>
 8003d60:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d66:	4a07      	ldr	r2, [pc, #28]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003d68:	f043 0304 	orr.w	r3, r3, #4
 8003d6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d70:	4b04      	ldr	r3, [pc, #16]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d76:	4a03      	ldr	r2, [pc, #12]	@ (8003d84 <HAL_RCC_OscConfig+0x504>)
 8003d78:	f043 0301 	orr.w	r3, r3, #1
 8003d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d80:	e014      	b.n	8003dac <HAL_RCC_OscConfig+0x52c>
 8003d82:	bf00      	nop
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40007000 	.word	0x40007000
 8003d8c:	4b9c      	ldr	r3, [pc, #624]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d92:	4a9b      	ldr	r2, [pc, #620]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003d9c:	4b98      	ldr	r3, [pc, #608]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da2:	4a97      	ldr	r2, [pc, #604]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d016      	beq.n	8003de2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db4:	f7fe fb0e 	bl	80023d4 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dba:	e00a      	b.n	8003dd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbc:	f7fe fb0a 	bl	80023d4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e12a      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd2:	4b8b      	ldr	r3, [pc, #556]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0ed      	beq.n	8003dbc <HAL_RCC_OscConfig+0x53c>
 8003de0:	e015      	b.n	8003e0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de2:	f7fe faf7 	bl	80023d4 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fe faf3 	bl	80023d4 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e113      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e00:	4b7f      	ldr	r3, [pc, #508]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1ed      	bne.n	8003dea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0e:	7ffb      	ldrb	r3, [r7, #31]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e14:	4b7a      	ldr	r3, [pc, #488]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e18:	4a79      	ldr	r2, [pc, #484]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003e1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e1e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80fe 	beq.w	8004026 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	f040 80d0 	bne.w	8003fd4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003e34:	4b72      	ldr	r3, [pc, #456]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f003 0203 	and.w	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d130      	bne.n	8003eaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e52:	3b01      	subs	r3, #1
 8003e54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d127      	bne.n	8003eaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d11f      	bne.n	8003eaa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003e74:	2a07      	cmp	r2, #7
 8003e76:	bf14      	ite	ne
 8003e78:	2201      	movne	r2, #1
 8003e7a:	2200      	moveq	r2, #0
 8003e7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d113      	bne.n	8003eaa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d109      	bne.n	8003eaa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d06e      	beq.n	8003f88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	d069      	beq.n	8003f84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003eb0:	4b53      	ldr	r3, [pc, #332]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d105      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ebc:	4b50      	ldr	r3, [pc, #320]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0ad      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ecc:	4b4c      	ldr	r3, [pc, #304]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a4b      	ldr	r2, [pc, #300]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003ed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ed6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ed8:	f7fe fa7c 	bl	80023d4 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fe fa78 	bl	80023d4 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e09a      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef2:	4b43      	ldr	r3, [pc, #268]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003efe:	4b40      	ldr	r3, [pc, #256]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	4b40      	ldr	r3, [pc, #256]	@ (8004004 <HAL_RCC_OscConfig+0x784>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003f0e:	3a01      	subs	r2, #1
 8003f10:	0112      	lsls	r2, r2, #4
 8003f12:	4311      	orrs	r1, r2
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003f18:	0212      	lsls	r2, r2, #8
 8003f1a:	4311      	orrs	r1, r2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003f20:	0852      	lsrs	r2, r2, #1
 8003f22:	3a01      	subs	r2, #1
 8003f24:	0552      	lsls	r2, r2, #21
 8003f26:	4311      	orrs	r1, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003f2c:	0852      	lsrs	r2, r2, #1
 8003f2e:	3a01      	subs	r2, #1
 8003f30:	0652      	lsls	r2, r2, #25
 8003f32:	4311      	orrs	r1, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f38:	0912      	lsrs	r2, r2, #4
 8003f3a:	0452      	lsls	r2, r2, #17
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	4930      	ldr	r1, [pc, #192]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003f44:	4b2e      	ldr	r3, [pc, #184]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a2d      	ldr	r2, [pc, #180]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f50:	4b2b      	ldr	r3, [pc, #172]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	4a2a      	ldr	r2, [pc, #168]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003f56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f5c:	f7fe fa3a 	bl	80023d4 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe fa36 	bl	80023d4 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e058      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f76:	4b22      	ldr	r3, [pc, #136]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f82:	e050      	b.n	8004026 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e04f      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f88:	4b1d      	ldr	r3, [pc, #116]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d148      	bne.n	8004026 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f94:	4b1a      	ldr	r3, [pc, #104]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a19      	ldr	r2, [pc, #100]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003fa0:	4b17      	ldr	r3, [pc, #92]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	4a16      	ldr	r2, [pc, #88]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003fa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003faa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fac:	f7fe fa12 	bl	80023d4 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fe fa0e 	bl	80023d4 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e030      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fc6:	4b0e      	ldr	r3, [pc, #56]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x734>
 8003fd2:	e028      	b.n	8004026 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	d023      	beq.n	8004022 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fda:	4b09      	ldr	r3, [pc, #36]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a08      	ldr	r2, [pc, #32]	@ (8004000 <HAL_RCC_OscConfig+0x780>)
 8003fe0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fe f9f5 	bl	80023d4 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fec:	e00c      	b.n	8004008 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fe f9f1 	bl	80023d4 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d905      	bls.n	8004008 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e013      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
 8004000:	40021000 	.word	0x40021000
 8004004:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004008:	4b09      	ldr	r3, [pc, #36]	@ (8004030 <HAL_RCC_OscConfig+0x7b0>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1ec      	bne.n	8003fee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004014:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <HAL_RCC_OscConfig+0x7b0>)
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	4905      	ldr	r1, [pc, #20]	@ (8004030 <HAL_RCC_OscConfig+0x7b0>)
 800401a:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <HAL_RCC_OscConfig+0x7b4>)
 800401c:	4013      	ands	r3, r2
 800401e:	60cb      	str	r3, [r1, #12]
 8004020:	e001      	b.n	8004026 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3720      	adds	r7, #32
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40021000 	.word	0x40021000
 8004034:	feeefffc 	.word	0xfeeefffc

08004038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0e7      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800404c:	4b75      	ldr	r3, [pc, #468]	@ (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	429a      	cmp	r2, r3
 8004058:	d910      	bls.n	800407c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405a:	4b72      	ldr	r3, [pc, #456]	@ (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f023 0207 	bic.w	r2, r3, #7
 8004062:	4970      	ldr	r1, [pc, #448]	@ (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	4313      	orrs	r3, r2
 8004068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800406a:	4b6e      	ldr	r3, [pc, #440]	@ (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d001      	beq.n	800407c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0cf      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d010      	beq.n	80040aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	4b66      	ldr	r3, [pc, #408]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004094:	429a      	cmp	r2, r3
 8004096:	d908      	bls.n	80040aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004098:	4b63      	ldr	r3, [pc, #396]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4960      	ldr	r1, [pc, #384]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d04c      	beq.n	8004150 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d107      	bne.n	80040ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040be:	4b5a      	ldr	r3, [pc, #360]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d121      	bne.n	800410e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e0a6      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d107      	bne.n	80040e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d6:	4b54      	ldr	r3, [pc, #336]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d115      	bne.n	800410e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e09a      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040ee:	4b4e      	ldr	r3, [pc, #312]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e08e      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e086      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800410e:	4b46      	ldr	r3, [pc, #280]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 0203 	bic.w	r2, r3, #3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	4943      	ldr	r1, [pc, #268]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 800411c:	4313      	orrs	r3, r2
 800411e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004120:	f7fe f958 	bl	80023d4 <HAL_GetTick>
 8004124:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004126:	e00a      	b.n	800413e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004128:	f7fe f954 	bl	80023d4 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e06e      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413e:	4b3a      	ldr	r3, [pc, #232]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 020c 	and.w	r2, r3, #12
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	429a      	cmp	r2, r3
 800414e:	d1eb      	bne.n	8004128 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d010      	beq.n	800417e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	4b31      	ldr	r3, [pc, #196]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004168:	429a      	cmp	r2, r3
 800416a:	d208      	bcs.n	800417e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416c:	4b2e      	ldr	r3, [pc, #184]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	492b      	ldr	r1, [pc, #172]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 800417a:	4313      	orrs	r3, r2
 800417c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800417e:	4b29      	ldr	r3, [pc, #164]	@ (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d210      	bcs.n	80041ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418c:	4b25      	ldr	r3, [pc, #148]	@ (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f023 0207 	bic.w	r2, r3, #7
 8004194:	4923      	ldr	r1, [pc, #140]	@ (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	4313      	orrs	r3, r2
 800419a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419c:	4b21      	ldr	r3, [pc, #132]	@ (8004224 <HAL_RCC_ClockConfig+0x1ec>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e036      	b.n	800421c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d008      	beq.n	80041cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	4918      	ldr	r1, [pc, #96]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041d8:	4b13      	ldr	r3, [pc, #76]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4910      	ldr	r1, [pc, #64]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041ec:	f000 f824 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 80041f0:	4602      	mov	r2, r0
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <HAL_RCC_ClockConfig+0x1f0>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	490b      	ldr	r1, [pc, #44]	@ (800422c <HAL_RCC_ClockConfig+0x1f4>)
 80041fe:	5ccb      	ldrb	r3, [r1, r3]
 8004200:	f003 031f 	and.w	r3, r3, #31
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
 8004208:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <HAL_RCC_ClockConfig+0x1f8>)
 800420a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800420c:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <HAL_RCC_ClockConfig+0x1fc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7fe f88f 	bl	8002334 <HAL_InitTick>
 8004216:	4603      	mov	r3, r0
 8004218:	72fb      	strb	r3, [r7, #11]

  return status;
 800421a:	7afb      	ldrb	r3, [r7, #11]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40022000 	.word	0x40022000
 8004228:	40021000 	.word	0x40021000
 800422c:	0800add8 	.word	0x0800add8
 8004230:	20000000 	.word	0x20000000
 8004234:	20000004 	.word	0x20000004

08004238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	@ 0x24
 800423c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	2300      	movs	r3, #0
 8004244:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004246:	4b3e      	ldr	r3, [pc, #248]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004250:	4b3b      	ldr	r3, [pc, #236]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f003 0303 	and.w	r3, r3, #3
 8004258:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x34>
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	2b0c      	cmp	r3, #12
 8004264:	d121      	bne.n	80042aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d11e      	bne.n	80042aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800426c:	4b34      	ldr	r3, [pc, #208]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d107      	bne.n	8004288 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004278:	4b31      	ldr	r3, [pc, #196]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 800427a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800427e:	0a1b      	lsrs	r3, r3, #8
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	e005      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004288:	4b2d      	ldr	r3, [pc, #180]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004294:	4a2b      	ldr	r2, [pc, #172]	@ (8004344 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10d      	bne.n	80042c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d102      	bne.n	80042b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80042b0:	4b25      	ldr	r3, [pc, #148]	@ (8004348 <HAL_RCC_GetSysClockFreq+0x110>)
 80042b2:	61bb      	str	r3, [r7, #24]
 80042b4:	e004      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80042bc:	4b23      	ldr	r3, [pc, #140]	@ (800434c <HAL_RCC_GetSysClockFreq+0x114>)
 80042be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	2b0c      	cmp	r3, #12
 80042c4:	d134      	bne.n	8004330 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d003      	beq.n	80042de <HAL_RCC_GetSysClockFreq+0xa6>
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b03      	cmp	r3, #3
 80042da:	d003      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0xac>
 80042dc:	e005      	b.n	80042ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80042de:	4b1a      	ldr	r3, [pc, #104]	@ (8004348 <HAL_RCC_GetSysClockFreq+0x110>)
 80042e0:	617b      	str	r3, [r7, #20]
      break;
 80042e2:	e005      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80042e4:	4b19      	ldr	r3, [pc, #100]	@ (800434c <HAL_RCC_GetSysClockFreq+0x114>)
 80042e6:	617b      	str	r3, [r7, #20]
      break;
 80042e8:	e002      	b.n	80042f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	617b      	str	r3, [r7, #20]
      break;
 80042ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042f0:	4b13      	ldr	r3, [pc, #76]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	091b      	lsrs	r3, r3, #4
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	3301      	adds	r3, #1
 80042fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042fe:	4b10      	ldr	r3, [pc, #64]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	0a1b      	lsrs	r3, r3, #8
 8004304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	fb03 f202 	mul.w	r2, r3, r2
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004316:	4b0a      	ldr	r3, [pc, #40]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x108>)
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	0e5b      	lsrs	r3, r3, #25
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	3301      	adds	r3, #1
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004326:	697a      	ldr	r2, [r7, #20]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	fbb2 f3f3 	udiv	r3, r2, r3
 800432e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004330:	69bb      	ldr	r3, [r7, #24]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3724      	adds	r7, #36	@ 0x24
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	0800adf0 	.word	0x0800adf0
 8004348:	00f42400 	.word	0x00f42400
 800434c:	007a1200 	.word	0x007a1200

08004350 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004354:	4b03      	ldr	r3, [pc, #12]	@ (8004364 <HAL_RCC_GetHCLKFreq+0x14>)
 8004356:	681b      	ldr	r3, [r3, #0]
}
 8004358:	4618      	mov	r0, r3
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20000000 	.word	0x20000000

08004368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800436c:	f7ff fff0 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b06      	ldr	r3, [pc, #24]	@ (800438c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4904      	ldr	r1, [pc, #16]	@ (8004390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004388:	4618      	mov	r0, r3
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40021000 	.word	0x40021000
 8004390:	0800ade8 	.word	0x0800ade8

08004394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004398:	f7ff ffda 	bl	8004350 <HAL_RCC_GetHCLKFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	0adb      	lsrs	r3, r3, #11
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4904      	ldr	r1, [pc, #16]	@ (80043bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000
 80043bc:	0800ade8 	.word	0x0800ade8

080043c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80043c8:	2300      	movs	r3, #0
 80043ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80043cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80043d8:	f7ff f9de 	bl	8003798 <HAL_PWREx_GetVoltageRange>
 80043dc:	6178      	str	r0, [r7, #20]
 80043de:	e014      	b.n	800440a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80043e0:	4b25      	ldr	r3, [pc, #148]	@ (8004478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e4:	4a24      	ldr	r2, [pc, #144]	@ (8004478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ec:	4b22      	ldr	r3, [pc, #136]	@ (8004478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80043ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80043f8:	f7ff f9ce 	bl	8003798 <HAL_PWREx_GetVoltageRange>
 80043fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80043fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004402:	4a1d      	ldr	r2, [pc, #116]	@ (8004478 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004404:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004408:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004410:	d10b      	bne.n	800442a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b80      	cmp	r3, #128	@ 0x80
 8004416:	d919      	bls.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2ba0      	cmp	r3, #160	@ 0xa0
 800441c:	d902      	bls.n	8004424 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800441e:	2302      	movs	r3, #2
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	e013      	b.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004424:	2301      	movs	r3, #1
 8004426:	613b      	str	r3, [r7, #16]
 8004428:	e010      	b.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b80      	cmp	r3, #128	@ 0x80
 800442e:	d902      	bls.n	8004436 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004430:	2303      	movs	r3, #3
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	e00a      	b.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b80      	cmp	r3, #128	@ 0x80
 800443a:	d102      	bne.n	8004442 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800443c:	2302      	movs	r3, #2
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	e004      	b.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b70      	cmp	r3, #112	@ 0x70
 8004446:	d101      	bne.n	800444c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004448:	2301      	movs	r3, #1
 800444a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800444c:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f023 0207 	bic.w	r2, r3, #7
 8004454:	4909      	ldr	r1, [pc, #36]	@ (800447c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800445c:	4b07      	ldr	r3, [pc, #28]	@ (800447c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	429a      	cmp	r2, r3
 8004468:	d001      	beq.n	800446e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e000      	b.n	8004470 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40021000 	.word	0x40021000
 800447c:	40022000 	.word	0x40022000

08004480 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004488:	2300      	movs	r3, #0
 800448a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800448c:	2300      	movs	r3, #0
 800448e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004498:	2b00      	cmp	r3, #0
 800449a:	d041      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80044a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044a4:	d02a      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80044a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80044aa:	d824      	bhi.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044b0:	d008      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80044b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80044b6:	d81e      	bhi.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80044bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044c0:	d010      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80044c2:	e018      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80044c4:	4b86      	ldr	r3, [pc, #536]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	4a85      	ldr	r2, [pc, #532]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044d0:	e015      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3304      	adds	r3, #4
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fabb 	bl	8004a54 <RCCEx_PLLSAI1_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044e2:	e00c      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	3320      	adds	r3, #32
 80044e8:	2100      	movs	r1, #0
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fba6 	bl	8004c3c <RCCEx_PLLSAI2_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044f4:	e003      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	74fb      	strb	r3, [r7, #19]
      break;
 80044fa:	e000      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80044fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004504:	4b76      	ldr	r3, [pc, #472]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004512:	4973      	ldr	r1, [pc, #460]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800451a:	e001      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	7cfb      	ldrb	r3, [r7, #19]
 800451e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d041      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004530:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004534:	d02a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004536:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800453a:	d824      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800453c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004540:	d008      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004542:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004546:	d81e      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800454c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004550:	d010      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004552:	e018      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004554:	4b62      	ldr	r3, [pc, #392]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4a61      	ldr	r2, [pc, #388]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800455a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800455e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004560:	e015      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3304      	adds	r3, #4
 8004566:	2100      	movs	r1, #0
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fa73 	bl	8004a54 <RCCEx_PLLSAI1_Config>
 800456e:	4603      	mov	r3, r0
 8004570:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004572:	e00c      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3320      	adds	r3, #32
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fb5e 	bl	8004c3c <RCCEx_PLLSAI2_Config>
 8004580:	4603      	mov	r3, r0
 8004582:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004584:	e003      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	74fb      	strb	r3, [r7, #19]
      break;
 800458a:	e000      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800458c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800458e:	7cfb      	ldrb	r3, [r7, #19]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004594:	4b52      	ldr	r3, [pc, #328]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800459a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a2:	494f      	ldr	r1, [pc, #316]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045aa:	e001      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	7cfb      	ldrb	r3, [r7, #19]
 80045ae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80a0 	beq.w	80046fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045be:	2300      	movs	r3, #0
 80045c0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045c2:	4b47      	ldr	r3, [pc, #284]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80045ce:	2301      	movs	r3, #1
 80045d0:	e000      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80045d2:	2300      	movs	r3, #0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00d      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045d8:	4b41      	ldr	r3, [pc, #260]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045dc:	4a40      	ldr	r2, [pc, #256]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80045e4:	4b3e      	ldr	r3, [pc, #248]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f0:	2301      	movs	r3, #1
 80045f2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045f4:	4b3b      	ldr	r3, [pc, #236]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a3a      	ldr	r2, [pc, #232]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80045fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004600:	f7fd fee8 	bl	80023d4 <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004606:	e009      	b.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004608:	f7fd fee4 	bl	80023d4 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d902      	bls.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	74fb      	strb	r3, [r7, #19]
        break;
 800461a:	e005      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800461c:	4b31      	ldr	r3, [pc, #196]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d0ef      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004628:	7cfb      	ldrb	r3, [r7, #19]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d15c      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800462e:	4b2c      	ldr	r3, [pc, #176]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004634:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004638:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d01f      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	429a      	cmp	r2, r3
 800464a:	d019      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800464c:	4b24      	ldr	r3, [pc, #144]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004656:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004658:	4b21      	ldr	r3, [pc, #132]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465e:	4a20      	ldr	r2, [pc, #128]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004664:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004668:	4b1d      	ldr	r3, [pc, #116]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800466e:	4a1c      	ldr	r2, [pc, #112]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004670:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004678:	4a19      	ldr	r2, [pc, #100]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d016      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fd fea3 	bl	80023d4 <HAL_GetTick>
 800468e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004690:	e00b      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004692:	f7fd fe9f 	bl	80023d4 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d902      	bls.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	74fb      	strb	r3, [r7, #19]
            break;
 80046a8:	e006      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046aa:	4b0d      	ldr	r3, [pc, #52]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d0ec      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80046b8:	7cfb      	ldrb	r3, [r7, #19]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046be:	4b08      	ldr	r3, [pc, #32]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046ce:	4904      	ldr	r1, [pc, #16]	@ (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80046d6:	e009      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046d8:	7cfb      	ldrb	r3, [r7, #19]
 80046da:	74bb      	strb	r3, [r7, #18]
 80046dc:	e006      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80046de:	bf00      	nop
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e8:	7cfb      	ldrb	r3, [r7, #19]
 80046ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046ec:	7c7b      	ldrb	r3, [r7, #17]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d105      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f2:	4b9e      	ldr	r3, [pc, #632]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f6:	4a9d      	ldr	r2, [pc, #628]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800470a:	4b98      	ldr	r3, [pc, #608]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800470c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004710:	f023 0203 	bic.w	r2, r3, #3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004718:	4994      	ldr	r1, [pc, #592]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800472c:	4b8f      	ldr	r3, [pc, #572]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800472e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004732:	f023 020c 	bic.w	r2, r3, #12
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473a:	498c      	ldr	r1, [pc, #560]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00a      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800474e:	4b87      	ldr	r3, [pc, #540]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004754:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475c:	4983      	ldr	r1, [pc, #524]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004770:	4b7e      	ldr	r3, [pc, #504]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004776:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	497b      	ldr	r1, [pc, #492]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004792:	4b76      	ldr	r3, [pc, #472]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004798:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047a0:	4972      	ldr	r1, [pc, #456]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047b4:	4b6d      	ldr	r3, [pc, #436]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c2:	496a      	ldr	r1, [pc, #424]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00a      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047d6:	4b65      	ldr	r3, [pc, #404]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e4:	4961      	ldr	r1, [pc, #388]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00a      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047f8:	4b5c      	ldr	r3, [pc, #368]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004806:	4959      	ldr	r1, [pc, #356]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800481a:	4b54      	ldr	r3, [pc, #336]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004820:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004828:	4950      	ldr	r1, [pc, #320]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00a      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800483c:	4b4b      	ldr	r3, [pc, #300]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004842:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484a:	4948      	ldr	r1, [pc, #288]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800485e:	4b43      	ldr	r3, [pc, #268]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004864:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800486c:	493f      	ldr	r1, [pc, #252]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d028      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004880:	4b3a      	ldr	r3, [pc, #232]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004886:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800488e:	4937      	ldr	r1, [pc, #220]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	4313      	orrs	r3, r2
 8004892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800489a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800489e:	d106      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048a0:	4b32      	ldr	r3, [pc, #200]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4a31      	ldr	r2, [pc, #196]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048aa:	60d3      	str	r3, [r2, #12]
 80048ac:	e011      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80048b6:	d10c      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3304      	adds	r3, #4
 80048bc:	2101      	movs	r1, #1
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f8c8 	bl	8004a54 <RCCEx_PLLSAI1_Config>
 80048c4:	4603      	mov	r3, r0
 80048c6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048c8:	7cfb      	ldrb	r3, [r7, #19]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80048ce:	7cfb      	ldrb	r3, [r7, #19]
 80048d0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d028      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048de:	4b23      	ldr	r3, [pc, #140]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048e4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ec:	491f      	ldr	r1, [pc, #124]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048fc:	d106      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fe:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	4a1a      	ldr	r2, [pc, #104]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004904:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004908:	60d3      	str	r3, [r2, #12]
 800490a:	e011      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004910:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004914:	d10c      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3304      	adds	r3, #4
 800491a:	2101      	movs	r1, #1
 800491c:	4618      	mov	r0, r3
 800491e:	f000 f899 	bl	8004a54 <RCCEx_PLLSAI1_Config>
 8004922:	4603      	mov	r3, r0
 8004924:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004926:	7cfb      	ldrb	r3, [r7, #19]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800492c:	7cfb      	ldrb	r3, [r7, #19]
 800492e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d02b      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004942:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800494a:	4908      	ldr	r1, [pc, #32]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004956:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800495a:	d109      	bne.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800495c:	4b03      	ldr	r3, [pc, #12]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4a02      	ldr	r2, [pc, #8]	@ (800496c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004962:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004966:	60d3      	str	r3, [r2, #12]
 8004968:	e014      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800496a:	bf00      	nop
 800496c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004974:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004978:	d10c      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	3304      	adds	r3, #4
 800497e:	2101      	movs	r1, #1
 8004980:	4618      	mov	r0, r3
 8004982:	f000 f867 	bl	8004a54 <RCCEx_PLLSAI1_Config>
 8004986:	4603      	mov	r3, r0
 8004988:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800498a:	7cfb      	ldrb	r3, [r7, #19]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004990:	7cfb      	ldrb	r3, [r7, #19]
 8004992:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d02f      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ae:	4928      	ldr	r1, [pc, #160]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80049be:	d10d      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3304      	adds	r3, #4
 80049c4:	2102      	movs	r1, #2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f844 	bl	8004a54 <RCCEx_PLLSAI1_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049d0:	7cfb      	ldrb	r3, [r7, #19]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d014      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049d6:	7cfb      	ldrb	r3, [r7, #19]
 80049d8:	74bb      	strb	r3, [r7, #18]
 80049da:	e011      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049e4:	d10c      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3320      	adds	r3, #32
 80049ea:	2102      	movs	r1, #2
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 f925 	bl	8004c3c <RCCEx_PLLSAI2_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80049fc:	7cfb      	ldrb	r3, [r7, #19]
 80049fe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a0c:	4b10      	ldr	r3, [pc, #64]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a12:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a1a:	490d      	ldr	r1, [pc, #52]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a2e:	4b08      	ldr	r3, [pc, #32]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a34:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a3e:	4904      	ldr	r1, [pc, #16]	@ (8004a50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a46:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000

08004a54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a62:	4b75      	ldr	r3, [pc, #468]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d018      	beq.n	8004aa0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a6e:	4b72      	ldr	r3, [pc, #456]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0203 	and.w	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d10d      	bne.n	8004a9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
       ||
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d009      	beq.n	8004a9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a86:	4b6c      	ldr	r3, [pc, #432]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	091b      	lsrs	r3, r3, #4
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
       ||
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d047      	beq.n	8004b2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	73fb      	strb	r3, [r7, #15]
 8004a9e:	e044      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d018      	beq.n	8004ada <RCCEx_PLLSAI1_Config+0x86>
 8004aa8:	2b03      	cmp	r3, #3
 8004aaa:	d825      	bhi.n	8004af8 <RCCEx_PLLSAI1_Config+0xa4>
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d002      	beq.n	8004ab6 <RCCEx_PLLSAI1_Config+0x62>
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d009      	beq.n	8004ac8 <RCCEx_PLLSAI1_Config+0x74>
 8004ab4:	e020      	b.n	8004af8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ab6:	4b60      	ldr	r3, [pc, #384]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d11d      	bne.n	8004afe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac6:	e01a      	b.n	8004afe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ac8:	4b5b      	ldr	r3, [pc, #364]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d116      	bne.n	8004b02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad8:	e013      	b.n	8004b02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ada:	4b57      	ldr	r3, [pc, #348]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10f      	bne.n	8004b06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ae6:	4b54      	ldr	r3, [pc, #336]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d109      	bne.n	8004b06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004af6:	e006      	b.n	8004b06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
      break;
 8004afc:	e004      	b.n	8004b08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004afe:	bf00      	nop
 8004b00:	e002      	b.n	8004b08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b02:	bf00      	nop
 8004b04:	e000      	b.n	8004b08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10d      	bne.n	8004b2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6819      	ldr	r1, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	430b      	orrs	r3, r1
 8004b24:	4944      	ldr	r1, [pc, #272]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d17d      	bne.n	8004c2c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b30:	4b41      	ldr	r3, [pc, #260]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a40      	ldr	r2, [pc, #256]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3c:	f7fd fc4a 	bl	80023d4 <HAL_GetTick>
 8004b40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b42:	e009      	b.n	8004b58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b44:	f7fd fc46 	bl	80023d4 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d902      	bls.n	8004b58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	73fb      	strb	r3, [r7, #15]
        break;
 8004b56:	e005      	b.n	8004b64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b58:	4b37      	ldr	r3, [pc, #220]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1ef      	bne.n	8004b44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d160      	bne.n	8004c2c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d111      	bne.n	8004b94 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b70:	4b31      	ldr	r3, [pc, #196]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004b78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6892      	ldr	r2, [r2, #8]
 8004b80:	0211      	lsls	r1, r2, #8
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68d2      	ldr	r2, [r2, #12]
 8004b86:	0912      	lsrs	r2, r2, #4
 8004b88:	0452      	lsls	r2, r2, #17
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	492a      	ldr	r1, [pc, #168]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	610b      	str	r3, [r1, #16]
 8004b92:	e027      	b.n	8004be4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d112      	bne.n	8004bc0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b9a:	4b27      	ldr	r3, [pc, #156]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004ba2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6892      	ldr	r2, [r2, #8]
 8004baa:	0211      	lsls	r1, r2, #8
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6912      	ldr	r2, [r2, #16]
 8004bb0:	0852      	lsrs	r2, r2, #1
 8004bb2:	3a01      	subs	r2, #1
 8004bb4:	0552      	lsls	r2, r2, #21
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	491f      	ldr	r1, [pc, #124]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	610b      	str	r3, [r1, #16]
 8004bbe:	e011      	b.n	8004be4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004bc8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6892      	ldr	r2, [r2, #8]
 8004bd0:	0211      	lsls	r1, r2, #8
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6952      	ldr	r2, [r2, #20]
 8004bd6:	0852      	lsrs	r2, r2, #1
 8004bd8:	3a01      	subs	r2, #1
 8004bda:	0652      	lsls	r2, r2, #25
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	4916      	ldr	r1, [pc, #88]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004be4:	4b14      	ldr	r3, [pc, #80]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a13      	ldr	r2, [pc, #76]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004bee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7fd fbf0 	bl	80023d4 <HAL_GetTick>
 8004bf4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bf6:	e009      	b.n	8004c0c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bf8:	f7fd fbec 	bl	80023d4 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d902      	bls.n	8004c0c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	73fb      	strb	r3, [r7, #15]
          break;
 8004c0a:	e005      	b.n	8004c18 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ef      	beq.n	8004bf8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c1e:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c20:	691a      	ldr	r2, [r3, #16]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	699b      	ldr	r3, [r3, #24]
 8004c26:	4904      	ldr	r1, [pc, #16]	@ (8004c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000

08004c3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d018      	beq.n	8004c88 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004c56:	4b67      	ldr	r3, [pc, #412]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f003 0203 	and.w	r2, r3, #3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d10d      	bne.n	8004c82 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
       ||
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d009      	beq.n	8004c82 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004c6e:	4b61      	ldr	r3, [pc, #388]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	091b      	lsrs	r3, r3, #4
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
       ||
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d047      	beq.n	8004d12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	73fb      	strb	r3, [r7, #15]
 8004c86:	e044      	b.n	8004d12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d018      	beq.n	8004cc2 <RCCEx_PLLSAI2_Config+0x86>
 8004c90:	2b03      	cmp	r3, #3
 8004c92:	d825      	bhi.n	8004ce0 <RCCEx_PLLSAI2_Config+0xa4>
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d002      	beq.n	8004c9e <RCCEx_PLLSAI2_Config+0x62>
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d009      	beq.n	8004cb0 <RCCEx_PLLSAI2_Config+0x74>
 8004c9c:	e020      	b.n	8004ce0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c9e:	4b55      	ldr	r3, [pc, #340]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d11d      	bne.n	8004ce6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cae:	e01a      	b.n	8004ce6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cb0:	4b50      	ldr	r3, [pc, #320]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d116      	bne.n	8004cea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cc0:	e013      	b.n	8004cea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10f      	bne.n	8004cee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cce:	4b49      	ldr	r3, [pc, #292]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cde:	e006      	b.n	8004cee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce4:	e004      	b.n	8004cf0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e002      	b.n	8004cf0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cea:	bf00      	nop
 8004cec:	e000      	b.n	8004cf0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004cee:	bf00      	nop
    }

    if(status == HAL_OK)
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10d      	bne.n	8004d12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6819      	ldr	r1, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	4939      	ldr	r1, [pc, #228]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d12:	7bfb      	ldrb	r3, [r7, #15]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d167      	bne.n	8004de8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d18:	4b36      	ldr	r3, [pc, #216]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a35      	ldr	r2, [pc, #212]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d24:	f7fd fb56 	bl	80023d4 <HAL_GetTick>
 8004d28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d2a:	e009      	b.n	8004d40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d2c:	f7fd fb52 	bl	80023d4 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d902      	bls.n	8004d40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d3e:	e005      	b.n	8004d4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d40:	4b2c      	ldr	r3, [pc, #176]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1ef      	bne.n	8004d2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d14a      	bne.n	8004de8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d111      	bne.n	8004d7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d58:	4b26      	ldr	r3, [pc, #152]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	6892      	ldr	r2, [r2, #8]
 8004d68:	0211      	lsls	r1, r2, #8
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	68d2      	ldr	r2, [r2, #12]
 8004d6e:	0912      	lsrs	r2, r2, #4
 8004d70:	0452      	lsls	r2, r2, #17
 8004d72:	430a      	orrs	r2, r1
 8004d74:	491f      	ldr	r1, [pc, #124]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	614b      	str	r3, [r1, #20]
 8004d7a:	e011      	b.n	8004da0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6892      	ldr	r2, [r2, #8]
 8004d8c:	0211      	lsls	r1, r2, #8
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6912      	ldr	r2, [r2, #16]
 8004d92:	0852      	lsrs	r2, r2, #1
 8004d94:	3a01      	subs	r2, #1
 8004d96:	0652      	lsls	r2, r2, #25
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	4916      	ldr	r1, [pc, #88]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004da0:	4b14      	ldr	r3, [pc, #80]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a13      	ldr	r2, [pc, #76]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004daa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dac:	f7fd fb12 	bl	80023d4 <HAL_GetTick>
 8004db0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004db2:	e009      	b.n	8004dc8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004db4:	f7fd fb0e 	bl	80023d4 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d902      	bls.n	8004dc8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	73fb      	strb	r3, [r7, #15]
          break;
 8004dc6:	e005      	b.n	8004dd4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0ef      	beq.n	8004db4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004dda:	4b06      	ldr	r3, [pc, #24]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	4904      	ldr	r1, [pc, #16]	@ (8004df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de4:	4313      	orrs	r3, r2
 8004de6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	40021000 	.word	0x40021000

08004df8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e095      	b.n	8004f36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d108      	bne.n	8004e24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e1a:	d009      	beq.n	8004e30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	61da      	str	r2, [r3, #28]
 8004e22:	e005      	b.n	8004e30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fc ff5c 	bl	8001d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e70:	d902      	bls.n	8004e78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	e002      	b.n	8004e7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004e86:	d007      	beq.n	8004e98 <HAL_SPI_Init+0xa0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004e90:	d002      	beq.n	8004e98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0302 	and.w	r3, r3, #2
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	431a      	orrs	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eda:	ea42 0103 	orr.w	r1, r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	0c1b      	lsrs	r3, r3, #16
 8004ef4:	f003 0204 	and.w	r2, r3, #4
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efc:	f003 0310 	and.w	r3, r3, #16
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f06:	f003 0308 	and.w	r3, r3, #8
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004f14:	ea42 0103 	orr.w	r1, r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e049      	b.n	8004fe4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d106      	bne.n	8004f6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f7fc ff13 	bl	8001d90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f000 f967 	bl	8005250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d001      	beq.n	8005004 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e047      	b.n	8005094 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a23      	ldr	r2, [pc, #140]	@ (80050a0 <HAL_TIM_Base_Start+0xb4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01d      	beq.n	8005052 <HAL_TIM_Base_Start+0x66>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800501e:	d018      	beq.n	8005052 <HAL_TIM_Base_Start+0x66>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1f      	ldr	r2, [pc, #124]	@ (80050a4 <HAL_TIM_Base_Start+0xb8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d013      	beq.n	8005052 <HAL_TIM_Base_Start+0x66>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1e      	ldr	r2, [pc, #120]	@ (80050a8 <HAL_TIM_Base_Start+0xbc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00e      	beq.n	8005052 <HAL_TIM_Base_Start+0x66>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1c      	ldr	r2, [pc, #112]	@ (80050ac <HAL_TIM_Base_Start+0xc0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_TIM_Base_Start+0x66>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1b      	ldr	r2, [pc, #108]	@ (80050b0 <HAL_TIM_Base_Start+0xc4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d004      	beq.n	8005052 <HAL_TIM_Base_Start+0x66>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a19      	ldr	r2, [pc, #100]	@ (80050b4 <HAL_TIM_Base_Start+0xc8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d115      	bne.n	800507e <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	4b17      	ldr	r3, [pc, #92]	@ (80050b8 <HAL_TIM_Base_Start+0xcc>)
 800505a:	4013      	ands	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2b06      	cmp	r3, #6
 8005062:	d015      	beq.n	8005090 <HAL_TIM_Base_Start+0xa4>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800506a:	d011      	beq.n	8005090 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507c:	e008      	b.n	8005090 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0201 	orr.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e000      	b.n	8005092 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005090:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40012c00 	.word	0x40012c00
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40000c00 	.word	0x40000c00
 80050b0:	40013400 	.word	0x40013400
 80050b4:	40014000 	.word	0x40014000
 80050b8:	00010007 	.word	0x00010007

080050bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_TIM_ConfigClockSource+0x1c>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e0b6      	b.n	8005246 <HAL_TIM_ConfigClockSource+0x18a>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80050fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005102:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005114:	d03e      	beq.n	8005194 <HAL_TIM_ConfigClockSource+0xd8>
 8005116:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800511a:	f200 8087 	bhi.w	800522c <HAL_TIM_ConfigClockSource+0x170>
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005122:	f000 8086 	beq.w	8005232 <HAL_TIM_ConfigClockSource+0x176>
 8005126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800512a:	d87f      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x170>
 800512c:	2b70      	cmp	r3, #112	@ 0x70
 800512e:	d01a      	beq.n	8005166 <HAL_TIM_ConfigClockSource+0xaa>
 8005130:	2b70      	cmp	r3, #112	@ 0x70
 8005132:	d87b      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x170>
 8005134:	2b60      	cmp	r3, #96	@ 0x60
 8005136:	d050      	beq.n	80051da <HAL_TIM_ConfigClockSource+0x11e>
 8005138:	2b60      	cmp	r3, #96	@ 0x60
 800513a:	d877      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x170>
 800513c:	2b50      	cmp	r3, #80	@ 0x50
 800513e:	d03c      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0xfe>
 8005140:	2b50      	cmp	r3, #80	@ 0x50
 8005142:	d873      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x170>
 8005144:	2b40      	cmp	r3, #64	@ 0x40
 8005146:	d058      	beq.n	80051fa <HAL_TIM_ConfigClockSource+0x13e>
 8005148:	2b40      	cmp	r3, #64	@ 0x40
 800514a:	d86f      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x170>
 800514c:	2b30      	cmp	r3, #48	@ 0x30
 800514e:	d064      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x15e>
 8005150:	2b30      	cmp	r3, #48	@ 0x30
 8005152:	d86b      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x170>
 8005154:	2b20      	cmp	r3, #32
 8005156:	d060      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x15e>
 8005158:	2b20      	cmp	r3, #32
 800515a:	d867      	bhi.n	800522c <HAL_TIM_ConfigClockSource+0x170>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d05c      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x15e>
 8005160:	2b10      	cmp	r3, #16
 8005162:	d05a      	beq.n	800521a <HAL_TIM_ConfigClockSource+0x15e>
 8005164:	e062      	b.n	800522c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005176:	f000 f98b 	bl	8005490 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005188:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	609a      	str	r2, [r3, #8]
      break;
 8005192:	e04f      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051a4:	f000 f974 	bl	8005490 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051b6:	609a      	str	r2, [r3, #8]
      break;
 80051b8:	e03c      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051c6:	461a      	mov	r2, r3
 80051c8:	f000 f8e8 	bl	800539c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2150      	movs	r1, #80	@ 0x50
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 f941 	bl	800545a <TIM_ITRx_SetConfig>
      break;
 80051d8:	e02c      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051e6:	461a      	mov	r2, r3
 80051e8:	f000 f907 	bl	80053fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2160      	movs	r1, #96	@ 0x60
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 f931 	bl	800545a <TIM_ITRx_SetConfig>
      break;
 80051f8:	e01c      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005206:	461a      	mov	r2, r3
 8005208:	f000 f8c8 	bl	800539c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2140      	movs	r1, #64	@ 0x40
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f921 	bl	800545a <TIM_ITRx_SetConfig>
      break;
 8005218:	e00c      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4619      	mov	r1, r3
 8005224:	4610      	mov	r0, r2
 8005226:	f000 f918 	bl	800545a <TIM_ITRx_SetConfig>
      break;
 800522a:	e003      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
      break;
 8005230:	e000      	b.n	8005234 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005232:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a46      	ldr	r2, [pc, #280]	@ (800537c <TIM_Base_SetConfig+0x12c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800526e:	d00f      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a43      	ldr	r2, [pc, #268]	@ (8005380 <TIM_Base_SetConfig+0x130>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00b      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a42      	ldr	r2, [pc, #264]	@ (8005384 <TIM_Base_SetConfig+0x134>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a41      	ldr	r2, [pc, #260]	@ (8005388 <TIM_Base_SetConfig+0x138>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a40      	ldr	r2, [pc, #256]	@ (800538c <TIM_Base_SetConfig+0x13c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d108      	bne.n	80052a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a35      	ldr	r2, [pc, #212]	@ (800537c <TIM_Base_SetConfig+0x12c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d01f      	beq.n	80052ea <TIM_Base_SetConfig+0x9a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052b0:	d01b      	beq.n	80052ea <TIM_Base_SetConfig+0x9a>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a32      	ldr	r2, [pc, #200]	@ (8005380 <TIM_Base_SetConfig+0x130>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d017      	beq.n	80052ea <TIM_Base_SetConfig+0x9a>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a31      	ldr	r2, [pc, #196]	@ (8005384 <TIM_Base_SetConfig+0x134>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <TIM_Base_SetConfig+0x9a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a30      	ldr	r2, [pc, #192]	@ (8005388 <TIM_Base_SetConfig+0x138>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d00f      	beq.n	80052ea <TIM_Base_SetConfig+0x9a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a2f      	ldr	r2, [pc, #188]	@ (800538c <TIM_Base_SetConfig+0x13c>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d00b      	beq.n	80052ea <TIM_Base_SetConfig+0x9a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005390 <TIM_Base_SetConfig+0x140>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d007      	beq.n	80052ea <TIM_Base_SetConfig+0x9a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005394 <TIM_Base_SetConfig+0x144>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d003      	beq.n	80052ea <TIM_Base_SetConfig+0x9a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005398 <TIM_Base_SetConfig+0x148>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d108      	bne.n	80052fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a16      	ldr	r2, [pc, #88]	@ (800537c <TIM_Base_SetConfig+0x12c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00f      	beq.n	8005348 <TIM_Base_SetConfig+0xf8>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a18      	ldr	r2, [pc, #96]	@ (800538c <TIM_Base_SetConfig+0x13c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00b      	beq.n	8005348 <TIM_Base_SetConfig+0xf8>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a17      	ldr	r2, [pc, #92]	@ (8005390 <TIM_Base_SetConfig+0x140>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d007      	beq.n	8005348 <TIM_Base_SetConfig+0xf8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a16      	ldr	r2, [pc, #88]	@ (8005394 <TIM_Base_SetConfig+0x144>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0xf8>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a15      	ldr	r2, [pc, #84]	@ (8005398 <TIM_Base_SetConfig+0x148>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d103      	bne.n	8005350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b01      	cmp	r3, #1
 8005360:	d105      	bne.n	800536e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f023 0201 	bic.w	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	611a      	str	r2, [r3, #16]
  }
}
 800536e:	bf00      	nop
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40012c00 	.word	0x40012c00
 8005380:	40000400 	.word	0x40000400
 8005384:	40000800 	.word	0x40000800
 8005388:	40000c00 	.word	0x40000c00
 800538c:	40013400 	.word	0x40013400
 8005390:	40014000 	.word	0x40014000
 8005394:	40014400 	.word	0x40014400
 8005398:	40014800 	.word	0x40014800

0800539c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f023 0201 	bic.w	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 030a 	bic.w	r3, r3, #10
 80053d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b087      	sub	sp, #28
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f023 0210 	bic.w	r2, r3, #16
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005424:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	031b      	lsls	r3, r3, #12
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005436:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800545a:	b480      	push	{r7}
 800545c:	b085      	sub	sp, #20
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4313      	orrs	r3, r2
 8005478:	f043 0307 	orr.w	r3, r3, #7
 800547c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	609a      	str	r2, [r3, #8]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005490:	b480      	push	{r7}
 8005492:	b087      	sub	sp, #28
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	021a      	lsls	r2, r3, #8
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	609a      	str	r2, [r3, #8]
}
 80054c4:	bf00      	nop
 80054c6:	371c      	adds	r7, #28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e068      	b.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2e      	ldr	r2, [pc, #184]	@ (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a2d      	ldr	r2, [pc, #180]	@ (80055cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d108      	bne.n	800552e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005522:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	4313      	orrs	r3, r2
 800552c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005534:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1e      	ldr	r2, [pc, #120]	@ (80055c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d01d      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800555a:	d018      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1b      	ldr	r2, [pc, #108]	@ (80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1a      	ldr	r2, [pc, #104]	@ (80055d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00e      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a18      	ldr	r2, [pc, #96]	@ (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d009      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a13      	ldr	r2, [pc, #76]	@ (80055cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a14      	ldr	r2, [pc, #80]	@ (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d10c      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	4313      	orrs	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40013400 	.word	0x40013400
 80055d0:	40000400 	.word	0x40000400
 80055d4:	40000800 	.word	0x40000800
 80055d8:	40000c00 	.word	0x40000c00
 80055dc:	40014000 	.word	0x40014000

080055e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e040      	b.n	8005674 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d106      	bne.n	8005608 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7fc fbe4 	bl	8001dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2224      	movs	r2, #36	@ 0x24
 800560c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0201 	bic.w	r2, r2, #1
 800561c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fb6a 	bl	8005d00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f8af 	bl	8005790 <UART_SetConfig>
 8005632:	4603      	mov	r3, r0
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e01b      	b.n	8005674 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800564a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800565a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0201 	orr.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fbe9 	bl	8005e44 <UART_CheckIdleState>
 8005672:	4603      	mov	r3, r0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	@ 0x28
 8005680:	af02      	add	r7, sp, #8
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	4613      	mov	r3, r2
 800568a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005690:	2b20      	cmp	r3, #32
 8005692:	d177      	bne.n	8005784 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_UART_Transmit+0x24>
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e070      	b.n	8005786 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2221      	movs	r2, #33	@ 0x21
 80056b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056b2:	f7fc fe8f 	bl	80023d4 <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d0:	d108      	bne.n	80056e4 <HAL_UART_Transmit+0x68>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d104      	bne.n	80056e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	e003      	b.n	80056ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056ec:	e02f      	b.n	800574e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2180      	movs	r1, #128	@ 0x80
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fc4b 	bl	8005f94 <UART_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d004      	beq.n	800570e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e03b      	b.n	8005786 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10b      	bne.n	800572c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	881a      	ldrh	r2, [r3, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005720:	b292      	uxth	r2, r2
 8005722:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	3302      	adds	r3, #2
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	e007      	b.n	800573c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3301      	adds	r3, #1
 800573a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1c9      	bne.n	80056ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2200      	movs	r2, #0
 8005762:	2140      	movs	r1, #64	@ 0x40
 8005764:	68f8      	ldr	r0, [r7, #12]
 8005766:	f000 fc15 	bl	8005f94 <UART_WaitOnFlagUntilTimeout>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d004      	beq.n	800577a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e005      	b.n	8005786 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	3720      	adds	r7, #32
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005794:	b08a      	sub	sp, #40	@ 0x28
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4ba4      	ldr	r3, [pc, #656]	@ (8005a50 <UART_SetConfig+0x2c0>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a99      	ldr	r2, [pc, #612]	@ (8005a54 <UART_SetConfig+0x2c4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f8:	4313      	orrs	r3, r2
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800580c:	430a      	orrs	r2, r1
 800580e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a90      	ldr	r2, [pc, #576]	@ (8005a58 <UART_SetConfig+0x2c8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d126      	bne.n	8005868 <UART_SetConfig+0xd8>
 800581a:	4b90      	ldr	r3, [pc, #576]	@ (8005a5c <UART_SetConfig+0x2cc>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005820:	f003 0303 	and.w	r3, r3, #3
 8005824:	2b03      	cmp	r3, #3
 8005826:	d81b      	bhi.n	8005860 <UART_SetConfig+0xd0>
 8005828:	a201      	add	r2, pc, #4	@ (adr r2, 8005830 <UART_SetConfig+0xa0>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	08005841 	.word	0x08005841
 8005834:	08005851 	.word	0x08005851
 8005838:	08005849 	.word	0x08005849
 800583c:	08005859 	.word	0x08005859
 8005840:	2301      	movs	r3, #1
 8005842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005846:	e116      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005848:	2302      	movs	r3, #2
 800584a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800584e:	e112      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005850:	2304      	movs	r3, #4
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005856:	e10e      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005858:	2308      	movs	r3, #8
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800585e:	e10a      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005860:	2310      	movs	r3, #16
 8005862:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005866:	e106      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a7c      	ldr	r2, [pc, #496]	@ (8005a60 <UART_SetConfig+0x2d0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d138      	bne.n	80058e4 <UART_SetConfig+0x154>
 8005872:	4b7a      	ldr	r3, [pc, #488]	@ (8005a5c <UART_SetConfig+0x2cc>)
 8005874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005878:	f003 030c 	and.w	r3, r3, #12
 800587c:	2b0c      	cmp	r3, #12
 800587e:	d82d      	bhi.n	80058dc <UART_SetConfig+0x14c>
 8005880:	a201      	add	r2, pc, #4	@ (adr r2, 8005888 <UART_SetConfig+0xf8>)
 8005882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005886:	bf00      	nop
 8005888:	080058bd 	.word	0x080058bd
 800588c:	080058dd 	.word	0x080058dd
 8005890:	080058dd 	.word	0x080058dd
 8005894:	080058dd 	.word	0x080058dd
 8005898:	080058cd 	.word	0x080058cd
 800589c:	080058dd 	.word	0x080058dd
 80058a0:	080058dd 	.word	0x080058dd
 80058a4:	080058dd 	.word	0x080058dd
 80058a8:	080058c5 	.word	0x080058c5
 80058ac:	080058dd 	.word	0x080058dd
 80058b0:	080058dd 	.word	0x080058dd
 80058b4:	080058dd 	.word	0x080058dd
 80058b8:	080058d5 	.word	0x080058d5
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058c2:	e0d8      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058c4:	2302      	movs	r3, #2
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ca:	e0d4      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d2:	e0d0      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058da:	e0cc      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e2:	e0c8      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a5e      	ldr	r2, [pc, #376]	@ (8005a64 <UART_SetConfig+0x2d4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d125      	bne.n	800593a <UART_SetConfig+0x1aa>
 80058ee:	4b5b      	ldr	r3, [pc, #364]	@ (8005a5c <UART_SetConfig+0x2cc>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80058f8:	2b30      	cmp	r3, #48	@ 0x30
 80058fa:	d016      	beq.n	800592a <UART_SetConfig+0x19a>
 80058fc:	2b30      	cmp	r3, #48	@ 0x30
 80058fe:	d818      	bhi.n	8005932 <UART_SetConfig+0x1a2>
 8005900:	2b20      	cmp	r3, #32
 8005902:	d00a      	beq.n	800591a <UART_SetConfig+0x18a>
 8005904:	2b20      	cmp	r3, #32
 8005906:	d814      	bhi.n	8005932 <UART_SetConfig+0x1a2>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <UART_SetConfig+0x182>
 800590c:	2b10      	cmp	r3, #16
 800590e:	d008      	beq.n	8005922 <UART_SetConfig+0x192>
 8005910:	e00f      	b.n	8005932 <UART_SetConfig+0x1a2>
 8005912:	2300      	movs	r3, #0
 8005914:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005918:	e0ad      	b.n	8005a76 <UART_SetConfig+0x2e6>
 800591a:	2302      	movs	r3, #2
 800591c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005920:	e0a9      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005922:	2304      	movs	r3, #4
 8005924:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005928:	e0a5      	b.n	8005a76 <UART_SetConfig+0x2e6>
 800592a:	2308      	movs	r3, #8
 800592c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005930:	e0a1      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005932:	2310      	movs	r3, #16
 8005934:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005938:	e09d      	b.n	8005a76 <UART_SetConfig+0x2e6>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a4a      	ldr	r2, [pc, #296]	@ (8005a68 <UART_SetConfig+0x2d8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d125      	bne.n	8005990 <UART_SetConfig+0x200>
 8005944:	4b45      	ldr	r3, [pc, #276]	@ (8005a5c <UART_SetConfig+0x2cc>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800594a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800594e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005950:	d016      	beq.n	8005980 <UART_SetConfig+0x1f0>
 8005952:	2bc0      	cmp	r3, #192	@ 0xc0
 8005954:	d818      	bhi.n	8005988 <UART_SetConfig+0x1f8>
 8005956:	2b80      	cmp	r3, #128	@ 0x80
 8005958:	d00a      	beq.n	8005970 <UART_SetConfig+0x1e0>
 800595a:	2b80      	cmp	r3, #128	@ 0x80
 800595c:	d814      	bhi.n	8005988 <UART_SetConfig+0x1f8>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <UART_SetConfig+0x1d8>
 8005962:	2b40      	cmp	r3, #64	@ 0x40
 8005964:	d008      	beq.n	8005978 <UART_SetConfig+0x1e8>
 8005966:	e00f      	b.n	8005988 <UART_SetConfig+0x1f8>
 8005968:	2300      	movs	r3, #0
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800596e:	e082      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005970:	2302      	movs	r3, #2
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005976:	e07e      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005978:	2304      	movs	r3, #4
 800597a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800597e:	e07a      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005980:	2308      	movs	r3, #8
 8005982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005986:	e076      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005988:	2310      	movs	r3, #16
 800598a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800598e:	e072      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a35      	ldr	r2, [pc, #212]	@ (8005a6c <UART_SetConfig+0x2dc>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d12a      	bne.n	80059f0 <UART_SetConfig+0x260>
 800599a:	4b30      	ldr	r3, [pc, #192]	@ (8005a5c <UART_SetConfig+0x2cc>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059a8:	d01a      	beq.n	80059e0 <UART_SetConfig+0x250>
 80059aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ae:	d81b      	bhi.n	80059e8 <UART_SetConfig+0x258>
 80059b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059b4:	d00c      	beq.n	80059d0 <UART_SetConfig+0x240>
 80059b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059ba:	d815      	bhi.n	80059e8 <UART_SetConfig+0x258>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <UART_SetConfig+0x238>
 80059c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059c4:	d008      	beq.n	80059d8 <UART_SetConfig+0x248>
 80059c6:	e00f      	b.n	80059e8 <UART_SetConfig+0x258>
 80059c8:	2300      	movs	r3, #0
 80059ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ce:	e052      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059d0:	2302      	movs	r3, #2
 80059d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059d6:	e04e      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059d8:	2304      	movs	r3, #4
 80059da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059de:	e04a      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059e0:	2308      	movs	r3, #8
 80059e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059e6:	e046      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059e8:	2310      	movs	r3, #16
 80059ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ee:	e042      	b.n	8005a76 <UART_SetConfig+0x2e6>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a17      	ldr	r2, [pc, #92]	@ (8005a54 <UART_SetConfig+0x2c4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d13a      	bne.n	8005a70 <UART_SetConfig+0x2e0>
 80059fa:	4b18      	ldr	r3, [pc, #96]	@ (8005a5c <UART_SetConfig+0x2cc>)
 80059fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a08:	d01a      	beq.n	8005a40 <UART_SetConfig+0x2b0>
 8005a0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a0e:	d81b      	bhi.n	8005a48 <UART_SetConfig+0x2b8>
 8005a10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a14:	d00c      	beq.n	8005a30 <UART_SetConfig+0x2a0>
 8005a16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a1a:	d815      	bhi.n	8005a48 <UART_SetConfig+0x2b8>
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <UART_SetConfig+0x298>
 8005a20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a24:	d008      	beq.n	8005a38 <UART_SetConfig+0x2a8>
 8005a26:	e00f      	b.n	8005a48 <UART_SetConfig+0x2b8>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a2e:	e022      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a30:	2302      	movs	r3, #2
 8005a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a36:	e01e      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a3e:	e01a      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a40:	2308      	movs	r3, #8
 8005a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a46:	e016      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a4e:	e012      	b.n	8005a76 <UART_SetConfig+0x2e6>
 8005a50:	efff69f3 	.word	0xefff69f3
 8005a54:	40008000 	.word	0x40008000
 8005a58:	40013800 	.word	0x40013800
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	40004400 	.word	0x40004400
 8005a64:	40004800 	.word	0x40004800
 8005a68:	40004c00 	.word	0x40004c00
 8005a6c:	40005000 	.word	0x40005000
 8005a70:	2310      	movs	r3, #16
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a9f      	ldr	r2, [pc, #636]	@ (8005cf8 <UART_SetConfig+0x568>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d17a      	bne.n	8005b76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d824      	bhi.n	8005ad2 <UART_SetConfig+0x342>
 8005a88:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <UART_SetConfig+0x300>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005ab5 	.word	0x08005ab5
 8005a94:	08005ad3 	.word	0x08005ad3
 8005a98:	08005abd 	.word	0x08005abd
 8005a9c:	08005ad3 	.word	0x08005ad3
 8005aa0:	08005ac3 	.word	0x08005ac3
 8005aa4:	08005ad3 	.word	0x08005ad3
 8005aa8:	08005ad3 	.word	0x08005ad3
 8005aac:	08005ad3 	.word	0x08005ad3
 8005ab0:	08005acb 	.word	0x08005acb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ab4:	f7fe fc58 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8005ab8:	61f8      	str	r0, [r7, #28]
        break;
 8005aba:	e010      	b.n	8005ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005abc:	4b8f      	ldr	r3, [pc, #572]	@ (8005cfc <UART_SetConfig+0x56c>)
 8005abe:	61fb      	str	r3, [r7, #28]
        break;
 8005ac0:	e00d      	b.n	8005ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ac2:	f7fe fbb9 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 8005ac6:	61f8      	str	r0, [r7, #28]
        break;
 8005ac8:	e009      	b.n	8005ade <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005aca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ace:	61fb      	str	r3, [r7, #28]
        break;
 8005ad0:	e005      	b.n	8005ade <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005adc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80fb 	beq.w	8005cdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	4613      	mov	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	4413      	add	r3, r2
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d305      	bcc.n	8005b02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d903      	bls.n	8005b0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b08:	e0e8      	b.n	8005cdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	461c      	mov	r4, r3
 8005b10:	4615      	mov	r5, r2
 8005b12:	f04f 0200 	mov.w	r2, #0
 8005b16:	f04f 0300 	mov.w	r3, #0
 8005b1a:	022b      	lsls	r3, r5, #8
 8005b1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b20:	0222      	lsls	r2, r4, #8
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	6849      	ldr	r1, [r1, #4]
 8005b26:	0849      	lsrs	r1, r1, #1
 8005b28:	2000      	movs	r0, #0
 8005b2a:	4688      	mov	r8, r1
 8005b2c:	4681      	mov	r9, r0
 8005b2e:	eb12 0a08 	adds.w	sl, r2, r8
 8005b32:	eb43 0b09 	adc.w	fp, r3, r9
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b44:	4650      	mov	r0, sl
 8005b46:	4659      	mov	r1, fp
 8005b48:	f7fb f89e 	bl	8000c88 <__aeabi_uldivmod>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4613      	mov	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b5a:	d308      	bcc.n	8005b6e <UART_SetConfig+0x3de>
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b62:	d204      	bcs.n	8005b6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	e0b6      	b.n	8005cdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b74:	e0b2      	b.n	8005cdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b7e:	d15e      	bne.n	8005c3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005b80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d828      	bhi.n	8005bda <UART_SetConfig+0x44a>
 8005b88:	a201      	add	r2, pc, #4	@ (adr r2, 8005b90 <UART_SetConfig+0x400>)
 8005b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b8e:	bf00      	nop
 8005b90:	08005bb5 	.word	0x08005bb5
 8005b94:	08005bbd 	.word	0x08005bbd
 8005b98:	08005bc5 	.word	0x08005bc5
 8005b9c:	08005bdb 	.word	0x08005bdb
 8005ba0:	08005bcb 	.word	0x08005bcb
 8005ba4:	08005bdb 	.word	0x08005bdb
 8005ba8:	08005bdb 	.word	0x08005bdb
 8005bac:	08005bdb 	.word	0x08005bdb
 8005bb0:	08005bd3 	.word	0x08005bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bb4:	f7fe fbd8 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8005bb8:	61f8      	str	r0, [r7, #28]
        break;
 8005bba:	e014      	b.n	8005be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bbc:	f7fe fbea 	bl	8004394 <HAL_RCC_GetPCLK2Freq>
 8005bc0:	61f8      	str	r0, [r7, #28]
        break;
 8005bc2:	e010      	b.n	8005be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8005cfc <UART_SetConfig+0x56c>)
 8005bc6:	61fb      	str	r3, [r7, #28]
        break;
 8005bc8:	e00d      	b.n	8005be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bca:	f7fe fb35 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 8005bce:	61f8      	str	r0, [r7, #28]
        break;
 8005bd0:	e009      	b.n	8005be6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bd6:	61fb      	str	r3, [r7, #28]
        break;
 8005bd8:	e005      	b.n	8005be6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005be4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005be6:	69fb      	ldr	r3, [r7, #28]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d077      	beq.n	8005cdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	005a      	lsls	r2, r3, #1
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	085b      	lsrs	r3, r3, #1
 8005bf6:	441a      	add	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b0f      	cmp	r3, #15
 8005c06:	d916      	bls.n	8005c36 <UART_SetConfig+0x4a6>
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c0e:	d212      	bcs.n	8005c36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f023 030f 	bic.w	r3, r3, #15
 8005c18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	f003 0307 	and.w	r3, r3, #7
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	8afb      	ldrh	r3, [r7, #22]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	8afa      	ldrh	r2, [r7, #22]
 8005c32:	60da      	str	r2, [r3, #12]
 8005c34:	e052      	b.n	8005cdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c3c:	e04e      	b.n	8005cdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c42:	2b08      	cmp	r3, #8
 8005c44:	d827      	bhi.n	8005c96 <UART_SetConfig+0x506>
 8005c46:	a201      	add	r2, pc, #4	@ (adr r2, 8005c4c <UART_SetConfig+0x4bc>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c81 	.word	0x08005c81
 8005c58:	08005c97 	.word	0x08005c97
 8005c5c:	08005c87 	.word	0x08005c87
 8005c60:	08005c97 	.word	0x08005c97
 8005c64:	08005c97 	.word	0x08005c97
 8005c68:	08005c97 	.word	0x08005c97
 8005c6c:	08005c8f 	.word	0x08005c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c70:	f7fe fb7a 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 8005c74:	61f8      	str	r0, [r7, #28]
        break;
 8005c76:	e014      	b.n	8005ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c78:	f7fe fb8c 	bl	8004394 <HAL_RCC_GetPCLK2Freq>
 8005c7c:	61f8      	str	r0, [r7, #28]
        break;
 8005c7e:	e010      	b.n	8005ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c80:	4b1e      	ldr	r3, [pc, #120]	@ (8005cfc <UART_SetConfig+0x56c>)
 8005c82:	61fb      	str	r3, [r7, #28]
        break;
 8005c84:	e00d      	b.n	8005ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c86:	f7fe fad7 	bl	8004238 <HAL_RCC_GetSysClockFreq>
 8005c8a:	61f8      	str	r0, [r7, #28]
        break;
 8005c8c:	e009      	b.n	8005ca2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c92:	61fb      	str	r3, [r7, #28]
        break;
 8005c94:	e005      	b.n	8005ca2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ca0:	bf00      	nop
    }

    if (pclk != 0U)
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d019      	beq.n	8005cdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	085a      	lsrs	r2, r3, #1
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	441a      	add	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b0f      	cmp	r3, #15
 8005cc0:	d909      	bls.n	8005cd6 <UART_SetConfig+0x546>
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cc8:	d205      	bcs.n	8005cd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	60da      	str	r2, [r3, #12]
 8005cd4:	e002      	b.n	8005cdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ce8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3728      	adds	r7, #40	@ 0x28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cf6:	bf00      	nop
 8005cf8:	40008000 	.word	0x40008000
 8005cfc:	00f42400 	.word	0x00f42400

08005d00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	f003 0308 	and.w	r3, r3, #8
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00a      	beq.n	8005d4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00a      	beq.n	8005d6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	430a      	orrs	r2, r1
 8005d6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00a      	beq.n	8005db2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01a      	beq.n	8005e16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dfe:	d10a      	bne.n	8005e16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	430a      	orrs	r2, r1
 8005e36:	605a      	str	r2, [r3, #4]
  }
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b098      	sub	sp, #96	@ 0x60
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e54:	f7fc fabe 	bl	80023d4 <HAL_GetTick>
 8005e58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0308 	and.w	r3, r3, #8
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d12e      	bne.n	8005ec6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e6c:	9300      	str	r3, [sp, #0]
 8005e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e70:	2200      	movs	r2, #0
 8005e72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f88c 	bl	8005f94 <UART_WaitOnFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d021      	beq.n	8005ec6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e96:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ea2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ea6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005eae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e6      	bne.n	8005e82 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e062      	b.n	8005f8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d149      	bne.n	8005f68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ed4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005edc:	2200      	movs	r2, #0
 8005ede:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f856 	bl	8005f94 <UART_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d03c      	beq.n	8005f68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	e853 3f00 	ldrex	r3, [r3]
 8005efa:	623b      	str	r3, [r7, #32]
   return(result);
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e6      	bne.n	8005eee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3308      	adds	r3, #8
 8005f26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	e853 3f00 	ldrex	r3, [r3]
 8005f2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f023 0301 	bic.w	r3, r3, #1
 8005f36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3308      	adds	r3, #8
 8005f3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f40:	61fa      	str	r2, [r7, #28]
 8005f42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f44:	69b9      	ldr	r1, [r7, #24]
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	e841 2300 	strex	r3, r2, [r1]
 8005f4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1e5      	bne.n	8005f20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e011      	b.n	8005f8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3758      	adds	r7, #88	@ 0x58
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fa4:	e04f      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d04b      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fae:	f7fc fa11 	bl	80023d4 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d302      	bcc.n	8005fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e04e      	b.n	8006066 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0304 	and.w	r3, r3, #4
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d037      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b80      	cmp	r3, #128	@ 0x80
 8005fda:	d034      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b40      	cmp	r3, #64	@ 0x40
 8005fe0:	d031      	beq.n	8006046 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d110      	bne.n	8006012 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2208      	movs	r2, #8
 8005ff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f838 	bl	800606e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2208      	movs	r2, #8
 8006002:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e029      	b.n	8006066 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800601c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006020:	d111      	bne.n	8006046 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800602a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f81e 	bl	800606e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	e00f      	b.n	8006066 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4013      	ands	r3, r2
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	429a      	cmp	r2, r3
 8006054:	bf0c      	ite	eq
 8006056:	2301      	moveq	r3, #1
 8006058:	2300      	movne	r3, #0
 800605a:	b2db      	uxtb	r3, r3
 800605c:	461a      	mov	r2, r3
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	429a      	cmp	r2, r3
 8006062:	d0a0      	beq.n	8005fa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800606e:	b480      	push	{r7}
 8006070:	b095      	sub	sp, #84	@ 0x54
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006086:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800608a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006094:	643b      	str	r3, [r7, #64]	@ 0x40
 8006096:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800609a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e6      	bne.n	8006076 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3308      	adds	r3, #8
 80060ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f023 0301 	bic.w	r3, r3, #1
 80060be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3308      	adds	r3, #8
 80060c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e5      	bne.n	80060a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d118      	bne.n	8006116 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f023 0310 	bic.w	r3, r3, #16
 80060f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006102:	61bb      	str	r3, [r7, #24]
 8006104:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6979      	ldr	r1, [r7, #20]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	613b      	str	r3, [r7, #16]
   return(result);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e6      	bne.n	80060e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800612a:	bf00      	nop
 800612c:	3754      	adds	r7, #84	@ 0x54
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006136:	b084      	sub	sp, #16
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	f107 001c 	add.w	r0, r7, #28
 8006144:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fa69 	bl	800662c <USB_CoreReset>
 800615a:	4603      	mov	r3, r0
 800615c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800615e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	639a      	str	r2, [r3, #56]	@ 0x38
 8006172:	e005      	b.n	8006180 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006178:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800618c:	b004      	add	sp, #16
 800618e:	4770      	bx	lr

08006190 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f023 0201 	bic.w	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d115      	bne.n	8006200 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80061e0:	200a      	movs	r0, #10
 80061e2:	f7fc f903 	bl	80023ec <HAL_Delay>
      ms += 10U;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	330a      	adds	r3, #10
 80061ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f000 fa0f 	bl	8006610 <USB_GetMode>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d01e      	beq.n	8006236 <USB_SetCurrentMode+0x84>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80061fc:	d9f0      	bls.n	80061e0 <USB_SetCurrentMode+0x2e>
 80061fe:	e01a      	b.n	8006236 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006200:	78fb      	ldrb	r3, [r7, #3]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d115      	bne.n	8006232 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006212:	200a      	movs	r0, #10
 8006214:	f7fc f8ea 	bl	80023ec <HAL_Delay>
      ms += 10U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	330a      	adds	r3, #10
 800621c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f9f6 	bl	8006610 <USB_GetMode>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <USB_SetCurrentMode+0x84>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2bc7      	cmp	r3, #199	@ 0xc7
 800622e:	d9f0      	bls.n	8006212 <USB_SetCurrentMode+0x60>
 8006230:	e001      	b.n	8006236 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e005      	b.n	8006242 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2bc8      	cmp	r3, #200	@ 0xc8
 800623a:	d101      	bne.n	8006240 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800624c:	b084      	sub	sp, #16
 800624e:	b580      	push	{r7, lr}
 8006250:	b086      	sub	sp, #24
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800625a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006266:	2300      	movs	r3, #0
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	e009      	b.n	8006280 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	3340      	adds	r3, #64	@ 0x40
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	2200      	movs	r2, #0
 8006278:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	3301      	adds	r3, #1
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	2b0e      	cmp	r3, #14
 8006284:	d9f2      	bls.n	800626c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006286:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800628a:	2b00      	cmp	r3, #0
 800628c:	d11c      	bne.n	80062c8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800629c:	f043 0302 	orr.w	r3, r3, #2
 80062a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	601a      	str	r2, [r3, #0]
 80062c6:	e005      	b.n	80062d4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062da:	461a      	mov	r2, r3
 80062dc:	2300      	movs	r3, #0
 80062de:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80062e0:	2103      	movs	r1, #3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f95a 	bl	800659c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80062e8:	2110      	movs	r1, #16
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f8f6 	bl	80064dc <USB_FlushTxFifo>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f920 	bl	8006540 <USB_FlushRxFifo>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006310:	461a      	mov	r2, r3
 8006312:	2300      	movs	r3, #0
 8006314:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800631c:	461a      	mov	r2, r3
 800631e:	2300      	movs	r3, #0
 8006320:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800632e:	2300      	movs	r3, #0
 8006330:	613b      	str	r3, [r7, #16]
 8006332:	e043      	b.n	80063bc <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800634a:	d118      	bne.n	800637e <USB_DevInit+0x132>
    {
      if (i == 0U)
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800635e:	461a      	mov	r2, r3
 8006360:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006364:	6013      	str	r3, [r2, #0]
 8006366:	e013      	b.n	8006390 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006374:	461a      	mov	r2, r3
 8006376:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	e008      	b.n	8006390 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638a:	461a      	mov	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800639c:	461a      	mov	r2, r3
 800639e:	2300      	movs	r3, #0
 80063a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063ae:	461a      	mov	r2, r3
 80063b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	3301      	adds	r3, #1
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063c0:	461a      	mov	r2, r3
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d3b5      	bcc.n	8006334 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063c8:	2300      	movs	r3, #0
 80063ca:	613b      	str	r3, [r7, #16]
 80063cc:	e043      	b.n	8006456 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063e4:	d118      	bne.n	8006418 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10a      	bne.n	8006402 <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f8:	461a      	mov	r2, r3
 80063fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	e013      	b.n	800642a <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640e:	461a      	mov	r2, r3
 8006410:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	e008      	b.n	800642a <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006424:	461a      	mov	r2, r3
 8006426:	2300      	movs	r3, #0
 8006428:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006436:	461a      	mov	r2, r3
 8006438:	2300      	movs	r3, #0
 800643a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	015a      	lsls	r2, r3, #5
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006448:	461a      	mov	r2, r3
 800644a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800644e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	3301      	adds	r3, #1
 8006454:	613b      	str	r3, [r7, #16]
 8006456:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800645a:	461a      	mov	r2, r3
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	4293      	cmp	r3, r2
 8006460:	d3b5      	bcc.n	80063ce <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006470:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006474:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006482:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f043 0210 	orr.w	r2, r3, #16
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	4b10      	ldr	r3, [pc, #64]	@ (80064d8 <USB_DevInit+0x28c>)
 8006496:	4313      	orrs	r3, r2
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800649c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d005      	beq.n	80064b0 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	f043 0208 	orr.w	r2, r3, #8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d107      	bne.n	80064c8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064c0:	f043 0304 	orr.w	r3, r3, #4
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3718      	adds	r7, #24
 80064ce:	46bd      	mov	sp, r7
 80064d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064d4:	b004      	add	sp, #16
 80064d6:	4770      	bx	lr
 80064d8:	803c3800 	.word	0x803c3800

080064dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3301      	adds	r3, #1
 80064ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064f6:	d901      	bls.n	80064fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e01b      	b.n	8006534 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	daf2      	bge.n	80064ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	019b      	lsls	r3, r3, #6
 800650c:	f043 0220 	orr.w	r2, r3, #32
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3301      	adds	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006520:	d901      	bls.n	8006526 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e006      	b.n	8006534 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b20      	cmp	r3, #32
 8006530:	d0f0      	beq.n	8006514 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3301      	adds	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006558:	d901      	bls.n	800655e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e018      	b.n	8006590 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	daf2      	bge.n	800654c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2210      	movs	r2, #16
 800656e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	3301      	adds	r3, #1
 8006574:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800657c:	d901      	bls.n	8006582 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e006      	b.n	8006590 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b10      	cmp	r3, #16
 800658c:	d0f0      	beq.n	8006570 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	460b      	mov	r3, r1
 80065a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	78fb      	ldrb	r3, [r7, #3]
 80065b6:	68f9      	ldr	r1, [r7, #12]
 80065b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065bc:	4313      	orrs	r3, r2
 80065be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b085      	sub	sp, #20
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065e8:	f023 0303 	bic.w	r3, r3, #3
 80065ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065fc:	f043 0302 	orr.w	r3, r3, #2
 8006600:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	695b      	ldr	r3, [r3, #20]
 800661c:	f003 0301 	and.w	r3, r3, #1
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3301      	adds	r3, #1
 800663c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006644:	d901      	bls.n	800664a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006646:	2303      	movs	r3, #3
 8006648:	e01b      	b.n	8006682 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	daf2      	bge.n	8006638 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	f043 0201 	orr.w	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	3301      	adds	r3, #1
 8006666:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800666e:	d901      	bls.n	8006674 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e006      	b.n	8006682 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b01      	cmp	r3, #1
 800667e:	d0f0      	beq.n	8006662 <USB_CoreReset+0x36>

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <__cvt>:
 800668e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006692:	ec57 6b10 	vmov	r6, r7, d0
 8006696:	2f00      	cmp	r7, #0
 8006698:	460c      	mov	r4, r1
 800669a:	4619      	mov	r1, r3
 800669c:	463b      	mov	r3, r7
 800669e:	bfbb      	ittet	lt
 80066a0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80066a4:	461f      	movlt	r7, r3
 80066a6:	2300      	movge	r3, #0
 80066a8:	232d      	movlt	r3, #45	@ 0x2d
 80066aa:	700b      	strb	r3, [r1, #0]
 80066ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066ae:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80066b2:	4691      	mov	r9, r2
 80066b4:	f023 0820 	bic.w	r8, r3, #32
 80066b8:	bfbc      	itt	lt
 80066ba:	4632      	movlt	r2, r6
 80066bc:	4616      	movlt	r6, r2
 80066be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066c2:	d005      	beq.n	80066d0 <__cvt+0x42>
 80066c4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80066c8:	d100      	bne.n	80066cc <__cvt+0x3e>
 80066ca:	3401      	adds	r4, #1
 80066cc:	2102      	movs	r1, #2
 80066ce:	e000      	b.n	80066d2 <__cvt+0x44>
 80066d0:	2103      	movs	r1, #3
 80066d2:	ab03      	add	r3, sp, #12
 80066d4:	9301      	str	r3, [sp, #4]
 80066d6:	ab02      	add	r3, sp, #8
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	ec47 6b10 	vmov	d0, r6, r7
 80066de:	4653      	mov	r3, sl
 80066e0:	4622      	mov	r2, r4
 80066e2:	f001 f875 	bl	80077d0 <_dtoa_r>
 80066e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80066ea:	4605      	mov	r5, r0
 80066ec:	d119      	bne.n	8006722 <__cvt+0x94>
 80066ee:	f019 0f01 	tst.w	r9, #1
 80066f2:	d00e      	beq.n	8006712 <__cvt+0x84>
 80066f4:	eb00 0904 	add.w	r9, r0, r4
 80066f8:	2200      	movs	r2, #0
 80066fa:	2300      	movs	r3, #0
 80066fc:	4630      	mov	r0, r6
 80066fe:	4639      	mov	r1, r7
 8006700:	f7fa f9e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006704:	b108      	cbz	r0, 800670a <__cvt+0x7c>
 8006706:	f8cd 900c 	str.w	r9, [sp, #12]
 800670a:	2230      	movs	r2, #48	@ 0x30
 800670c:	9b03      	ldr	r3, [sp, #12]
 800670e:	454b      	cmp	r3, r9
 8006710:	d31e      	bcc.n	8006750 <__cvt+0xc2>
 8006712:	9b03      	ldr	r3, [sp, #12]
 8006714:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006716:	1b5b      	subs	r3, r3, r5
 8006718:	4628      	mov	r0, r5
 800671a:	6013      	str	r3, [r2, #0]
 800671c:	b004      	add	sp, #16
 800671e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006722:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006726:	eb00 0904 	add.w	r9, r0, r4
 800672a:	d1e5      	bne.n	80066f8 <__cvt+0x6a>
 800672c:	7803      	ldrb	r3, [r0, #0]
 800672e:	2b30      	cmp	r3, #48	@ 0x30
 8006730:	d10a      	bne.n	8006748 <__cvt+0xba>
 8006732:	2200      	movs	r2, #0
 8006734:	2300      	movs	r3, #0
 8006736:	4630      	mov	r0, r6
 8006738:	4639      	mov	r1, r7
 800673a:	f7fa f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800673e:	b918      	cbnz	r0, 8006748 <__cvt+0xba>
 8006740:	f1c4 0401 	rsb	r4, r4, #1
 8006744:	f8ca 4000 	str.w	r4, [sl]
 8006748:	f8da 3000 	ldr.w	r3, [sl]
 800674c:	4499      	add	r9, r3
 800674e:	e7d3      	b.n	80066f8 <__cvt+0x6a>
 8006750:	1c59      	adds	r1, r3, #1
 8006752:	9103      	str	r1, [sp, #12]
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	e7d9      	b.n	800670c <__cvt+0x7e>

08006758 <__exponent>:
 8006758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800675a:	2900      	cmp	r1, #0
 800675c:	bfba      	itte	lt
 800675e:	4249      	neglt	r1, r1
 8006760:	232d      	movlt	r3, #45	@ 0x2d
 8006762:	232b      	movge	r3, #43	@ 0x2b
 8006764:	2909      	cmp	r1, #9
 8006766:	7002      	strb	r2, [r0, #0]
 8006768:	7043      	strb	r3, [r0, #1]
 800676a:	dd29      	ble.n	80067c0 <__exponent+0x68>
 800676c:	f10d 0307 	add.w	r3, sp, #7
 8006770:	461d      	mov	r5, r3
 8006772:	270a      	movs	r7, #10
 8006774:	461a      	mov	r2, r3
 8006776:	fbb1 f6f7 	udiv	r6, r1, r7
 800677a:	fb07 1416 	mls	r4, r7, r6, r1
 800677e:	3430      	adds	r4, #48	@ 0x30
 8006780:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006784:	460c      	mov	r4, r1
 8006786:	2c63      	cmp	r4, #99	@ 0x63
 8006788:	f103 33ff 	add.w	r3, r3, #4294967295
 800678c:	4631      	mov	r1, r6
 800678e:	dcf1      	bgt.n	8006774 <__exponent+0x1c>
 8006790:	3130      	adds	r1, #48	@ 0x30
 8006792:	1e94      	subs	r4, r2, #2
 8006794:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006798:	1c41      	adds	r1, r0, #1
 800679a:	4623      	mov	r3, r4
 800679c:	42ab      	cmp	r3, r5
 800679e:	d30a      	bcc.n	80067b6 <__exponent+0x5e>
 80067a0:	f10d 0309 	add.w	r3, sp, #9
 80067a4:	1a9b      	subs	r3, r3, r2
 80067a6:	42ac      	cmp	r4, r5
 80067a8:	bf88      	it	hi
 80067aa:	2300      	movhi	r3, #0
 80067ac:	3302      	adds	r3, #2
 80067ae:	4403      	add	r3, r0
 80067b0:	1a18      	subs	r0, r3, r0
 80067b2:	b003      	add	sp, #12
 80067b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80067be:	e7ed      	b.n	800679c <__exponent+0x44>
 80067c0:	2330      	movs	r3, #48	@ 0x30
 80067c2:	3130      	adds	r1, #48	@ 0x30
 80067c4:	7083      	strb	r3, [r0, #2]
 80067c6:	70c1      	strb	r1, [r0, #3]
 80067c8:	1d03      	adds	r3, r0, #4
 80067ca:	e7f1      	b.n	80067b0 <__exponent+0x58>

080067cc <_printf_float>:
 80067cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d0:	b08d      	sub	sp, #52	@ 0x34
 80067d2:	460c      	mov	r4, r1
 80067d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80067d8:	4616      	mov	r6, r2
 80067da:	461f      	mov	r7, r3
 80067dc:	4605      	mov	r5, r0
 80067de:	f000 feef 	bl	80075c0 <_localeconv_r>
 80067e2:	6803      	ldr	r3, [r0, #0]
 80067e4:	9304      	str	r3, [sp, #16]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7f9 fd42 	bl	8000270 <strlen>
 80067ec:	2300      	movs	r3, #0
 80067ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80067f0:	f8d8 3000 	ldr.w	r3, [r8]
 80067f4:	9005      	str	r0, [sp, #20]
 80067f6:	3307      	adds	r3, #7
 80067f8:	f023 0307 	bic.w	r3, r3, #7
 80067fc:	f103 0208 	add.w	r2, r3, #8
 8006800:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006804:	f8d4 b000 	ldr.w	fp, [r4]
 8006808:	f8c8 2000 	str.w	r2, [r8]
 800680c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006810:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006814:	9307      	str	r3, [sp, #28]
 8006816:	f8cd 8018 	str.w	r8, [sp, #24]
 800681a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800681e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006822:	4b9c      	ldr	r3, [pc, #624]	@ (8006a94 <_printf_float+0x2c8>)
 8006824:	f04f 32ff 	mov.w	r2, #4294967295
 8006828:	f7fa f980 	bl	8000b2c <__aeabi_dcmpun>
 800682c:	bb70      	cbnz	r0, 800688c <_printf_float+0xc0>
 800682e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006832:	4b98      	ldr	r3, [pc, #608]	@ (8006a94 <_printf_float+0x2c8>)
 8006834:	f04f 32ff 	mov.w	r2, #4294967295
 8006838:	f7fa f95a 	bl	8000af0 <__aeabi_dcmple>
 800683c:	bb30      	cbnz	r0, 800688c <_printf_float+0xc0>
 800683e:	2200      	movs	r2, #0
 8006840:	2300      	movs	r3, #0
 8006842:	4640      	mov	r0, r8
 8006844:	4649      	mov	r1, r9
 8006846:	f7fa f949 	bl	8000adc <__aeabi_dcmplt>
 800684a:	b110      	cbz	r0, 8006852 <_printf_float+0x86>
 800684c:	232d      	movs	r3, #45	@ 0x2d
 800684e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006852:	4a91      	ldr	r2, [pc, #580]	@ (8006a98 <_printf_float+0x2cc>)
 8006854:	4b91      	ldr	r3, [pc, #580]	@ (8006a9c <_printf_float+0x2d0>)
 8006856:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800685a:	bf94      	ite	ls
 800685c:	4690      	movls	r8, r2
 800685e:	4698      	movhi	r8, r3
 8006860:	2303      	movs	r3, #3
 8006862:	6123      	str	r3, [r4, #16]
 8006864:	f02b 0304 	bic.w	r3, fp, #4
 8006868:	6023      	str	r3, [r4, #0]
 800686a:	f04f 0900 	mov.w	r9, #0
 800686e:	9700      	str	r7, [sp, #0]
 8006870:	4633      	mov	r3, r6
 8006872:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006874:	4621      	mov	r1, r4
 8006876:	4628      	mov	r0, r5
 8006878:	f000 f9d2 	bl	8006c20 <_printf_common>
 800687c:	3001      	adds	r0, #1
 800687e:	f040 808d 	bne.w	800699c <_printf_float+0x1d0>
 8006882:	f04f 30ff 	mov.w	r0, #4294967295
 8006886:	b00d      	add	sp, #52	@ 0x34
 8006888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688c:	4642      	mov	r2, r8
 800688e:	464b      	mov	r3, r9
 8006890:	4640      	mov	r0, r8
 8006892:	4649      	mov	r1, r9
 8006894:	f7fa f94a 	bl	8000b2c <__aeabi_dcmpun>
 8006898:	b140      	cbz	r0, 80068ac <_printf_float+0xe0>
 800689a:	464b      	mov	r3, r9
 800689c:	2b00      	cmp	r3, #0
 800689e:	bfbc      	itt	lt
 80068a0:	232d      	movlt	r3, #45	@ 0x2d
 80068a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068a6:	4a7e      	ldr	r2, [pc, #504]	@ (8006aa0 <_printf_float+0x2d4>)
 80068a8:	4b7e      	ldr	r3, [pc, #504]	@ (8006aa4 <_printf_float+0x2d8>)
 80068aa:	e7d4      	b.n	8006856 <_printf_float+0x8a>
 80068ac:	6863      	ldr	r3, [r4, #4]
 80068ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80068b2:	9206      	str	r2, [sp, #24]
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	d13b      	bne.n	8006930 <_printf_float+0x164>
 80068b8:	2306      	movs	r3, #6
 80068ba:	6063      	str	r3, [r4, #4]
 80068bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80068c0:	2300      	movs	r3, #0
 80068c2:	6022      	str	r2, [r4, #0]
 80068c4:	9303      	str	r3, [sp, #12]
 80068c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80068c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80068cc:	ab09      	add	r3, sp, #36	@ 0x24
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	6861      	ldr	r1, [r4, #4]
 80068d2:	ec49 8b10 	vmov	d0, r8, r9
 80068d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80068da:	4628      	mov	r0, r5
 80068dc:	f7ff fed7 	bl	800668e <__cvt>
 80068e0:	9b06      	ldr	r3, [sp, #24]
 80068e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80068e4:	2b47      	cmp	r3, #71	@ 0x47
 80068e6:	4680      	mov	r8, r0
 80068e8:	d129      	bne.n	800693e <_printf_float+0x172>
 80068ea:	1cc8      	adds	r0, r1, #3
 80068ec:	db02      	blt.n	80068f4 <_printf_float+0x128>
 80068ee:	6863      	ldr	r3, [r4, #4]
 80068f0:	4299      	cmp	r1, r3
 80068f2:	dd41      	ble.n	8006978 <_printf_float+0x1ac>
 80068f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80068f8:	fa5f fa8a 	uxtb.w	sl, sl
 80068fc:	3901      	subs	r1, #1
 80068fe:	4652      	mov	r2, sl
 8006900:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006904:	9109      	str	r1, [sp, #36]	@ 0x24
 8006906:	f7ff ff27 	bl	8006758 <__exponent>
 800690a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800690c:	1813      	adds	r3, r2, r0
 800690e:	2a01      	cmp	r2, #1
 8006910:	4681      	mov	r9, r0
 8006912:	6123      	str	r3, [r4, #16]
 8006914:	dc02      	bgt.n	800691c <_printf_float+0x150>
 8006916:	6822      	ldr	r2, [r4, #0]
 8006918:	07d2      	lsls	r2, r2, #31
 800691a:	d501      	bpl.n	8006920 <_printf_float+0x154>
 800691c:	3301      	adds	r3, #1
 800691e:	6123      	str	r3, [r4, #16]
 8006920:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0a2      	beq.n	800686e <_printf_float+0xa2>
 8006928:	232d      	movs	r3, #45	@ 0x2d
 800692a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800692e:	e79e      	b.n	800686e <_printf_float+0xa2>
 8006930:	9a06      	ldr	r2, [sp, #24]
 8006932:	2a47      	cmp	r2, #71	@ 0x47
 8006934:	d1c2      	bne.n	80068bc <_printf_float+0xf0>
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1c0      	bne.n	80068bc <_printf_float+0xf0>
 800693a:	2301      	movs	r3, #1
 800693c:	e7bd      	b.n	80068ba <_printf_float+0xee>
 800693e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006942:	d9db      	bls.n	80068fc <_printf_float+0x130>
 8006944:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006948:	d118      	bne.n	800697c <_printf_float+0x1b0>
 800694a:	2900      	cmp	r1, #0
 800694c:	6863      	ldr	r3, [r4, #4]
 800694e:	dd0b      	ble.n	8006968 <_printf_float+0x19c>
 8006950:	6121      	str	r1, [r4, #16]
 8006952:	b913      	cbnz	r3, 800695a <_printf_float+0x18e>
 8006954:	6822      	ldr	r2, [r4, #0]
 8006956:	07d0      	lsls	r0, r2, #31
 8006958:	d502      	bpl.n	8006960 <_printf_float+0x194>
 800695a:	3301      	adds	r3, #1
 800695c:	440b      	add	r3, r1
 800695e:	6123      	str	r3, [r4, #16]
 8006960:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006962:	f04f 0900 	mov.w	r9, #0
 8006966:	e7db      	b.n	8006920 <_printf_float+0x154>
 8006968:	b913      	cbnz	r3, 8006970 <_printf_float+0x1a4>
 800696a:	6822      	ldr	r2, [r4, #0]
 800696c:	07d2      	lsls	r2, r2, #31
 800696e:	d501      	bpl.n	8006974 <_printf_float+0x1a8>
 8006970:	3302      	adds	r3, #2
 8006972:	e7f4      	b.n	800695e <_printf_float+0x192>
 8006974:	2301      	movs	r3, #1
 8006976:	e7f2      	b.n	800695e <_printf_float+0x192>
 8006978:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800697c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800697e:	4299      	cmp	r1, r3
 8006980:	db05      	blt.n	800698e <_printf_float+0x1c2>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	6121      	str	r1, [r4, #16]
 8006986:	07d8      	lsls	r0, r3, #31
 8006988:	d5ea      	bpl.n	8006960 <_printf_float+0x194>
 800698a:	1c4b      	adds	r3, r1, #1
 800698c:	e7e7      	b.n	800695e <_printf_float+0x192>
 800698e:	2900      	cmp	r1, #0
 8006990:	bfd4      	ite	le
 8006992:	f1c1 0202 	rsble	r2, r1, #2
 8006996:	2201      	movgt	r2, #1
 8006998:	4413      	add	r3, r2
 800699a:	e7e0      	b.n	800695e <_printf_float+0x192>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	055a      	lsls	r2, r3, #21
 80069a0:	d407      	bmi.n	80069b2 <_printf_float+0x1e6>
 80069a2:	6923      	ldr	r3, [r4, #16]
 80069a4:	4642      	mov	r2, r8
 80069a6:	4631      	mov	r1, r6
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b8      	blx	r7
 80069ac:	3001      	adds	r0, #1
 80069ae:	d12b      	bne.n	8006a08 <_printf_float+0x23c>
 80069b0:	e767      	b.n	8006882 <_printf_float+0xb6>
 80069b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069b6:	f240 80dd 	bls.w	8006b74 <_printf_float+0x3a8>
 80069ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069be:	2200      	movs	r2, #0
 80069c0:	2300      	movs	r3, #0
 80069c2:	f7fa f881 	bl	8000ac8 <__aeabi_dcmpeq>
 80069c6:	2800      	cmp	r0, #0
 80069c8:	d033      	beq.n	8006a32 <_printf_float+0x266>
 80069ca:	4a37      	ldr	r2, [pc, #220]	@ (8006aa8 <_printf_float+0x2dc>)
 80069cc:	2301      	movs	r3, #1
 80069ce:	4631      	mov	r1, r6
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b8      	blx	r7
 80069d4:	3001      	adds	r0, #1
 80069d6:	f43f af54 	beq.w	8006882 <_printf_float+0xb6>
 80069da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80069de:	4543      	cmp	r3, r8
 80069e0:	db02      	blt.n	80069e8 <_printf_float+0x21c>
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	07d8      	lsls	r0, r3, #31
 80069e6:	d50f      	bpl.n	8006a08 <_printf_float+0x23c>
 80069e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ec:	4631      	mov	r1, r6
 80069ee:	4628      	mov	r0, r5
 80069f0:	47b8      	blx	r7
 80069f2:	3001      	adds	r0, #1
 80069f4:	f43f af45 	beq.w	8006882 <_printf_float+0xb6>
 80069f8:	f04f 0900 	mov.w	r9, #0
 80069fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a00:	f104 0a1a 	add.w	sl, r4, #26
 8006a04:	45c8      	cmp	r8, r9
 8006a06:	dc09      	bgt.n	8006a1c <_printf_float+0x250>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	079b      	lsls	r3, r3, #30
 8006a0c:	f100 8103 	bmi.w	8006c16 <_printf_float+0x44a>
 8006a10:	68e0      	ldr	r0, [r4, #12]
 8006a12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a14:	4298      	cmp	r0, r3
 8006a16:	bfb8      	it	lt
 8006a18:	4618      	movlt	r0, r3
 8006a1a:	e734      	b.n	8006886 <_printf_float+0xba>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	4652      	mov	r2, sl
 8006a20:	4631      	mov	r1, r6
 8006a22:	4628      	mov	r0, r5
 8006a24:	47b8      	blx	r7
 8006a26:	3001      	adds	r0, #1
 8006a28:	f43f af2b 	beq.w	8006882 <_printf_float+0xb6>
 8006a2c:	f109 0901 	add.w	r9, r9, #1
 8006a30:	e7e8      	b.n	8006a04 <_printf_float+0x238>
 8006a32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	dc39      	bgt.n	8006aac <_printf_float+0x2e0>
 8006a38:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa8 <_printf_float+0x2dc>)
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4628      	mov	r0, r5
 8006a40:	47b8      	blx	r7
 8006a42:	3001      	adds	r0, #1
 8006a44:	f43f af1d 	beq.w	8006882 <_printf_float+0xb6>
 8006a48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a4c:	ea59 0303 	orrs.w	r3, r9, r3
 8006a50:	d102      	bne.n	8006a58 <_printf_float+0x28c>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	07d9      	lsls	r1, r3, #31
 8006a56:	d5d7      	bpl.n	8006a08 <_printf_float+0x23c>
 8006a58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4628      	mov	r0, r5
 8006a60:	47b8      	blx	r7
 8006a62:	3001      	adds	r0, #1
 8006a64:	f43f af0d 	beq.w	8006882 <_printf_float+0xb6>
 8006a68:	f04f 0a00 	mov.w	sl, #0
 8006a6c:	f104 0b1a 	add.w	fp, r4, #26
 8006a70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a72:	425b      	negs	r3, r3
 8006a74:	4553      	cmp	r3, sl
 8006a76:	dc01      	bgt.n	8006a7c <_printf_float+0x2b0>
 8006a78:	464b      	mov	r3, r9
 8006a7a:	e793      	b.n	80069a4 <_printf_float+0x1d8>
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	465a      	mov	r2, fp
 8006a80:	4631      	mov	r1, r6
 8006a82:	4628      	mov	r0, r5
 8006a84:	47b8      	blx	r7
 8006a86:	3001      	adds	r0, #1
 8006a88:	f43f aefb 	beq.w	8006882 <_printf_float+0xb6>
 8006a8c:	f10a 0a01 	add.w	sl, sl, #1
 8006a90:	e7ee      	b.n	8006a70 <_printf_float+0x2a4>
 8006a92:	bf00      	nop
 8006a94:	7fefffff 	.word	0x7fefffff
 8006a98:	0800ae20 	.word	0x0800ae20
 8006a9c:	0800ae24 	.word	0x0800ae24
 8006aa0:	0800ae28 	.word	0x0800ae28
 8006aa4:	0800ae2c 	.word	0x0800ae2c
 8006aa8:	0800ae30 	.word	0x0800ae30
 8006aac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006aae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ab2:	4553      	cmp	r3, sl
 8006ab4:	bfa8      	it	ge
 8006ab6:	4653      	movge	r3, sl
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	4699      	mov	r9, r3
 8006abc:	dc36      	bgt.n	8006b2c <_printf_float+0x360>
 8006abe:	f04f 0b00 	mov.w	fp, #0
 8006ac2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ac6:	f104 021a 	add.w	r2, r4, #26
 8006aca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006acc:	9306      	str	r3, [sp, #24]
 8006ace:	eba3 0309 	sub.w	r3, r3, r9
 8006ad2:	455b      	cmp	r3, fp
 8006ad4:	dc31      	bgt.n	8006b3a <_printf_float+0x36e>
 8006ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ad8:	459a      	cmp	sl, r3
 8006ada:	dc3a      	bgt.n	8006b52 <_printf_float+0x386>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	07da      	lsls	r2, r3, #31
 8006ae0:	d437      	bmi.n	8006b52 <_printf_float+0x386>
 8006ae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ae4:	ebaa 0903 	sub.w	r9, sl, r3
 8006ae8:	9b06      	ldr	r3, [sp, #24]
 8006aea:	ebaa 0303 	sub.w	r3, sl, r3
 8006aee:	4599      	cmp	r9, r3
 8006af0:	bfa8      	it	ge
 8006af2:	4699      	movge	r9, r3
 8006af4:	f1b9 0f00 	cmp.w	r9, #0
 8006af8:	dc33      	bgt.n	8006b62 <_printf_float+0x396>
 8006afa:	f04f 0800 	mov.w	r8, #0
 8006afe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b02:	f104 0b1a 	add.w	fp, r4, #26
 8006b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b08:	ebaa 0303 	sub.w	r3, sl, r3
 8006b0c:	eba3 0309 	sub.w	r3, r3, r9
 8006b10:	4543      	cmp	r3, r8
 8006b12:	f77f af79 	ble.w	8006a08 <_printf_float+0x23c>
 8006b16:	2301      	movs	r3, #1
 8006b18:	465a      	mov	r2, fp
 8006b1a:	4631      	mov	r1, r6
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	47b8      	blx	r7
 8006b20:	3001      	adds	r0, #1
 8006b22:	f43f aeae 	beq.w	8006882 <_printf_float+0xb6>
 8006b26:	f108 0801 	add.w	r8, r8, #1
 8006b2a:	e7ec      	b.n	8006b06 <_printf_float+0x33a>
 8006b2c:	4642      	mov	r2, r8
 8006b2e:	4631      	mov	r1, r6
 8006b30:	4628      	mov	r0, r5
 8006b32:	47b8      	blx	r7
 8006b34:	3001      	adds	r0, #1
 8006b36:	d1c2      	bne.n	8006abe <_printf_float+0x2f2>
 8006b38:	e6a3      	b.n	8006882 <_printf_float+0xb6>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	9206      	str	r2, [sp, #24]
 8006b42:	47b8      	blx	r7
 8006b44:	3001      	adds	r0, #1
 8006b46:	f43f ae9c 	beq.w	8006882 <_printf_float+0xb6>
 8006b4a:	9a06      	ldr	r2, [sp, #24]
 8006b4c:	f10b 0b01 	add.w	fp, fp, #1
 8006b50:	e7bb      	b.n	8006aca <_printf_float+0x2fe>
 8006b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b56:	4631      	mov	r1, r6
 8006b58:	4628      	mov	r0, r5
 8006b5a:	47b8      	blx	r7
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d1c0      	bne.n	8006ae2 <_printf_float+0x316>
 8006b60:	e68f      	b.n	8006882 <_printf_float+0xb6>
 8006b62:	9a06      	ldr	r2, [sp, #24]
 8006b64:	464b      	mov	r3, r9
 8006b66:	4442      	add	r2, r8
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b8      	blx	r7
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d1c3      	bne.n	8006afa <_printf_float+0x32e>
 8006b72:	e686      	b.n	8006882 <_printf_float+0xb6>
 8006b74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b78:	f1ba 0f01 	cmp.w	sl, #1
 8006b7c:	dc01      	bgt.n	8006b82 <_printf_float+0x3b6>
 8006b7e:	07db      	lsls	r3, r3, #31
 8006b80:	d536      	bpl.n	8006bf0 <_printf_float+0x424>
 8006b82:	2301      	movs	r3, #1
 8006b84:	4642      	mov	r2, r8
 8006b86:	4631      	mov	r1, r6
 8006b88:	4628      	mov	r0, r5
 8006b8a:	47b8      	blx	r7
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	f43f ae78 	beq.w	8006882 <_printf_float+0xb6>
 8006b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b96:	4631      	mov	r1, r6
 8006b98:	4628      	mov	r0, r5
 8006b9a:	47b8      	blx	r7
 8006b9c:	3001      	adds	r0, #1
 8006b9e:	f43f ae70 	beq.w	8006882 <_printf_float+0xb6>
 8006ba2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bae:	f7f9 ff8b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bb2:	b9c0      	cbnz	r0, 8006be6 <_printf_float+0x41a>
 8006bb4:	4653      	mov	r3, sl
 8006bb6:	f108 0201 	add.w	r2, r8, #1
 8006bba:	4631      	mov	r1, r6
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	47b8      	blx	r7
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	d10c      	bne.n	8006bde <_printf_float+0x412>
 8006bc4:	e65d      	b.n	8006882 <_printf_float+0xb6>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	465a      	mov	r2, fp
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4628      	mov	r0, r5
 8006bce:	47b8      	blx	r7
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	f43f ae56 	beq.w	8006882 <_printf_float+0xb6>
 8006bd6:	f108 0801 	add.w	r8, r8, #1
 8006bda:	45d0      	cmp	r8, sl
 8006bdc:	dbf3      	blt.n	8006bc6 <_printf_float+0x3fa>
 8006bde:	464b      	mov	r3, r9
 8006be0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006be4:	e6df      	b.n	80069a6 <_printf_float+0x1da>
 8006be6:	f04f 0800 	mov.w	r8, #0
 8006bea:	f104 0b1a 	add.w	fp, r4, #26
 8006bee:	e7f4      	b.n	8006bda <_printf_float+0x40e>
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	4642      	mov	r2, r8
 8006bf4:	e7e1      	b.n	8006bba <_printf_float+0x3ee>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	464a      	mov	r2, r9
 8006bfa:	4631      	mov	r1, r6
 8006bfc:	4628      	mov	r0, r5
 8006bfe:	47b8      	blx	r7
 8006c00:	3001      	adds	r0, #1
 8006c02:	f43f ae3e 	beq.w	8006882 <_printf_float+0xb6>
 8006c06:	f108 0801 	add.w	r8, r8, #1
 8006c0a:	68e3      	ldr	r3, [r4, #12]
 8006c0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c0e:	1a5b      	subs	r3, r3, r1
 8006c10:	4543      	cmp	r3, r8
 8006c12:	dcf0      	bgt.n	8006bf6 <_printf_float+0x42a>
 8006c14:	e6fc      	b.n	8006a10 <_printf_float+0x244>
 8006c16:	f04f 0800 	mov.w	r8, #0
 8006c1a:	f104 0919 	add.w	r9, r4, #25
 8006c1e:	e7f4      	b.n	8006c0a <_printf_float+0x43e>

08006c20 <_printf_common>:
 8006c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c24:	4616      	mov	r6, r2
 8006c26:	4698      	mov	r8, r3
 8006c28:	688a      	ldr	r2, [r1, #8]
 8006c2a:	690b      	ldr	r3, [r1, #16]
 8006c2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c30:	4293      	cmp	r3, r2
 8006c32:	bfb8      	it	lt
 8006c34:	4613      	movlt	r3, r2
 8006c36:	6033      	str	r3, [r6, #0]
 8006c38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c3c:	4607      	mov	r7, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	b10a      	cbz	r2, 8006c46 <_printf_common+0x26>
 8006c42:	3301      	adds	r3, #1
 8006c44:	6033      	str	r3, [r6, #0]
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	0699      	lsls	r1, r3, #26
 8006c4a:	bf42      	ittt	mi
 8006c4c:	6833      	ldrmi	r3, [r6, #0]
 8006c4e:	3302      	addmi	r3, #2
 8006c50:	6033      	strmi	r3, [r6, #0]
 8006c52:	6825      	ldr	r5, [r4, #0]
 8006c54:	f015 0506 	ands.w	r5, r5, #6
 8006c58:	d106      	bne.n	8006c68 <_printf_common+0x48>
 8006c5a:	f104 0a19 	add.w	sl, r4, #25
 8006c5e:	68e3      	ldr	r3, [r4, #12]
 8006c60:	6832      	ldr	r2, [r6, #0]
 8006c62:	1a9b      	subs	r3, r3, r2
 8006c64:	42ab      	cmp	r3, r5
 8006c66:	dc26      	bgt.n	8006cb6 <_printf_common+0x96>
 8006c68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c6c:	6822      	ldr	r2, [r4, #0]
 8006c6e:	3b00      	subs	r3, #0
 8006c70:	bf18      	it	ne
 8006c72:	2301      	movne	r3, #1
 8006c74:	0692      	lsls	r2, r2, #26
 8006c76:	d42b      	bmi.n	8006cd0 <_printf_common+0xb0>
 8006c78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	4638      	mov	r0, r7
 8006c80:	47c8      	blx	r9
 8006c82:	3001      	adds	r0, #1
 8006c84:	d01e      	beq.n	8006cc4 <_printf_common+0xa4>
 8006c86:	6823      	ldr	r3, [r4, #0]
 8006c88:	6922      	ldr	r2, [r4, #16]
 8006c8a:	f003 0306 	and.w	r3, r3, #6
 8006c8e:	2b04      	cmp	r3, #4
 8006c90:	bf02      	ittt	eq
 8006c92:	68e5      	ldreq	r5, [r4, #12]
 8006c94:	6833      	ldreq	r3, [r6, #0]
 8006c96:	1aed      	subeq	r5, r5, r3
 8006c98:	68a3      	ldr	r3, [r4, #8]
 8006c9a:	bf0c      	ite	eq
 8006c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ca0:	2500      	movne	r5, #0
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	bfc4      	itt	gt
 8006ca6:	1a9b      	subgt	r3, r3, r2
 8006ca8:	18ed      	addgt	r5, r5, r3
 8006caa:	2600      	movs	r6, #0
 8006cac:	341a      	adds	r4, #26
 8006cae:	42b5      	cmp	r5, r6
 8006cb0:	d11a      	bne.n	8006ce8 <_printf_common+0xc8>
 8006cb2:	2000      	movs	r0, #0
 8006cb4:	e008      	b.n	8006cc8 <_printf_common+0xa8>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4652      	mov	r2, sl
 8006cba:	4641      	mov	r1, r8
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	47c8      	blx	r9
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d103      	bne.n	8006ccc <_printf_common+0xac>
 8006cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ccc:	3501      	adds	r5, #1
 8006cce:	e7c6      	b.n	8006c5e <_printf_common+0x3e>
 8006cd0:	18e1      	adds	r1, r4, r3
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	2030      	movs	r0, #48	@ 0x30
 8006cd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cda:	4422      	add	r2, r4
 8006cdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ce0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ce4:	3302      	adds	r3, #2
 8006ce6:	e7c7      	b.n	8006c78 <_printf_common+0x58>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	4622      	mov	r2, r4
 8006cec:	4641      	mov	r1, r8
 8006cee:	4638      	mov	r0, r7
 8006cf0:	47c8      	blx	r9
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	d0e6      	beq.n	8006cc4 <_printf_common+0xa4>
 8006cf6:	3601      	adds	r6, #1
 8006cf8:	e7d9      	b.n	8006cae <_printf_common+0x8e>
	...

08006cfc <_printf_i>:
 8006cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d00:	7e0f      	ldrb	r7, [r1, #24]
 8006d02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d04:	2f78      	cmp	r7, #120	@ 0x78
 8006d06:	4691      	mov	r9, r2
 8006d08:	4680      	mov	r8, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	469a      	mov	sl, r3
 8006d0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d12:	d807      	bhi.n	8006d24 <_printf_i+0x28>
 8006d14:	2f62      	cmp	r7, #98	@ 0x62
 8006d16:	d80a      	bhi.n	8006d2e <_printf_i+0x32>
 8006d18:	2f00      	cmp	r7, #0
 8006d1a:	f000 80d2 	beq.w	8006ec2 <_printf_i+0x1c6>
 8006d1e:	2f58      	cmp	r7, #88	@ 0x58
 8006d20:	f000 80b9 	beq.w	8006e96 <_printf_i+0x19a>
 8006d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d2c:	e03a      	b.n	8006da4 <_printf_i+0xa8>
 8006d2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d32:	2b15      	cmp	r3, #21
 8006d34:	d8f6      	bhi.n	8006d24 <_printf_i+0x28>
 8006d36:	a101      	add	r1, pc, #4	@ (adr r1, 8006d3c <_printf_i+0x40>)
 8006d38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d3c:	08006d95 	.word	0x08006d95
 8006d40:	08006da9 	.word	0x08006da9
 8006d44:	08006d25 	.word	0x08006d25
 8006d48:	08006d25 	.word	0x08006d25
 8006d4c:	08006d25 	.word	0x08006d25
 8006d50:	08006d25 	.word	0x08006d25
 8006d54:	08006da9 	.word	0x08006da9
 8006d58:	08006d25 	.word	0x08006d25
 8006d5c:	08006d25 	.word	0x08006d25
 8006d60:	08006d25 	.word	0x08006d25
 8006d64:	08006d25 	.word	0x08006d25
 8006d68:	08006ea9 	.word	0x08006ea9
 8006d6c:	08006dd3 	.word	0x08006dd3
 8006d70:	08006e63 	.word	0x08006e63
 8006d74:	08006d25 	.word	0x08006d25
 8006d78:	08006d25 	.word	0x08006d25
 8006d7c:	08006ecb 	.word	0x08006ecb
 8006d80:	08006d25 	.word	0x08006d25
 8006d84:	08006dd3 	.word	0x08006dd3
 8006d88:	08006d25 	.word	0x08006d25
 8006d8c:	08006d25 	.word	0x08006d25
 8006d90:	08006e6b 	.word	0x08006e6b
 8006d94:	6833      	ldr	r3, [r6, #0]
 8006d96:	1d1a      	adds	r2, r3, #4
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	6032      	str	r2, [r6, #0]
 8006d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006da0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006da4:	2301      	movs	r3, #1
 8006da6:	e09d      	b.n	8006ee4 <_printf_i+0x1e8>
 8006da8:	6833      	ldr	r3, [r6, #0]
 8006daa:	6820      	ldr	r0, [r4, #0]
 8006dac:	1d19      	adds	r1, r3, #4
 8006dae:	6031      	str	r1, [r6, #0]
 8006db0:	0606      	lsls	r6, r0, #24
 8006db2:	d501      	bpl.n	8006db8 <_printf_i+0xbc>
 8006db4:	681d      	ldr	r5, [r3, #0]
 8006db6:	e003      	b.n	8006dc0 <_printf_i+0xc4>
 8006db8:	0645      	lsls	r5, r0, #25
 8006dba:	d5fb      	bpl.n	8006db4 <_printf_i+0xb8>
 8006dbc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006dc0:	2d00      	cmp	r5, #0
 8006dc2:	da03      	bge.n	8006dcc <_printf_i+0xd0>
 8006dc4:	232d      	movs	r3, #45	@ 0x2d
 8006dc6:	426d      	negs	r5, r5
 8006dc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dcc:	4859      	ldr	r0, [pc, #356]	@ (8006f34 <_printf_i+0x238>)
 8006dce:	230a      	movs	r3, #10
 8006dd0:	e011      	b.n	8006df6 <_printf_i+0xfa>
 8006dd2:	6821      	ldr	r1, [r4, #0]
 8006dd4:	6833      	ldr	r3, [r6, #0]
 8006dd6:	0608      	lsls	r0, r1, #24
 8006dd8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ddc:	d402      	bmi.n	8006de4 <_printf_i+0xe8>
 8006dde:	0649      	lsls	r1, r1, #25
 8006de0:	bf48      	it	mi
 8006de2:	b2ad      	uxthmi	r5, r5
 8006de4:	2f6f      	cmp	r7, #111	@ 0x6f
 8006de6:	4853      	ldr	r0, [pc, #332]	@ (8006f34 <_printf_i+0x238>)
 8006de8:	6033      	str	r3, [r6, #0]
 8006dea:	bf14      	ite	ne
 8006dec:	230a      	movne	r3, #10
 8006dee:	2308      	moveq	r3, #8
 8006df0:	2100      	movs	r1, #0
 8006df2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006df6:	6866      	ldr	r6, [r4, #4]
 8006df8:	60a6      	str	r6, [r4, #8]
 8006dfa:	2e00      	cmp	r6, #0
 8006dfc:	bfa2      	ittt	ge
 8006dfe:	6821      	ldrge	r1, [r4, #0]
 8006e00:	f021 0104 	bicge.w	r1, r1, #4
 8006e04:	6021      	strge	r1, [r4, #0]
 8006e06:	b90d      	cbnz	r5, 8006e0c <_printf_i+0x110>
 8006e08:	2e00      	cmp	r6, #0
 8006e0a:	d04b      	beq.n	8006ea4 <_printf_i+0x1a8>
 8006e0c:	4616      	mov	r6, r2
 8006e0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e12:	fb03 5711 	mls	r7, r3, r1, r5
 8006e16:	5dc7      	ldrb	r7, [r0, r7]
 8006e18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e1c:	462f      	mov	r7, r5
 8006e1e:	42bb      	cmp	r3, r7
 8006e20:	460d      	mov	r5, r1
 8006e22:	d9f4      	bls.n	8006e0e <_printf_i+0x112>
 8006e24:	2b08      	cmp	r3, #8
 8006e26:	d10b      	bne.n	8006e40 <_printf_i+0x144>
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	07df      	lsls	r7, r3, #31
 8006e2c:	d508      	bpl.n	8006e40 <_printf_i+0x144>
 8006e2e:	6923      	ldr	r3, [r4, #16]
 8006e30:	6861      	ldr	r1, [r4, #4]
 8006e32:	4299      	cmp	r1, r3
 8006e34:	bfde      	ittt	le
 8006e36:	2330      	movle	r3, #48	@ 0x30
 8006e38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e40:	1b92      	subs	r2, r2, r6
 8006e42:	6122      	str	r2, [r4, #16]
 8006e44:	f8cd a000 	str.w	sl, [sp]
 8006e48:	464b      	mov	r3, r9
 8006e4a:	aa03      	add	r2, sp, #12
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	4640      	mov	r0, r8
 8006e50:	f7ff fee6 	bl	8006c20 <_printf_common>
 8006e54:	3001      	adds	r0, #1
 8006e56:	d14a      	bne.n	8006eee <_printf_i+0x1f2>
 8006e58:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5c:	b004      	add	sp, #16
 8006e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	f043 0320 	orr.w	r3, r3, #32
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	4833      	ldr	r0, [pc, #204]	@ (8006f38 <_printf_i+0x23c>)
 8006e6c:	2778      	movs	r7, #120	@ 0x78
 8006e6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	6831      	ldr	r1, [r6, #0]
 8006e76:	061f      	lsls	r7, r3, #24
 8006e78:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e7c:	d402      	bmi.n	8006e84 <_printf_i+0x188>
 8006e7e:	065f      	lsls	r7, r3, #25
 8006e80:	bf48      	it	mi
 8006e82:	b2ad      	uxthmi	r5, r5
 8006e84:	6031      	str	r1, [r6, #0]
 8006e86:	07d9      	lsls	r1, r3, #31
 8006e88:	bf44      	itt	mi
 8006e8a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e8e:	6023      	strmi	r3, [r4, #0]
 8006e90:	b11d      	cbz	r5, 8006e9a <_printf_i+0x19e>
 8006e92:	2310      	movs	r3, #16
 8006e94:	e7ac      	b.n	8006df0 <_printf_i+0xf4>
 8006e96:	4827      	ldr	r0, [pc, #156]	@ (8006f34 <_printf_i+0x238>)
 8006e98:	e7e9      	b.n	8006e6e <_printf_i+0x172>
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	f023 0320 	bic.w	r3, r3, #32
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	e7f6      	b.n	8006e92 <_printf_i+0x196>
 8006ea4:	4616      	mov	r6, r2
 8006ea6:	e7bd      	b.n	8006e24 <_printf_i+0x128>
 8006ea8:	6833      	ldr	r3, [r6, #0]
 8006eaa:	6825      	ldr	r5, [r4, #0]
 8006eac:	6961      	ldr	r1, [r4, #20]
 8006eae:	1d18      	adds	r0, r3, #4
 8006eb0:	6030      	str	r0, [r6, #0]
 8006eb2:	062e      	lsls	r6, r5, #24
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	d501      	bpl.n	8006ebc <_printf_i+0x1c0>
 8006eb8:	6019      	str	r1, [r3, #0]
 8006eba:	e002      	b.n	8006ec2 <_printf_i+0x1c6>
 8006ebc:	0668      	lsls	r0, r5, #25
 8006ebe:	d5fb      	bpl.n	8006eb8 <_printf_i+0x1bc>
 8006ec0:	8019      	strh	r1, [r3, #0]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	6123      	str	r3, [r4, #16]
 8006ec6:	4616      	mov	r6, r2
 8006ec8:	e7bc      	b.n	8006e44 <_printf_i+0x148>
 8006eca:	6833      	ldr	r3, [r6, #0]
 8006ecc:	1d1a      	adds	r2, r3, #4
 8006ece:	6032      	str	r2, [r6, #0]
 8006ed0:	681e      	ldr	r6, [r3, #0]
 8006ed2:	6862      	ldr	r2, [r4, #4]
 8006ed4:	2100      	movs	r1, #0
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f7f9 f97a 	bl	80001d0 <memchr>
 8006edc:	b108      	cbz	r0, 8006ee2 <_printf_i+0x1e6>
 8006ede:	1b80      	subs	r0, r0, r6
 8006ee0:	6060      	str	r0, [r4, #4]
 8006ee2:	6863      	ldr	r3, [r4, #4]
 8006ee4:	6123      	str	r3, [r4, #16]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006eec:	e7aa      	b.n	8006e44 <_printf_i+0x148>
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	4632      	mov	r2, r6
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	47d0      	blx	sl
 8006ef8:	3001      	adds	r0, #1
 8006efa:	d0ad      	beq.n	8006e58 <_printf_i+0x15c>
 8006efc:	6823      	ldr	r3, [r4, #0]
 8006efe:	079b      	lsls	r3, r3, #30
 8006f00:	d413      	bmi.n	8006f2a <_printf_i+0x22e>
 8006f02:	68e0      	ldr	r0, [r4, #12]
 8006f04:	9b03      	ldr	r3, [sp, #12]
 8006f06:	4298      	cmp	r0, r3
 8006f08:	bfb8      	it	lt
 8006f0a:	4618      	movlt	r0, r3
 8006f0c:	e7a6      	b.n	8006e5c <_printf_i+0x160>
 8006f0e:	2301      	movs	r3, #1
 8006f10:	4632      	mov	r2, r6
 8006f12:	4649      	mov	r1, r9
 8006f14:	4640      	mov	r0, r8
 8006f16:	47d0      	blx	sl
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d09d      	beq.n	8006e58 <_printf_i+0x15c>
 8006f1c:	3501      	adds	r5, #1
 8006f1e:	68e3      	ldr	r3, [r4, #12]
 8006f20:	9903      	ldr	r1, [sp, #12]
 8006f22:	1a5b      	subs	r3, r3, r1
 8006f24:	42ab      	cmp	r3, r5
 8006f26:	dcf2      	bgt.n	8006f0e <_printf_i+0x212>
 8006f28:	e7eb      	b.n	8006f02 <_printf_i+0x206>
 8006f2a:	2500      	movs	r5, #0
 8006f2c:	f104 0619 	add.w	r6, r4, #25
 8006f30:	e7f5      	b.n	8006f1e <_printf_i+0x222>
 8006f32:	bf00      	nop
 8006f34:	0800ae32 	.word	0x0800ae32
 8006f38:	0800ae43 	.word	0x0800ae43

08006f3c <_scanf_float>:
 8006f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f40:	b087      	sub	sp, #28
 8006f42:	4617      	mov	r7, r2
 8006f44:	9303      	str	r3, [sp, #12]
 8006f46:	688b      	ldr	r3, [r1, #8]
 8006f48:	1e5a      	subs	r2, r3, #1
 8006f4a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006f4e:	bf81      	itttt	hi
 8006f50:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006f54:	eb03 0b05 	addhi.w	fp, r3, r5
 8006f58:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006f5c:	608b      	strhi	r3, [r1, #8]
 8006f5e:	680b      	ldr	r3, [r1, #0]
 8006f60:	460a      	mov	r2, r1
 8006f62:	f04f 0500 	mov.w	r5, #0
 8006f66:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006f6a:	f842 3b1c 	str.w	r3, [r2], #28
 8006f6e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006f72:	4680      	mov	r8, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	bf98      	it	ls
 8006f78:	f04f 0b00 	movls.w	fp, #0
 8006f7c:	9201      	str	r2, [sp, #4]
 8006f7e:	4616      	mov	r6, r2
 8006f80:	46aa      	mov	sl, r5
 8006f82:	46a9      	mov	r9, r5
 8006f84:	9502      	str	r5, [sp, #8]
 8006f86:	68a2      	ldr	r2, [r4, #8]
 8006f88:	b152      	cbz	r2, 8006fa0 <_scanf_float+0x64>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006f90:	d864      	bhi.n	800705c <_scanf_float+0x120>
 8006f92:	2b40      	cmp	r3, #64	@ 0x40
 8006f94:	d83c      	bhi.n	8007010 <_scanf_float+0xd4>
 8006f96:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006f9a:	b2c8      	uxtb	r0, r1
 8006f9c:	280e      	cmp	r0, #14
 8006f9e:	d93a      	bls.n	8007016 <_scanf_float+0xda>
 8006fa0:	f1b9 0f00 	cmp.w	r9, #0
 8006fa4:	d003      	beq.n	8006fae <_scanf_float+0x72>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fb2:	f1ba 0f01 	cmp.w	sl, #1
 8006fb6:	f200 8117 	bhi.w	80071e8 <_scanf_float+0x2ac>
 8006fba:	9b01      	ldr	r3, [sp, #4]
 8006fbc:	429e      	cmp	r6, r3
 8006fbe:	f200 8108 	bhi.w	80071d2 <_scanf_float+0x296>
 8006fc2:	2001      	movs	r0, #1
 8006fc4:	b007      	add	sp, #28
 8006fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fca:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006fce:	2a0d      	cmp	r2, #13
 8006fd0:	d8e6      	bhi.n	8006fa0 <_scanf_float+0x64>
 8006fd2:	a101      	add	r1, pc, #4	@ (adr r1, 8006fd8 <_scanf_float+0x9c>)
 8006fd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006fd8:	0800711f 	.word	0x0800711f
 8006fdc:	08006fa1 	.word	0x08006fa1
 8006fe0:	08006fa1 	.word	0x08006fa1
 8006fe4:	08006fa1 	.word	0x08006fa1
 8006fe8:	0800717f 	.word	0x0800717f
 8006fec:	08007157 	.word	0x08007157
 8006ff0:	08006fa1 	.word	0x08006fa1
 8006ff4:	08006fa1 	.word	0x08006fa1
 8006ff8:	0800712d 	.word	0x0800712d
 8006ffc:	08006fa1 	.word	0x08006fa1
 8007000:	08006fa1 	.word	0x08006fa1
 8007004:	08006fa1 	.word	0x08006fa1
 8007008:	08006fa1 	.word	0x08006fa1
 800700c:	080070e5 	.word	0x080070e5
 8007010:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007014:	e7db      	b.n	8006fce <_scanf_float+0x92>
 8007016:	290e      	cmp	r1, #14
 8007018:	d8c2      	bhi.n	8006fa0 <_scanf_float+0x64>
 800701a:	a001      	add	r0, pc, #4	@ (adr r0, 8007020 <_scanf_float+0xe4>)
 800701c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007020:	080070d5 	.word	0x080070d5
 8007024:	08006fa1 	.word	0x08006fa1
 8007028:	080070d5 	.word	0x080070d5
 800702c:	0800716b 	.word	0x0800716b
 8007030:	08006fa1 	.word	0x08006fa1
 8007034:	0800707d 	.word	0x0800707d
 8007038:	080070bb 	.word	0x080070bb
 800703c:	080070bb 	.word	0x080070bb
 8007040:	080070bb 	.word	0x080070bb
 8007044:	080070bb 	.word	0x080070bb
 8007048:	080070bb 	.word	0x080070bb
 800704c:	080070bb 	.word	0x080070bb
 8007050:	080070bb 	.word	0x080070bb
 8007054:	080070bb 	.word	0x080070bb
 8007058:	080070bb 	.word	0x080070bb
 800705c:	2b6e      	cmp	r3, #110	@ 0x6e
 800705e:	d809      	bhi.n	8007074 <_scanf_float+0x138>
 8007060:	2b60      	cmp	r3, #96	@ 0x60
 8007062:	d8b2      	bhi.n	8006fca <_scanf_float+0x8e>
 8007064:	2b54      	cmp	r3, #84	@ 0x54
 8007066:	d07b      	beq.n	8007160 <_scanf_float+0x224>
 8007068:	2b59      	cmp	r3, #89	@ 0x59
 800706a:	d199      	bne.n	8006fa0 <_scanf_float+0x64>
 800706c:	2d07      	cmp	r5, #7
 800706e:	d197      	bne.n	8006fa0 <_scanf_float+0x64>
 8007070:	2508      	movs	r5, #8
 8007072:	e02c      	b.n	80070ce <_scanf_float+0x192>
 8007074:	2b74      	cmp	r3, #116	@ 0x74
 8007076:	d073      	beq.n	8007160 <_scanf_float+0x224>
 8007078:	2b79      	cmp	r3, #121	@ 0x79
 800707a:	e7f6      	b.n	800706a <_scanf_float+0x12e>
 800707c:	6821      	ldr	r1, [r4, #0]
 800707e:	05c8      	lsls	r0, r1, #23
 8007080:	d51b      	bpl.n	80070ba <_scanf_float+0x17e>
 8007082:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007086:	6021      	str	r1, [r4, #0]
 8007088:	f109 0901 	add.w	r9, r9, #1
 800708c:	f1bb 0f00 	cmp.w	fp, #0
 8007090:	d003      	beq.n	800709a <_scanf_float+0x15e>
 8007092:	3201      	adds	r2, #1
 8007094:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007098:	60a2      	str	r2, [r4, #8]
 800709a:	68a3      	ldr	r3, [r4, #8]
 800709c:	3b01      	subs	r3, #1
 800709e:	60a3      	str	r3, [r4, #8]
 80070a0:	6923      	ldr	r3, [r4, #16]
 80070a2:	3301      	adds	r3, #1
 80070a4:	6123      	str	r3, [r4, #16]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	3b01      	subs	r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	607b      	str	r3, [r7, #4]
 80070ae:	f340 8087 	ble.w	80071c0 <_scanf_float+0x284>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	3301      	adds	r3, #1
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	e765      	b.n	8006f86 <_scanf_float+0x4a>
 80070ba:	eb1a 0105 	adds.w	r1, sl, r5
 80070be:	f47f af6f 	bne.w	8006fa0 <_scanf_float+0x64>
 80070c2:	6822      	ldr	r2, [r4, #0]
 80070c4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80070c8:	6022      	str	r2, [r4, #0]
 80070ca:	460d      	mov	r5, r1
 80070cc:	468a      	mov	sl, r1
 80070ce:	f806 3b01 	strb.w	r3, [r6], #1
 80070d2:	e7e2      	b.n	800709a <_scanf_float+0x15e>
 80070d4:	6822      	ldr	r2, [r4, #0]
 80070d6:	0610      	lsls	r0, r2, #24
 80070d8:	f57f af62 	bpl.w	8006fa0 <_scanf_float+0x64>
 80070dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070e0:	6022      	str	r2, [r4, #0]
 80070e2:	e7f4      	b.n	80070ce <_scanf_float+0x192>
 80070e4:	f1ba 0f00 	cmp.w	sl, #0
 80070e8:	d10e      	bne.n	8007108 <_scanf_float+0x1cc>
 80070ea:	f1b9 0f00 	cmp.w	r9, #0
 80070ee:	d10e      	bne.n	800710e <_scanf_float+0x1d2>
 80070f0:	6822      	ldr	r2, [r4, #0]
 80070f2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80070f6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80070fa:	d108      	bne.n	800710e <_scanf_float+0x1d2>
 80070fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007100:	6022      	str	r2, [r4, #0]
 8007102:	f04f 0a01 	mov.w	sl, #1
 8007106:	e7e2      	b.n	80070ce <_scanf_float+0x192>
 8007108:	f1ba 0f02 	cmp.w	sl, #2
 800710c:	d055      	beq.n	80071ba <_scanf_float+0x27e>
 800710e:	2d01      	cmp	r5, #1
 8007110:	d002      	beq.n	8007118 <_scanf_float+0x1dc>
 8007112:	2d04      	cmp	r5, #4
 8007114:	f47f af44 	bne.w	8006fa0 <_scanf_float+0x64>
 8007118:	3501      	adds	r5, #1
 800711a:	b2ed      	uxtb	r5, r5
 800711c:	e7d7      	b.n	80070ce <_scanf_float+0x192>
 800711e:	f1ba 0f01 	cmp.w	sl, #1
 8007122:	f47f af3d 	bne.w	8006fa0 <_scanf_float+0x64>
 8007126:	f04f 0a02 	mov.w	sl, #2
 800712a:	e7d0      	b.n	80070ce <_scanf_float+0x192>
 800712c:	b97d      	cbnz	r5, 800714e <_scanf_float+0x212>
 800712e:	f1b9 0f00 	cmp.w	r9, #0
 8007132:	f47f af38 	bne.w	8006fa6 <_scanf_float+0x6a>
 8007136:	6822      	ldr	r2, [r4, #0]
 8007138:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800713c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007140:	f040 8108 	bne.w	8007354 <_scanf_float+0x418>
 8007144:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007148:	6022      	str	r2, [r4, #0]
 800714a:	2501      	movs	r5, #1
 800714c:	e7bf      	b.n	80070ce <_scanf_float+0x192>
 800714e:	2d03      	cmp	r5, #3
 8007150:	d0e2      	beq.n	8007118 <_scanf_float+0x1dc>
 8007152:	2d05      	cmp	r5, #5
 8007154:	e7de      	b.n	8007114 <_scanf_float+0x1d8>
 8007156:	2d02      	cmp	r5, #2
 8007158:	f47f af22 	bne.w	8006fa0 <_scanf_float+0x64>
 800715c:	2503      	movs	r5, #3
 800715e:	e7b6      	b.n	80070ce <_scanf_float+0x192>
 8007160:	2d06      	cmp	r5, #6
 8007162:	f47f af1d 	bne.w	8006fa0 <_scanf_float+0x64>
 8007166:	2507      	movs	r5, #7
 8007168:	e7b1      	b.n	80070ce <_scanf_float+0x192>
 800716a:	6822      	ldr	r2, [r4, #0]
 800716c:	0591      	lsls	r1, r2, #22
 800716e:	f57f af17 	bpl.w	8006fa0 <_scanf_float+0x64>
 8007172:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007176:	6022      	str	r2, [r4, #0]
 8007178:	f8cd 9008 	str.w	r9, [sp, #8]
 800717c:	e7a7      	b.n	80070ce <_scanf_float+0x192>
 800717e:	6822      	ldr	r2, [r4, #0]
 8007180:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007184:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007188:	d006      	beq.n	8007198 <_scanf_float+0x25c>
 800718a:	0550      	lsls	r0, r2, #21
 800718c:	f57f af08 	bpl.w	8006fa0 <_scanf_float+0x64>
 8007190:	f1b9 0f00 	cmp.w	r9, #0
 8007194:	f000 80de 	beq.w	8007354 <_scanf_float+0x418>
 8007198:	0591      	lsls	r1, r2, #22
 800719a:	bf58      	it	pl
 800719c:	9902      	ldrpl	r1, [sp, #8]
 800719e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071a2:	bf58      	it	pl
 80071a4:	eba9 0101 	subpl.w	r1, r9, r1
 80071a8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80071ac:	bf58      	it	pl
 80071ae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80071b2:	6022      	str	r2, [r4, #0]
 80071b4:	f04f 0900 	mov.w	r9, #0
 80071b8:	e789      	b.n	80070ce <_scanf_float+0x192>
 80071ba:	f04f 0a03 	mov.w	sl, #3
 80071be:	e786      	b.n	80070ce <_scanf_float+0x192>
 80071c0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80071c4:	4639      	mov	r1, r7
 80071c6:	4640      	mov	r0, r8
 80071c8:	4798      	blx	r3
 80071ca:	2800      	cmp	r0, #0
 80071cc:	f43f aedb 	beq.w	8006f86 <_scanf_float+0x4a>
 80071d0:	e6e6      	b.n	8006fa0 <_scanf_float+0x64>
 80071d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071d6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071da:	463a      	mov	r2, r7
 80071dc:	4640      	mov	r0, r8
 80071de:	4798      	blx	r3
 80071e0:	6923      	ldr	r3, [r4, #16]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	6123      	str	r3, [r4, #16]
 80071e6:	e6e8      	b.n	8006fba <_scanf_float+0x7e>
 80071e8:	1e6b      	subs	r3, r5, #1
 80071ea:	2b06      	cmp	r3, #6
 80071ec:	d824      	bhi.n	8007238 <_scanf_float+0x2fc>
 80071ee:	2d02      	cmp	r5, #2
 80071f0:	d836      	bhi.n	8007260 <_scanf_float+0x324>
 80071f2:	9b01      	ldr	r3, [sp, #4]
 80071f4:	429e      	cmp	r6, r3
 80071f6:	f67f aee4 	bls.w	8006fc2 <_scanf_float+0x86>
 80071fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007202:	463a      	mov	r2, r7
 8007204:	4640      	mov	r0, r8
 8007206:	4798      	blx	r3
 8007208:	6923      	ldr	r3, [r4, #16]
 800720a:	3b01      	subs	r3, #1
 800720c:	6123      	str	r3, [r4, #16]
 800720e:	e7f0      	b.n	80071f2 <_scanf_float+0x2b6>
 8007210:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007214:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007218:	463a      	mov	r2, r7
 800721a:	4640      	mov	r0, r8
 800721c:	4798      	blx	r3
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	3b01      	subs	r3, #1
 8007222:	6123      	str	r3, [r4, #16]
 8007224:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007228:	fa5f fa8a 	uxtb.w	sl, sl
 800722c:	f1ba 0f02 	cmp.w	sl, #2
 8007230:	d1ee      	bne.n	8007210 <_scanf_float+0x2d4>
 8007232:	3d03      	subs	r5, #3
 8007234:	b2ed      	uxtb	r5, r5
 8007236:	1b76      	subs	r6, r6, r5
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	05da      	lsls	r2, r3, #23
 800723c:	d530      	bpl.n	80072a0 <_scanf_float+0x364>
 800723e:	055b      	lsls	r3, r3, #21
 8007240:	d511      	bpl.n	8007266 <_scanf_float+0x32a>
 8007242:	9b01      	ldr	r3, [sp, #4]
 8007244:	429e      	cmp	r6, r3
 8007246:	f67f aebc 	bls.w	8006fc2 <_scanf_float+0x86>
 800724a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800724e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007252:	463a      	mov	r2, r7
 8007254:	4640      	mov	r0, r8
 8007256:	4798      	blx	r3
 8007258:	6923      	ldr	r3, [r4, #16]
 800725a:	3b01      	subs	r3, #1
 800725c:	6123      	str	r3, [r4, #16]
 800725e:	e7f0      	b.n	8007242 <_scanf_float+0x306>
 8007260:	46aa      	mov	sl, r5
 8007262:	46b3      	mov	fp, r6
 8007264:	e7de      	b.n	8007224 <_scanf_float+0x2e8>
 8007266:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800726a:	6923      	ldr	r3, [r4, #16]
 800726c:	2965      	cmp	r1, #101	@ 0x65
 800726e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007272:	f106 35ff 	add.w	r5, r6, #4294967295
 8007276:	6123      	str	r3, [r4, #16]
 8007278:	d00c      	beq.n	8007294 <_scanf_float+0x358>
 800727a:	2945      	cmp	r1, #69	@ 0x45
 800727c:	d00a      	beq.n	8007294 <_scanf_float+0x358>
 800727e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007282:	463a      	mov	r2, r7
 8007284:	4640      	mov	r0, r8
 8007286:	4798      	blx	r3
 8007288:	6923      	ldr	r3, [r4, #16]
 800728a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800728e:	3b01      	subs	r3, #1
 8007290:	1eb5      	subs	r5, r6, #2
 8007292:	6123      	str	r3, [r4, #16]
 8007294:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007298:	463a      	mov	r2, r7
 800729a:	4640      	mov	r0, r8
 800729c:	4798      	blx	r3
 800729e:	462e      	mov	r6, r5
 80072a0:	6822      	ldr	r2, [r4, #0]
 80072a2:	f012 0210 	ands.w	r2, r2, #16
 80072a6:	d001      	beq.n	80072ac <_scanf_float+0x370>
 80072a8:	2000      	movs	r0, #0
 80072aa:	e68b      	b.n	8006fc4 <_scanf_float+0x88>
 80072ac:	7032      	strb	r2, [r6, #0]
 80072ae:	6823      	ldr	r3, [r4, #0]
 80072b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80072b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072b8:	d11c      	bne.n	80072f4 <_scanf_float+0x3b8>
 80072ba:	9b02      	ldr	r3, [sp, #8]
 80072bc:	454b      	cmp	r3, r9
 80072be:	eba3 0209 	sub.w	r2, r3, r9
 80072c2:	d123      	bne.n	800730c <_scanf_float+0x3d0>
 80072c4:	9901      	ldr	r1, [sp, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	4640      	mov	r0, r8
 80072ca:	f002 fbf9 	bl	8009ac0 <_strtod_r>
 80072ce:	9b03      	ldr	r3, [sp, #12]
 80072d0:	6821      	ldr	r1, [r4, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f011 0f02 	tst.w	r1, #2
 80072d8:	ec57 6b10 	vmov	r6, r7, d0
 80072dc:	f103 0204 	add.w	r2, r3, #4
 80072e0:	d01f      	beq.n	8007322 <_scanf_float+0x3e6>
 80072e2:	9903      	ldr	r1, [sp, #12]
 80072e4:	600a      	str	r2, [r1, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	e9c3 6700 	strd	r6, r7, [r3]
 80072ec:	68e3      	ldr	r3, [r4, #12]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60e3      	str	r3, [r4, #12]
 80072f2:	e7d9      	b.n	80072a8 <_scanf_float+0x36c>
 80072f4:	9b04      	ldr	r3, [sp, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0e4      	beq.n	80072c4 <_scanf_float+0x388>
 80072fa:	9905      	ldr	r1, [sp, #20]
 80072fc:	230a      	movs	r3, #10
 80072fe:	3101      	adds	r1, #1
 8007300:	4640      	mov	r0, r8
 8007302:	f002 fc5d 	bl	8009bc0 <_strtol_r>
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	9e05      	ldr	r6, [sp, #20]
 800730a:	1ac2      	subs	r2, r0, r3
 800730c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007310:	429e      	cmp	r6, r3
 8007312:	bf28      	it	cs
 8007314:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007318:	4910      	ldr	r1, [pc, #64]	@ (800735c <_scanf_float+0x420>)
 800731a:	4630      	mov	r0, r6
 800731c:	f000 f8e4 	bl	80074e8 <siprintf>
 8007320:	e7d0      	b.n	80072c4 <_scanf_float+0x388>
 8007322:	f011 0f04 	tst.w	r1, #4
 8007326:	9903      	ldr	r1, [sp, #12]
 8007328:	600a      	str	r2, [r1, #0]
 800732a:	d1dc      	bne.n	80072e6 <_scanf_float+0x3aa>
 800732c:	681d      	ldr	r5, [r3, #0]
 800732e:	4632      	mov	r2, r6
 8007330:	463b      	mov	r3, r7
 8007332:	4630      	mov	r0, r6
 8007334:	4639      	mov	r1, r7
 8007336:	f7f9 fbf9 	bl	8000b2c <__aeabi_dcmpun>
 800733a:	b128      	cbz	r0, 8007348 <_scanf_float+0x40c>
 800733c:	4808      	ldr	r0, [pc, #32]	@ (8007360 <_scanf_float+0x424>)
 800733e:	f000 f9b7 	bl	80076b0 <nanf>
 8007342:	ed85 0a00 	vstr	s0, [r5]
 8007346:	e7d1      	b.n	80072ec <_scanf_float+0x3b0>
 8007348:	4630      	mov	r0, r6
 800734a:	4639      	mov	r1, r7
 800734c:	f7f9 fc4c 	bl	8000be8 <__aeabi_d2f>
 8007350:	6028      	str	r0, [r5, #0]
 8007352:	e7cb      	b.n	80072ec <_scanf_float+0x3b0>
 8007354:	f04f 0900 	mov.w	r9, #0
 8007358:	e629      	b.n	8006fae <_scanf_float+0x72>
 800735a:	bf00      	nop
 800735c:	0800ae54 	.word	0x0800ae54
 8007360:	0800b1ed 	.word	0x0800b1ed

08007364 <std>:
 8007364:	2300      	movs	r3, #0
 8007366:	b510      	push	{r4, lr}
 8007368:	4604      	mov	r4, r0
 800736a:	e9c0 3300 	strd	r3, r3, [r0]
 800736e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007372:	6083      	str	r3, [r0, #8]
 8007374:	8181      	strh	r1, [r0, #12]
 8007376:	6643      	str	r3, [r0, #100]	@ 0x64
 8007378:	81c2      	strh	r2, [r0, #14]
 800737a:	6183      	str	r3, [r0, #24]
 800737c:	4619      	mov	r1, r3
 800737e:	2208      	movs	r2, #8
 8007380:	305c      	adds	r0, #92	@ 0x5c
 8007382:	f000 f914 	bl	80075ae <memset>
 8007386:	4b0d      	ldr	r3, [pc, #52]	@ (80073bc <std+0x58>)
 8007388:	6263      	str	r3, [r4, #36]	@ 0x24
 800738a:	4b0d      	ldr	r3, [pc, #52]	@ (80073c0 <std+0x5c>)
 800738c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800738e:	4b0d      	ldr	r3, [pc, #52]	@ (80073c4 <std+0x60>)
 8007390:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007392:	4b0d      	ldr	r3, [pc, #52]	@ (80073c8 <std+0x64>)
 8007394:	6323      	str	r3, [r4, #48]	@ 0x30
 8007396:	4b0d      	ldr	r3, [pc, #52]	@ (80073cc <std+0x68>)
 8007398:	6224      	str	r4, [r4, #32]
 800739a:	429c      	cmp	r4, r3
 800739c:	d006      	beq.n	80073ac <std+0x48>
 800739e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073a2:	4294      	cmp	r4, r2
 80073a4:	d002      	beq.n	80073ac <std+0x48>
 80073a6:	33d0      	adds	r3, #208	@ 0xd0
 80073a8:	429c      	cmp	r4, r3
 80073aa:	d105      	bne.n	80073b8 <std+0x54>
 80073ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b4:	f000 b978 	b.w	80076a8 <__retarget_lock_init_recursive>
 80073b8:	bd10      	pop	{r4, pc}
 80073ba:	bf00      	nop
 80073bc:	08007529 	.word	0x08007529
 80073c0:	0800754b 	.word	0x0800754b
 80073c4:	08007583 	.word	0x08007583
 80073c8:	080075a7 	.word	0x080075a7
 80073cc:	200009c4 	.word	0x200009c4

080073d0 <stdio_exit_handler>:
 80073d0:	4a02      	ldr	r2, [pc, #8]	@ (80073dc <stdio_exit_handler+0xc>)
 80073d2:	4903      	ldr	r1, [pc, #12]	@ (80073e0 <stdio_exit_handler+0x10>)
 80073d4:	4803      	ldr	r0, [pc, #12]	@ (80073e4 <stdio_exit_handler+0x14>)
 80073d6:	f000 b869 	b.w	80074ac <_fwalk_sglue>
 80073da:	bf00      	nop
 80073dc:	2000000c 	.word	0x2000000c
 80073e0:	08009f7d 	.word	0x08009f7d
 80073e4:	2000001c 	.word	0x2000001c

080073e8 <cleanup_stdio>:
 80073e8:	6841      	ldr	r1, [r0, #4]
 80073ea:	4b0c      	ldr	r3, [pc, #48]	@ (800741c <cleanup_stdio+0x34>)
 80073ec:	4299      	cmp	r1, r3
 80073ee:	b510      	push	{r4, lr}
 80073f0:	4604      	mov	r4, r0
 80073f2:	d001      	beq.n	80073f8 <cleanup_stdio+0x10>
 80073f4:	f002 fdc2 	bl	8009f7c <_fflush_r>
 80073f8:	68a1      	ldr	r1, [r4, #8]
 80073fa:	4b09      	ldr	r3, [pc, #36]	@ (8007420 <cleanup_stdio+0x38>)
 80073fc:	4299      	cmp	r1, r3
 80073fe:	d002      	beq.n	8007406 <cleanup_stdio+0x1e>
 8007400:	4620      	mov	r0, r4
 8007402:	f002 fdbb 	bl	8009f7c <_fflush_r>
 8007406:	68e1      	ldr	r1, [r4, #12]
 8007408:	4b06      	ldr	r3, [pc, #24]	@ (8007424 <cleanup_stdio+0x3c>)
 800740a:	4299      	cmp	r1, r3
 800740c:	d004      	beq.n	8007418 <cleanup_stdio+0x30>
 800740e:	4620      	mov	r0, r4
 8007410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007414:	f002 bdb2 	b.w	8009f7c <_fflush_r>
 8007418:	bd10      	pop	{r4, pc}
 800741a:	bf00      	nop
 800741c:	200009c4 	.word	0x200009c4
 8007420:	20000a2c 	.word	0x20000a2c
 8007424:	20000a94 	.word	0x20000a94

08007428 <global_stdio_init.part.0>:
 8007428:	b510      	push	{r4, lr}
 800742a:	4b0b      	ldr	r3, [pc, #44]	@ (8007458 <global_stdio_init.part.0+0x30>)
 800742c:	4c0b      	ldr	r4, [pc, #44]	@ (800745c <global_stdio_init.part.0+0x34>)
 800742e:	4a0c      	ldr	r2, [pc, #48]	@ (8007460 <global_stdio_init.part.0+0x38>)
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	4620      	mov	r0, r4
 8007434:	2200      	movs	r2, #0
 8007436:	2104      	movs	r1, #4
 8007438:	f7ff ff94 	bl	8007364 <std>
 800743c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007440:	2201      	movs	r2, #1
 8007442:	2109      	movs	r1, #9
 8007444:	f7ff ff8e 	bl	8007364 <std>
 8007448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800744c:	2202      	movs	r2, #2
 800744e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007452:	2112      	movs	r1, #18
 8007454:	f7ff bf86 	b.w	8007364 <std>
 8007458:	20000afc 	.word	0x20000afc
 800745c:	200009c4 	.word	0x200009c4
 8007460:	080073d1 	.word	0x080073d1

08007464 <__sfp_lock_acquire>:
 8007464:	4801      	ldr	r0, [pc, #4]	@ (800746c <__sfp_lock_acquire+0x8>)
 8007466:	f000 b920 	b.w	80076aa <__retarget_lock_acquire_recursive>
 800746a:	bf00      	nop
 800746c:	20000b05 	.word	0x20000b05

08007470 <__sfp_lock_release>:
 8007470:	4801      	ldr	r0, [pc, #4]	@ (8007478 <__sfp_lock_release+0x8>)
 8007472:	f000 b91b 	b.w	80076ac <__retarget_lock_release_recursive>
 8007476:	bf00      	nop
 8007478:	20000b05 	.word	0x20000b05

0800747c <__sinit>:
 800747c:	b510      	push	{r4, lr}
 800747e:	4604      	mov	r4, r0
 8007480:	f7ff fff0 	bl	8007464 <__sfp_lock_acquire>
 8007484:	6a23      	ldr	r3, [r4, #32]
 8007486:	b11b      	cbz	r3, 8007490 <__sinit+0x14>
 8007488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800748c:	f7ff bff0 	b.w	8007470 <__sfp_lock_release>
 8007490:	4b04      	ldr	r3, [pc, #16]	@ (80074a4 <__sinit+0x28>)
 8007492:	6223      	str	r3, [r4, #32]
 8007494:	4b04      	ldr	r3, [pc, #16]	@ (80074a8 <__sinit+0x2c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f5      	bne.n	8007488 <__sinit+0xc>
 800749c:	f7ff ffc4 	bl	8007428 <global_stdio_init.part.0>
 80074a0:	e7f2      	b.n	8007488 <__sinit+0xc>
 80074a2:	bf00      	nop
 80074a4:	080073e9 	.word	0x080073e9
 80074a8:	20000afc 	.word	0x20000afc

080074ac <_fwalk_sglue>:
 80074ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b0:	4607      	mov	r7, r0
 80074b2:	4688      	mov	r8, r1
 80074b4:	4614      	mov	r4, r2
 80074b6:	2600      	movs	r6, #0
 80074b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074bc:	f1b9 0901 	subs.w	r9, r9, #1
 80074c0:	d505      	bpl.n	80074ce <_fwalk_sglue+0x22>
 80074c2:	6824      	ldr	r4, [r4, #0]
 80074c4:	2c00      	cmp	r4, #0
 80074c6:	d1f7      	bne.n	80074b8 <_fwalk_sglue+0xc>
 80074c8:	4630      	mov	r0, r6
 80074ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ce:	89ab      	ldrh	r3, [r5, #12]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d907      	bls.n	80074e4 <_fwalk_sglue+0x38>
 80074d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074d8:	3301      	adds	r3, #1
 80074da:	d003      	beq.n	80074e4 <_fwalk_sglue+0x38>
 80074dc:	4629      	mov	r1, r5
 80074de:	4638      	mov	r0, r7
 80074e0:	47c0      	blx	r8
 80074e2:	4306      	orrs	r6, r0
 80074e4:	3568      	adds	r5, #104	@ 0x68
 80074e6:	e7e9      	b.n	80074bc <_fwalk_sglue+0x10>

080074e8 <siprintf>:
 80074e8:	b40e      	push	{r1, r2, r3}
 80074ea:	b500      	push	{lr}
 80074ec:	b09c      	sub	sp, #112	@ 0x70
 80074ee:	ab1d      	add	r3, sp, #116	@ 0x74
 80074f0:	9002      	str	r0, [sp, #8]
 80074f2:	9006      	str	r0, [sp, #24]
 80074f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80074f8:	4809      	ldr	r0, [pc, #36]	@ (8007520 <siprintf+0x38>)
 80074fa:	9107      	str	r1, [sp, #28]
 80074fc:	9104      	str	r1, [sp, #16]
 80074fe:	4909      	ldr	r1, [pc, #36]	@ (8007524 <siprintf+0x3c>)
 8007500:	f853 2b04 	ldr.w	r2, [r3], #4
 8007504:	9105      	str	r1, [sp, #20]
 8007506:	6800      	ldr	r0, [r0, #0]
 8007508:	9301      	str	r3, [sp, #4]
 800750a:	a902      	add	r1, sp, #8
 800750c:	f002 fbb6 	bl	8009c7c <_svfiprintf_r>
 8007510:	9b02      	ldr	r3, [sp, #8]
 8007512:	2200      	movs	r2, #0
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	b01c      	add	sp, #112	@ 0x70
 8007518:	f85d eb04 	ldr.w	lr, [sp], #4
 800751c:	b003      	add	sp, #12
 800751e:	4770      	bx	lr
 8007520:	20000018 	.word	0x20000018
 8007524:	ffff0208 	.word	0xffff0208

08007528 <__sread>:
 8007528:	b510      	push	{r4, lr}
 800752a:	460c      	mov	r4, r1
 800752c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007530:	f000 f86c 	bl	800760c <_read_r>
 8007534:	2800      	cmp	r0, #0
 8007536:	bfab      	itete	ge
 8007538:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800753a:	89a3      	ldrhlt	r3, [r4, #12]
 800753c:	181b      	addge	r3, r3, r0
 800753e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007542:	bfac      	ite	ge
 8007544:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007546:	81a3      	strhlt	r3, [r4, #12]
 8007548:	bd10      	pop	{r4, pc}

0800754a <__swrite>:
 800754a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800754e:	461f      	mov	r7, r3
 8007550:	898b      	ldrh	r3, [r1, #12]
 8007552:	05db      	lsls	r3, r3, #23
 8007554:	4605      	mov	r5, r0
 8007556:	460c      	mov	r4, r1
 8007558:	4616      	mov	r6, r2
 800755a:	d505      	bpl.n	8007568 <__swrite+0x1e>
 800755c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007560:	2302      	movs	r3, #2
 8007562:	2200      	movs	r2, #0
 8007564:	f000 f840 	bl	80075e8 <_lseek_r>
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800756e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007572:	81a3      	strh	r3, [r4, #12]
 8007574:	4632      	mov	r2, r6
 8007576:	463b      	mov	r3, r7
 8007578:	4628      	mov	r0, r5
 800757a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800757e:	f000 b857 	b.w	8007630 <_write_r>

08007582 <__sseek>:
 8007582:	b510      	push	{r4, lr}
 8007584:	460c      	mov	r4, r1
 8007586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800758a:	f000 f82d 	bl	80075e8 <_lseek_r>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	bf15      	itete	ne
 8007594:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007596:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800759a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800759e:	81a3      	strheq	r3, [r4, #12]
 80075a0:	bf18      	it	ne
 80075a2:	81a3      	strhne	r3, [r4, #12]
 80075a4:	bd10      	pop	{r4, pc}

080075a6 <__sclose>:
 80075a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075aa:	f000 b80d 	b.w	80075c8 <_close_r>

080075ae <memset>:
 80075ae:	4402      	add	r2, r0
 80075b0:	4603      	mov	r3, r0
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d100      	bne.n	80075b8 <memset+0xa>
 80075b6:	4770      	bx	lr
 80075b8:	f803 1b01 	strb.w	r1, [r3], #1
 80075bc:	e7f9      	b.n	80075b2 <memset+0x4>
	...

080075c0 <_localeconv_r>:
 80075c0:	4800      	ldr	r0, [pc, #0]	@ (80075c4 <_localeconv_r+0x4>)
 80075c2:	4770      	bx	lr
 80075c4:	20000158 	.word	0x20000158

080075c8 <_close_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4d06      	ldr	r5, [pc, #24]	@ (80075e4 <_close_r+0x1c>)
 80075cc:	2300      	movs	r3, #0
 80075ce:	4604      	mov	r4, r0
 80075d0:	4608      	mov	r0, r1
 80075d2:	602b      	str	r3, [r5, #0]
 80075d4:	f7fa fdf0 	bl	80021b8 <_close>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	d102      	bne.n	80075e2 <_close_r+0x1a>
 80075dc:	682b      	ldr	r3, [r5, #0]
 80075de:	b103      	cbz	r3, 80075e2 <_close_r+0x1a>
 80075e0:	6023      	str	r3, [r4, #0]
 80075e2:	bd38      	pop	{r3, r4, r5, pc}
 80075e4:	20000b00 	.word	0x20000b00

080075e8 <_lseek_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d07      	ldr	r5, [pc, #28]	@ (8007608 <_lseek_r+0x20>)
 80075ec:	4604      	mov	r4, r0
 80075ee:	4608      	mov	r0, r1
 80075f0:	4611      	mov	r1, r2
 80075f2:	2200      	movs	r2, #0
 80075f4:	602a      	str	r2, [r5, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f7fa fe05 	bl	8002206 <_lseek>
 80075fc:	1c43      	adds	r3, r0, #1
 80075fe:	d102      	bne.n	8007606 <_lseek_r+0x1e>
 8007600:	682b      	ldr	r3, [r5, #0]
 8007602:	b103      	cbz	r3, 8007606 <_lseek_r+0x1e>
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	bd38      	pop	{r3, r4, r5, pc}
 8007608:	20000b00 	.word	0x20000b00

0800760c <_read_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d07      	ldr	r5, [pc, #28]	@ (800762c <_read_r+0x20>)
 8007610:	4604      	mov	r4, r0
 8007612:	4608      	mov	r0, r1
 8007614:	4611      	mov	r1, r2
 8007616:	2200      	movs	r2, #0
 8007618:	602a      	str	r2, [r5, #0]
 800761a:	461a      	mov	r2, r3
 800761c:	f7fa fd93 	bl	8002146 <_read>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_read_r+0x1e>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	b103      	cbz	r3, 800762a <_read_r+0x1e>
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	20000b00 	.word	0x20000b00

08007630 <_write_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d07      	ldr	r5, [pc, #28]	@ (8007650 <_write_r+0x20>)
 8007634:	4604      	mov	r4, r0
 8007636:	4608      	mov	r0, r1
 8007638:	4611      	mov	r1, r2
 800763a:	2200      	movs	r2, #0
 800763c:	602a      	str	r2, [r5, #0]
 800763e:	461a      	mov	r2, r3
 8007640:	f7fa fd9e 	bl	8002180 <_write>
 8007644:	1c43      	adds	r3, r0, #1
 8007646:	d102      	bne.n	800764e <_write_r+0x1e>
 8007648:	682b      	ldr	r3, [r5, #0]
 800764a:	b103      	cbz	r3, 800764e <_write_r+0x1e>
 800764c:	6023      	str	r3, [r4, #0]
 800764e:	bd38      	pop	{r3, r4, r5, pc}
 8007650:	20000b00 	.word	0x20000b00

08007654 <__errno>:
 8007654:	4b01      	ldr	r3, [pc, #4]	@ (800765c <__errno+0x8>)
 8007656:	6818      	ldr	r0, [r3, #0]
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	20000018 	.word	0x20000018

08007660 <__libc_init_array>:
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	4d0d      	ldr	r5, [pc, #52]	@ (8007698 <__libc_init_array+0x38>)
 8007664:	4c0d      	ldr	r4, [pc, #52]	@ (800769c <__libc_init_array+0x3c>)
 8007666:	1b64      	subs	r4, r4, r5
 8007668:	10a4      	asrs	r4, r4, #2
 800766a:	2600      	movs	r6, #0
 800766c:	42a6      	cmp	r6, r4
 800766e:	d109      	bne.n	8007684 <__libc_init_array+0x24>
 8007670:	4d0b      	ldr	r5, [pc, #44]	@ (80076a0 <__libc_init_array+0x40>)
 8007672:	4c0c      	ldr	r4, [pc, #48]	@ (80076a4 <__libc_init_array+0x44>)
 8007674:	f003 fb72 	bl	800ad5c <_init>
 8007678:	1b64      	subs	r4, r4, r5
 800767a:	10a4      	asrs	r4, r4, #2
 800767c:	2600      	movs	r6, #0
 800767e:	42a6      	cmp	r6, r4
 8007680:	d105      	bne.n	800768e <__libc_init_array+0x2e>
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	f855 3b04 	ldr.w	r3, [r5], #4
 8007688:	4798      	blx	r3
 800768a:	3601      	adds	r6, #1
 800768c:	e7ee      	b.n	800766c <__libc_init_array+0xc>
 800768e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007692:	4798      	blx	r3
 8007694:	3601      	adds	r6, #1
 8007696:	e7f2      	b.n	800767e <__libc_init_array+0x1e>
 8007698:	0800b258 	.word	0x0800b258
 800769c:	0800b258 	.word	0x0800b258
 80076a0:	0800b258 	.word	0x0800b258
 80076a4:	0800b25c 	.word	0x0800b25c

080076a8 <__retarget_lock_init_recursive>:
 80076a8:	4770      	bx	lr

080076aa <__retarget_lock_acquire_recursive>:
 80076aa:	4770      	bx	lr

080076ac <__retarget_lock_release_recursive>:
 80076ac:	4770      	bx	lr
	...

080076b0 <nanf>:
 80076b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80076b8 <nanf+0x8>
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	7fc00000 	.word	0x7fc00000

080076bc <quorem>:
 80076bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c0:	6903      	ldr	r3, [r0, #16]
 80076c2:	690c      	ldr	r4, [r1, #16]
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	4607      	mov	r7, r0
 80076c8:	db7e      	blt.n	80077c8 <quorem+0x10c>
 80076ca:	3c01      	subs	r4, #1
 80076cc:	f101 0814 	add.w	r8, r1, #20
 80076d0:	00a3      	lsls	r3, r4, #2
 80076d2:	f100 0514 	add.w	r5, r0, #20
 80076d6:	9300      	str	r3, [sp, #0]
 80076d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076e6:	3301      	adds	r3, #1
 80076e8:	429a      	cmp	r2, r3
 80076ea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80076ee:	fbb2 f6f3 	udiv	r6, r2, r3
 80076f2:	d32e      	bcc.n	8007752 <quorem+0x96>
 80076f4:	f04f 0a00 	mov.w	sl, #0
 80076f8:	46c4      	mov	ip, r8
 80076fa:	46ae      	mov	lr, r5
 80076fc:	46d3      	mov	fp, sl
 80076fe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007702:	b298      	uxth	r0, r3
 8007704:	fb06 a000 	mla	r0, r6, r0, sl
 8007708:	0c02      	lsrs	r2, r0, #16
 800770a:	0c1b      	lsrs	r3, r3, #16
 800770c:	fb06 2303 	mla	r3, r6, r3, r2
 8007710:	f8de 2000 	ldr.w	r2, [lr]
 8007714:	b280      	uxth	r0, r0
 8007716:	b292      	uxth	r2, r2
 8007718:	1a12      	subs	r2, r2, r0
 800771a:	445a      	add	r2, fp
 800771c:	f8de 0000 	ldr.w	r0, [lr]
 8007720:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007724:	b29b      	uxth	r3, r3
 8007726:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800772a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800772e:	b292      	uxth	r2, r2
 8007730:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007734:	45e1      	cmp	r9, ip
 8007736:	f84e 2b04 	str.w	r2, [lr], #4
 800773a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800773e:	d2de      	bcs.n	80076fe <quorem+0x42>
 8007740:	9b00      	ldr	r3, [sp, #0]
 8007742:	58eb      	ldr	r3, [r5, r3]
 8007744:	b92b      	cbnz	r3, 8007752 <quorem+0x96>
 8007746:	9b01      	ldr	r3, [sp, #4]
 8007748:	3b04      	subs	r3, #4
 800774a:	429d      	cmp	r5, r3
 800774c:	461a      	mov	r2, r3
 800774e:	d32f      	bcc.n	80077b0 <quorem+0xf4>
 8007750:	613c      	str	r4, [r7, #16]
 8007752:	4638      	mov	r0, r7
 8007754:	f001 f9c4 	bl	8008ae0 <__mcmp>
 8007758:	2800      	cmp	r0, #0
 800775a:	db25      	blt.n	80077a8 <quorem+0xec>
 800775c:	4629      	mov	r1, r5
 800775e:	2000      	movs	r0, #0
 8007760:	f858 2b04 	ldr.w	r2, [r8], #4
 8007764:	f8d1 c000 	ldr.w	ip, [r1]
 8007768:	fa1f fe82 	uxth.w	lr, r2
 800776c:	fa1f f38c 	uxth.w	r3, ip
 8007770:	eba3 030e 	sub.w	r3, r3, lr
 8007774:	4403      	add	r3, r0
 8007776:	0c12      	lsrs	r2, r2, #16
 8007778:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800777c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007780:	b29b      	uxth	r3, r3
 8007782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007786:	45c1      	cmp	r9, r8
 8007788:	f841 3b04 	str.w	r3, [r1], #4
 800778c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007790:	d2e6      	bcs.n	8007760 <quorem+0xa4>
 8007792:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007796:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800779a:	b922      	cbnz	r2, 80077a6 <quorem+0xea>
 800779c:	3b04      	subs	r3, #4
 800779e:	429d      	cmp	r5, r3
 80077a0:	461a      	mov	r2, r3
 80077a2:	d30b      	bcc.n	80077bc <quorem+0x100>
 80077a4:	613c      	str	r4, [r7, #16]
 80077a6:	3601      	adds	r6, #1
 80077a8:	4630      	mov	r0, r6
 80077aa:	b003      	add	sp, #12
 80077ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b0:	6812      	ldr	r2, [r2, #0]
 80077b2:	3b04      	subs	r3, #4
 80077b4:	2a00      	cmp	r2, #0
 80077b6:	d1cb      	bne.n	8007750 <quorem+0x94>
 80077b8:	3c01      	subs	r4, #1
 80077ba:	e7c6      	b.n	800774a <quorem+0x8e>
 80077bc:	6812      	ldr	r2, [r2, #0]
 80077be:	3b04      	subs	r3, #4
 80077c0:	2a00      	cmp	r2, #0
 80077c2:	d1ef      	bne.n	80077a4 <quorem+0xe8>
 80077c4:	3c01      	subs	r4, #1
 80077c6:	e7ea      	b.n	800779e <quorem+0xe2>
 80077c8:	2000      	movs	r0, #0
 80077ca:	e7ee      	b.n	80077aa <quorem+0xee>
 80077cc:	0000      	movs	r0, r0
	...

080077d0 <_dtoa_r>:
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	69c7      	ldr	r7, [r0, #28]
 80077d6:	b099      	sub	sp, #100	@ 0x64
 80077d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80077dc:	ec55 4b10 	vmov	r4, r5, d0
 80077e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80077e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80077e4:	4683      	mov	fp, r0
 80077e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80077e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077ea:	b97f      	cbnz	r7, 800780c <_dtoa_r+0x3c>
 80077ec:	2010      	movs	r0, #16
 80077ee:	f000 fdfd 	bl	80083ec <malloc>
 80077f2:	4602      	mov	r2, r0
 80077f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80077f8:	b920      	cbnz	r0, 8007804 <_dtoa_r+0x34>
 80077fa:	4ba7      	ldr	r3, [pc, #668]	@ (8007a98 <_dtoa_r+0x2c8>)
 80077fc:	21ef      	movs	r1, #239	@ 0xef
 80077fe:	48a7      	ldr	r0, [pc, #668]	@ (8007a9c <_dtoa_r+0x2cc>)
 8007800:	f002 fc36 	bl	800a070 <__assert_func>
 8007804:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007808:	6007      	str	r7, [r0, #0]
 800780a:	60c7      	str	r7, [r0, #12]
 800780c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007810:	6819      	ldr	r1, [r3, #0]
 8007812:	b159      	cbz	r1, 800782c <_dtoa_r+0x5c>
 8007814:	685a      	ldr	r2, [r3, #4]
 8007816:	604a      	str	r2, [r1, #4]
 8007818:	2301      	movs	r3, #1
 800781a:	4093      	lsls	r3, r2
 800781c:	608b      	str	r3, [r1, #8]
 800781e:	4658      	mov	r0, fp
 8007820:	f000 feda 	bl	80085d8 <_Bfree>
 8007824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]
 800782c:	1e2b      	subs	r3, r5, #0
 800782e:	bfb9      	ittee	lt
 8007830:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007834:	9303      	strlt	r3, [sp, #12]
 8007836:	2300      	movge	r3, #0
 8007838:	6033      	strge	r3, [r6, #0]
 800783a:	9f03      	ldr	r7, [sp, #12]
 800783c:	4b98      	ldr	r3, [pc, #608]	@ (8007aa0 <_dtoa_r+0x2d0>)
 800783e:	bfbc      	itt	lt
 8007840:	2201      	movlt	r2, #1
 8007842:	6032      	strlt	r2, [r6, #0]
 8007844:	43bb      	bics	r3, r7
 8007846:	d112      	bne.n	800786e <_dtoa_r+0x9e>
 8007848:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800784a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800784e:	6013      	str	r3, [r2, #0]
 8007850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007854:	4323      	orrs	r3, r4
 8007856:	f000 854d 	beq.w	80082f4 <_dtoa_r+0xb24>
 800785a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800785c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007ab4 <_dtoa_r+0x2e4>
 8007860:	2b00      	cmp	r3, #0
 8007862:	f000 854f 	beq.w	8008304 <_dtoa_r+0xb34>
 8007866:	f10a 0303 	add.w	r3, sl, #3
 800786a:	f000 bd49 	b.w	8008300 <_dtoa_r+0xb30>
 800786e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007872:	2200      	movs	r2, #0
 8007874:	ec51 0b17 	vmov	r0, r1, d7
 8007878:	2300      	movs	r3, #0
 800787a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800787e:	f7f9 f923 	bl	8000ac8 <__aeabi_dcmpeq>
 8007882:	4680      	mov	r8, r0
 8007884:	b158      	cbz	r0, 800789e <_dtoa_r+0xce>
 8007886:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007888:	2301      	movs	r3, #1
 800788a:	6013      	str	r3, [r2, #0]
 800788c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800788e:	b113      	cbz	r3, 8007896 <_dtoa_r+0xc6>
 8007890:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007892:	4b84      	ldr	r3, [pc, #528]	@ (8007aa4 <_dtoa_r+0x2d4>)
 8007894:	6013      	str	r3, [r2, #0]
 8007896:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007ab8 <_dtoa_r+0x2e8>
 800789a:	f000 bd33 	b.w	8008304 <_dtoa_r+0xb34>
 800789e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80078a2:	aa16      	add	r2, sp, #88	@ 0x58
 80078a4:	a917      	add	r1, sp, #92	@ 0x5c
 80078a6:	4658      	mov	r0, fp
 80078a8:	f001 fa3a 	bl	8008d20 <__d2b>
 80078ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80078b0:	4681      	mov	r9, r0
 80078b2:	2e00      	cmp	r6, #0
 80078b4:	d077      	beq.n	80079a6 <_dtoa_r+0x1d6>
 80078b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80078bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80078c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80078d0:	4619      	mov	r1, r3
 80078d2:	2200      	movs	r2, #0
 80078d4:	4b74      	ldr	r3, [pc, #464]	@ (8007aa8 <_dtoa_r+0x2d8>)
 80078d6:	f7f8 fcd7 	bl	8000288 <__aeabi_dsub>
 80078da:	a369      	add	r3, pc, #420	@ (adr r3, 8007a80 <_dtoa_r+0x2b0>)
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	f7f8 fe8a 	bl	80005f8 <__aeabi_dmul>
 80078e4:	a368      	add	r3, pc, #416	@ (adr r3, 8007a88 <_dtoa_r+0x2b8>)
 80078e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ea:	f7f8 fccf 	bl	800028c <__adddf3>
 80078ee:	4604      	mov	r4, r0
 80078f0:	4630      	mov	r0, r6
 80078f2:	460d      	mov	r5, r1
 80078f4:	f7f8 fe16 	bl	8000524 <__aeabi_i2d>
 80078f8:	a365      	add	r3, pc, #404	@ (adr r3, 8007a90 <_dtoa_r+0x2c0>)
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	f7f8 fe7b 	bl	80005f8 <__aeabi_dmul>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	4620      	mov	r0, r4
 8007908:	4629      	mov	r1, r5
 800790a:	f7f8 fcbf 	bl	800028c <__adddf3>
 800790e:	4604      	mov	r4, r0
 8007910:	460d      	mov	r5, r1
 8007912:	f7f9 f921 	bl	8000b58 <__aeabi_d2iz>
 8007916:	2200      	movs	r2, #0
 8007918:	4607      	mov	r7, r0
 800791a:	2300      	movs	r3, #0
 800791c:	4620      	mov	r0, r4
 800791e:	4629      	mov	r1, r5
 8007920:	f7f9 f8dc 	bl	8000adc <__aeabi_dcmplt>
 8007924:	b140      	cbz	r0, 8007938 <_dtoa_r+0x168>
 8007926:	4638      	mov	r0, r7
 8007928:	f7f8 fdfc 	bl	8000524 <__aeabi_i2d>
 800792c:	4622      	mov	r2, r4
 800792e:	462b      	mov	r3, r5
 8007930:	f7f9 f8ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8007934:	b900      	cbnz	r0, 8007938 <_dtoa_r+0x168>
 8007936:	3f01      	subs	r7, #1
 8007938:	2f16      	cmp	r7, #22
 800793a:	d851      	bhi.n	80079e0 <_dtoa_r+0x210>
 800793c:	4b5b      	ldr	r3, [pc, #364]	@ (8007aac <_dtoa_r+0x2dc>)
 800793e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007946:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800794a:	f7f9 f8c7 	bl	8000adc <__aeabi_dcmplt>
 800794e:	2800      	cmp	r0, #0
 8007950:	d048      	beq.n	80079e4 <_dtoa_r+0x214>
 8007952:	3f01      	subs	r7, #1
 8007954:	2300      	movs	r3, #0
 8007956:	9312      	str	r3, [sp, #72]	@ 0x48
 8007958:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800795a:	1b9b      	subs	r3, r3, r6
 800795c:	1e5a      	subs	r2, r3, #1
 800795e:	bf44      	itt	mi
 8007960:	f1c3 0801 	rsbmi	r8, r3, #1
 8007964:	2300      	movmi	r3, #0
 8007966:	9208      	str	r2, [sp, #32]
 8007968:	bf54      	ite	pl
 800796a:	f04f 0800 	movpl.w	r8, #0
 800796e:	9308      	strmi	r3, [sp, #32]
 8007970:	2f00      	cmp	r7, #0
 8007972:	db39      	blt.n	80079e8 <_dtoa_r+0x218>
 8007974:	9b08      	ldr	r3, [sp, #32]
 8007976:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007978:	443b      	add	r3, r7
 800797a:	9308      	str	r3, [sp, #32]
 800797c:	2300      	movs	r3, #0
 800797e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007982:	2b09      	cmp	r3, #9
 8007984:	d864      	bhi.n	8007a50 <_dtoa_r+0x280>
 8007986:	2b05      	cmp	r3, #5
 8007988:	bfc4      	itt	gt
 800798a:	3b04      	subgt	r3, #4
 800798c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800798e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007990:	f1a3 0302 	sub.w	r3, r3, #2
 8007994:	bfcc      	ite	gt
 8007996:	2400      	movgt	r4, #0
 8007998:	2401      	movle	r4, #1
 800799a:	2b03      	cmp	r3, #3
 800799c:	d863      	bhi.n	8007a66 <_dtoa_r+0x296>
 800799e:	e8df f003 	tbb	[pc, r3]
 80079a2:	372a      	.short	0x372a
 80079a4:	5535      	.short	0x5535
 80079a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80079aa:	441e      	add	r6, r3
 80079ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80079b0:	2b20      	cmp	r3, #32
 80079b2:	bfc1      	itttt	gt
 80079b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80079b8:	409f      	lslgt	r7, r3
 80079ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80079be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80079c2:	bfd6      	itet	le
 80079c4:	f1c3 0320 	rsble	r3, r3, #32
 80079c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80079cc:	fa04 f003 	lslle.w	r0, r4, r3
 80079d0:	f7f8 fd98 	bl	8000504 <__aeabi_ui2d>
 80079d4:	2201      	movs	r2, #1
 80079d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80079da:	3e01      	subs	r6, #1
 80079dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80079de:	e777      	b.n	80078d0 <_dtoa_r+0x100>
 80079e0:	2301      	movs	r3, #1
 80079e2:	e7b8      	b.n	8007956 <_dtoa_r+0x186>
 80079e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80079e6:	e7b7      	b.n	8007958 <_dtoa_r+0x188>
 80079e8:	427b      	negs	r3, r7
 80079ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80079ec:	2300      	movs	r3, #0
 80079ee:	eba8 0807 	sub.w	r8, r8, r7
 80079f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079f4:	e7c4      	b.n	8007980 <_dtoa_r+0x1b0>
 80079f6:	2300      	movs	r3, #0
 80079f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dc35      	bgt.n	8007a6c <_dtoa_r+0x29c>
 8007a00:	2301      	movs	r3, #1
 8007a02:	9300      	str	r3, [sp, #0]
 8007a04:	9307      	str	r3, [sp, #28]
 8007a06:	461a      	mov	r2, r3
 8007a08:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a0a:	e00b      	b.n	8007a24 <_dtoa_r+0x254>
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e7f3      	b.n	80079f8 <_dtoa_r+0x228>
 8007a10:	2300      	movs	r3, #0
 8007a12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a16:	18fb      	adds	r3, r7, r3
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	9307      	str	r3, [sp, #28]
 8007a20:	bfb8      	it	lt
 8007a22:	2301      	movlt	r3, #1
 8007a24:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007a28:	2100      	movs	r1, #0
 8007a2a:	2204      	movs	r2, #4
 8007a2c:	f102 0514 	add.w	r5, r2, #20
 8007a30:	429d      	cmp	r5, r3
 8007a32:	d91f      	bls.n	8007a74 <_dtoa_r+0x2a4>
 8007a34:	6041      	str	r1, [r0, #4]
 8007a36:	4658      	mov	r0, fp
 8007a38:	f000 fd8e 	bl	8008558 <_Balloc>
 8007a3c:	4682      	mov	sl, r0
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d13c      	bne.n	8007abc <_dtoa_r+0x2ec>
 8007a42:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab0 <_dtoa_r+0x2e0>)
 8007a44:	4602      	mov	r2, r0
 8007a46:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a4a:	e6d8      	b.n	80077fe <_dtoa_r+0x2e>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e7e0      	b.n	8007a12 <_dtoa_r+0x242>
 8007a50:	2401      	movs	r4, #1
 8007a52:	2300      	movs	r3, #0
 8007a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a56:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a58:	f04f 33ff 	mov.w	r3, #4294967295
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	9307      	str	r3, [sp, #28]
 8007a60:	2200      	movs	r2, #0
 8007a62:	2312      	movs	r3, #18
 8007a64:	e7d0      	b.n	8007a08 <_dtoa_r+0x238>
 8007a66:	2301      	movs	r3, #1
 8007a68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a6a:	e7f5      	b.n	8007a58 <_dtoa_r+0x288>
 8007a6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	9307      	str	r3, [sp, #28]
 8007a72:	e7d7      	b.n	8007a24 <_dtoa_r+0x254>
 8007a74:	3101      	adds	r1, #1
 8007a76:	0052      	lsls	r2, r2, #1
 8007a78:	e7d8      	b.n	8007a2c <_dtoa_r+0x25c>
 8007a7a:	bf00      	nop
 8007a7c:	f3af 8000 	nop.w
 8007a80:	636f4361 	.word	0x636f4361
 8007a84:	3fd287a7 	.word	0x3fd287a7
 8007a88:	8b60c8b3 	.word	0x8b60c8b3
 8007a8c:	3fc68a28 	.word	0x3fc68a28
 8007a90:	509f79fb 	.word	0x509f79fb
 8007a94:	3fd34413 	.word	0x3fd34413
 8007a98:	0800ae66 	.word	0x0800ae66
 8007a9c:	0800ae7d 	.word	0x0800ae7d
 8007aa0:	7ff00000 	.word	0x7ff00000
 8007aa4:	0800ae31 	.word	0x0800ae31
 8007aa8:	3ff80000 	.word	0x3ff80000
 8007aac:	0800af78 	.word	0x0800af78
 8007ab0:	0800aed5 	.word	0x0800aed5
 8007ab4:	0800ae62 	.word	0x0800ae62
 8007ab8:	0800ae30 	.word	0x0800ae30
 8007abc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ac0:	6018      	str	r0, [r3, #0]
 8007ac2:	9b07      	ldr	r3, [sp, #28]
 8007ac4:	2b0e      	cmp	r3, #14
 8007ac6:	f200 80a4 	bhi.w	8007c12 <_dtoa_r+0x442>
 8007aca:	2c00      	cmp	r4, #0
 8007acc:	f000 80a1 	beq.w	8007c12 <_dtoa_r+0x442>
 8007ad0:	2f00      	cmp	r7, #0
 8007ad2:	dd33      	ble.n	8007b3c <_dtoa_r+0x36c>
 8007ad4:	4bad      	ldr	r3, [pc, #692]	@ (8007d8c <_dtoa_r+0x5bc>)
 8007ad6:	f007 020f 	and.w	r2, r7, #15
 8007ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ade:	ed93 7b00 	vldr	d7, [r3]
 8007ae2:	05f8      	lsls	r0, r7, #23
 8007ae4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007ae8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007aec:	d516      	bpl.n	8007b1c <_dtoa_r+0x34c>
 8007aee:	4ba8      	ldr	r3, [pc, #672]	@ (8007d90 <_dtoa_r+0x5c0>)
 8007af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007af4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007af8:	f7f8 fea8 	bl	800084c <__aeabi_ddiv>
 8007afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b00:	f004 040f 	and.w	r4, r4, #15
 8007b04:	2603      	movs	r6, #3
 8007b06:	4da2      	ldr	r5, [pc, #648]	@ (8007d90 <_dtoa_r+0x5c0>)
 8007b08:	b954      	cbnz	r4, 8007b20 <_dtoa_r+0x350>
 8007b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b12:	f7f8 fe9b 	bl	800084c <__aeabi_ddiv>
 8007b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b1a:	e028      	b.n	8007b6e <_dtoa_r+0x39e>
 8007b1c:	2602      	movs	r6, #2
 8007b1e:	e7f2      	b.n	8007b06 <_dtoa_r+0x336>
 8007b20:	07e1      	lsls	r1, r4, #31
 8007b22:	d508      	bpl.n	8007b36 <_dtoa_r+0x366>
 8007b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b2c:	f7f8 fd64 	bl	80005f8 <__aeabi_dmul>
 8007b30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b34:	3601      	adds	r6, #1
 8007b36:	1064      	asrs	r4, r4, #1
 8007b38:	3508      	adds	r5, #8
 8007b3a:	e7e5      	b.n	8007b08 <_dtoa_r+0x338>
 8007b3c:	f000 80d2 	beq.w	8007ce4 <_dtoa_r+0x514>
 8007b40:	427c      	negs	r4, r7
 8007b42:	4b92      	ldr	r3, [pc, #584]	@ (8007d8c <_dtoa_r+0x5bc>)
 8007b44:	4d92      	ldr	r5, [pc, #584]	@ (8007d90 <_dtoa_r+0x5c0>)
 8007b46:	f004 020f 	and.w	r2, r4, #15
 8007b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b56:	f7f8 fd4f 	bl	80005f8 <__aeabi_dmul>
 8007b5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b5e:	1124      	asrs	r4, r4, #4
 8007b60:	2300      	movs	r3, #0
 8007b62:	2602      	movs	r6, #2
 8007b64:	2c00      	cmp	r4, #0
 8007b66:	f040 80b2 	bne.w	8007cce <_dtoa_r+0x4fe>
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1d3      	bne.n	8007b16 <_dtoa_r+0x346>
 8007b6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f000 80b7 	beq.w	8007ce8 <_dtoa_r+0x518>
 8007b7a:	4b86      	ldr	r3, [pc, #536]	@ (8007d94 <_dtoa_r+0x5c4>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	4620      	mov	r0, r4
 8007b80:	4629      	mov	r1, r5
 8007b82:	f7f8 ffab 	bl	8000adc <__aeabi_dcmplt>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	f000 80ae 	beq.w	8007ce8 <_dtoa_r+0x518>
 8007b8c:	9b07      	ldr	r3, [sp, #28]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 80aa 	beq.w	8007ce8 <_dtoa_r+0x518>
 8007b94:	9b00      	ldr	r3, [sp, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	dd37      	ble.n	8007c0a <_dtoa_r+0x43a>
 8007b9a:	1e7b      	subs	r3, r7, #1
 8007b9c:	9304      	str	r3, [sp, #16]
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8007d98 <_dtoa_r+0x5c8>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	f7f8 fd27 	bl	80005f8 <__aeabi_dmul>
 8007baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bae:	9c00      	ldr	r4, [sp, #0]
 8007bb0:	3601      	adds	r6, #1
 8007bb2:	4630      	mov	r0, r6
 8007bb4:	f7f8 fcb6 	bl	8000524 <__aeabi_i2d>
 8007bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bbc:	f7f8 fd1c 	bl	80005f8 <__aeabi_dmul>
 8007bc0:	4b76      	ldr	r3, [pc, #472]	@ (8007d9c <_dtoa_r+0x5cc>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f7f8 fb62 	bl	800028c <__adddf3>
 8007bc8:	4605      	mov	r5, r0
 8007bca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007bce:	2c00      	cmp	r4, #0
 8007bd0:	f040 808d 	bne.w	8007cee <_dtoa_r+0x51e>
 8007bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bd8:	4b71      	ldr	r3, [pc, #452]	@ (8007da0 <_dtoa_r+0x5d0>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f7f8 fb54 	bl	8000288 <__aeabi_dsub>
 8007be0:	4602      	mov	r2, r0
 8007be2:	460b      	mov	r3, r1
 8007be4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007be8:	462a      	mov	r2, r5
 8007bea:	4633      	mov	r3, r6
 8007bec:	f7f8 ff94 	bl	8000b18 <__aeabi_dcmpgt>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	f040 828b 	bne.w	800810c <_dtoa_r+0x93c>
 8007bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bfa:	462a      	mov	r2, r5
 8007bfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007c00:	f7f8 ff6c 	bl	8000adc <__aeabi_dcmplt>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	f040 8128 	bne.w	8007e5a <_dtoa_r+0x68a>
 8007c0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007c0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007c12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f2c0 815a 	blt.w	8007ece <_dtoa_r+0x6fe>
 8007c1a:	2f0e      	cmp	r7, #14
 8007c1c:	f300 8157 	bgt.w	8007ece <_dtoa_r+0x6fe>
 8007c20:	4b5a      	ldr	r3, [pc, #360]	@ (8007d8c <_dtoa_r+0x5bc>)
 8007c22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c26:	ed93 7b00 	vldr	d7, [r3]
 8007c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	ed8d 7b00 	vstr	d7, [sp]
 8007c32:	da03      	bge.n	8007c3c <_dtoa_r+0x46c>
 8007c34:	9b07      	ldr	r3, [sp, #28]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f340 8101 	ble.w	8007e3e <_dtoa_r+0x66e>
 8007c3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c40:	4656      	mov	r6, sl
 8007c42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c46:	4620      	mov	r0, r4
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7f8 fdff 	bl	800084c <__aeabi_ddiv>
 8007c4e:	f7f8 ff83 	bl	8000b58 <__aeabi_d2iz>
 8007c52:	4680      	mov	r8, r0
 8007c54:	f7f8 fc66 	bl	8000524 <__aeabi_i2d>
 8007c58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c5c:	f7f8 fccc 	bl	80005f8 <__aeabi_dmul>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4620      	mov	r0, r4
 8007c66:	4629      	mov	r1, r5
 8007c68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c6c:	f7f8 fb0c 	bl	8000288 <__aeabi_dsub>
 8007c70:	f806 4b01 	strb.w	r4, [r6], #1
 8007c74:	9d07      	ldr	r5, [sp, #28]
 8007c76:	eba6 040a 	sub.w	r4, r6, sl
 8007c7a:	42a5      	cmp	r5, r4
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	f040 8117 	bne.w	8007eb2 <_dtoa_r+0x6e2>
 8007c84:	f7f8 fb02 	bl	800028c <__adddf3>
 8007c88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	460d      	mov	r5, r1
 8007c90:	f7f8 ff42 	bl	8000b18 <__aeabi_dcmpgt>
 8007c94:	2800      	cmp	r0, #0
 8007c96:	f040 80f9 	bne.w	8007e8c <_dtoa_r+0x6bc>
 8007c9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	4629      	mov	r1, r5
 8007ca2:	f7f8 ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ca6:	b118      	cbz	r0, 8007cb0 <_dtoa_r+0x4e0>
 8007ca8:	f018 0f01 	tst.w	r8, #1
 8007cac:	f040 80ee 	bne.w	8007e8c <_dtoa_r+0x6bc>
 8007cb0:	4649      	mov	r1, r9
 8007cb2:	4658      	mov	r0, fp
 8007cb4:	f000 fc90 	bl	80085d8 <_Bfree>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	7033      	strb	r3, [r6, #0]
 8007cbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007cbe:	3701      	adds	r7, #1
 8007cc0:	601f      	str	r7, [r3, #0]
 8007cc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 831d 	beq.w	8008304 <_dtoa_r+0xb34>
 8007cca:	601e      	str	r6, [r3, #0]
 8007ccc:	e31a      	b.n	8008304 <_dtoa_r+0xb34>
 8007cce:	07e2      	lsls	r2, r4, #31
 8007cd0:	d505      	bpl.n	8007cde <_dtoa_r+0x50e>
 8007cd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cd6:	f7f8 fc8f 	bl	80005f8 <__aeabi_dmul>
 8007cda:	3601      	adds	r6, #1
 8007cdc:	2301      	movs	r3, #1
 8007cde:	1064      	asrs	r4, r4, #1
 8007ce0:	3508      	adds	r5, #8
 8007ce2:	e73f      	b.n	8007b64 <_dtoa_r+0x394>
 8007ce4:	2602      	movs	r6, #2
 8007ce6:	e742      	b.n	8007b6e <_dtoa_r+0x39e>
 8007ce8:	9c07      	ldr	r4, [sp, #28]
 8007cea:	9704      	str	r7, [sp, #16]
 8007cec:	e761      	b.n	8007bb2 <_dtoa_r+0x3e2>
 8007cee:	4b27      	ldr	r3, [pc, #156]	@ (8007d8c <_dtoa_r+0x5bc>)
 8007cf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007cfa:	4454      	add	r4, sl
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	d053      	beq.n	8007da8 <_dtoa_r+0x5d8>
 8007d00:	4928      	ldr	r1, [pc, #160]	@ (8007da4 <_dtoa_r+0x5d4>)
 8007d02:	2000      	movs	r0, #0
 8007d04:	f7f8 fda2 	bl	800084c <__aeabi_ddiv>
 8007d08:	4633      	mov	r3, r6
 8007d0a:	462a      	mov	r2, r5
 8007d0c:	f7f8 fabc 	bl	8000288 <__aeabi_dsub>
 8007d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d14:	4656      	mov	r6, sl
 8007d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d1a:	f7f8 ff1d 	bl	8000b58 <__aeabi_d2iz>
 8007d1e:	4605      	mov	r5, r0
 8007d20:	f7f8 fc00 	bl	8000524 <__aeabi_i2d>
 8007d24:	4602      	mov	r2, r0
 8007d26:	460b      	mov	r3, r1
 8007d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d2c:	f7f8 faac 	bl	8000288 <__aeabi_dsub>
 8007d30:	3530      	adds	r5, #48	@ 0x30
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d3a:	f806 5b01 	strb.w	r5, [r6], #1
 8007d3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d42:	f7f8 fecb 	bl	8000adc <__aeabi_dcmplt>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d171      	bne.n	8007e2e <_dtoa_r+0x65e>
 8007d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d4e:	4911      	ldr	r1, [pc, #68]	@ (8007d94 <_dtoa_r+0x5c4>)
 8007d50:	2000      	movs	r0, #0
 8007d52:	f7f8 fa99 	bl	8000288 <__aeabi_dsub>
 8007d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d5a:	f7f8 febf 	bl	8000adc <__aeabi_dcmplt>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	f040 8095 	bne.w	8007e8e <_dtoa_r+0x6be>
 8007d64:	42a6      	cmp	r6, r4
 8007d66:	f43f af50 	beq.w	8007c0a <_dtoa_r+0x43a>
 8007d6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d98 <_dtoa_r+0x5c8>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	f7f8 fc41 	bl	80005f8 <__aeabi_dmul>
 8007d76:	4b08      	ldr	r3, [pc, #32]	@ (8007d98 <_dtoa_r+0x5c8>)
 8007d78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d82:	f7f8 fc39 	bl	80005f8 <__aeabi_dmul>
 8007d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d8a:	e7c4      	b.n	8007d16 <_dtoa_r+0x546>
 8007d8c:	0800af78 	.word	0x0800af78
 8007d90:	0800af50 	.word	0x0800af50
 8007d94:	3ff00000 	.word	0x3ff00000
 8007d98:	40240000 	.word	0x40240000
 8007d9c:	401c0000 	.word	0x401c0000
 8007da0:	40140000 	.word	0x40140000
 8007da4:	3fe00000 	.word	0x3fe00000
 8007da8:	4631      	mov	r1, r6
 8007daa:	4628      	mov	r0, r5
 8007dac:	f7f8 fc24 	bl	80005f8 <__aeabi_dmul>
 8007db0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007db4:	9415      	str	r4, [sp, #84]	@ 0x54
 8007db6:	4656      	mov	r6, sl
 8007db8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dbc:	f7f8 fecc 	bl	8000b58 <__aeabi_d2iz>
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	f7f8 fbaf 	bl	8000524 <__aeabi_i2d>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dce:	f7f8 fa5b 	bl	8000288 <__aeabi_dsub>
 8007dd2:	3530      	adds	r5, #48	@ 0x30
 8007dd4:	f806 5b01 	strb.w	r5, [r6], #1
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	42a6      	cmp	r6, r4
 8007dde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007de2:	f04f 0200 	mov.w	r2, #0
 8007de6:	d124      	bne.n	8007e32 <_dtoa_r+0x662>
 8007de8:	4bac      	ldr	r3, [pc, #688]	@ (800809c <_dtoa_r+0x8cc>)
 8007dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007dee:	f7f8 fa4d 	bl	800028c <__adddf3>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dfa:	f7f8 fe8d 	bl	8000b18 <__aeabi_dcmpgt>
 8007dfe:	2800      	cmp	r0, #0
 8007e00:	d145      	bne.n	8007e8e <_dtoa_r+0x6be>
 8007e02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e06:	49a5      	ldr	r1, [pc, #660]	@ (800809c <_dtoa_r+0x8cc>)
 8007e08:	2000      	movs	r0, #0
 8007e0a:	f7f8 fa3d 	bl	8000288 <__aeabi_dsub>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e16:	f7f8 fe61 	bl	8000adc <__aeabi_dcmplt>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	f43f aef5 	beq.w	8007c0a <_dtoa_r+0x43a>
 8007e20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007e22:	1e73      	subs	r3, r6, #1
 8007e24:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e2a:	2b30      	cmp	r3, #48	@ 0x30
 8007e2c:	d0f8      	beq.n	8007e20 <_dtoa_r+0x650>
 8007e2e:	9f04      	ldr	r7, [sp, #16]
 8007e30:	e73e      	b.n	8007cb0 <_dtoa_r+0x4e0>
 8007e32:	4b9b      	ldr	r3, [pc, #620]	@ (80080a0 <_dtoa_r+0x8d0>)
 8007e34:	f7f8 fbe0 	bl	80005f8 <__aeabi_dmul>
 8007e38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e3c:	e7bc      	b.n	8007db8 <_dtoa_r+0x5e8>
 8007e3e:	d10c      	bne.n	8007e5a <_dtoa_r+0x68a>
 8007e40:	4b98      	ldr	r3, [pc, #608]	@ (80080a4 <_dtoa_r+0x8d4>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e48:	f7f8 fbd6 	bl	80005f8 <__aeabi_dmul>
 8007e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e50:	f7f8 fe58 	bl	8000b04 <__aeabi_dcmpge>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	f000 8157 	beq.w	8008108 <_dtoa_r+0x938>
 8007e5a:	2400      	movs	r4, #0
 8007e5c:	4625      	mov	r5, r4
 8007e5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e60:	43db      	mvns	r3, r3
 8007e62:	9304      	str	r3, [sp, #16]
 8007e64:	4656      	mov	r6, sl
 8007e66:	2700      	movs	r7, #0
 8007e68:	4621      	mov	r1, r4
 8007e6a:	4658      	mov	r0, fp
 8007e6c:	f000 fbb4 	bl	80085d8 <_Bfree>
 8007e70:	2d00      	cmp	r5, #0
 8007e72:	d0dc      	beq.n	8007e2e <_dtoa_r+0x65e>
 8007e74:	b12f      	cbz	r7, 8007e82 <_dtoa_r+0x6b2>
 8007e76:	42af      	cmp	r7, r5
 8007e78:	d003      	beq.n	8007e82 <_dtoa_r+0x6b2>
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	4658      	mov	r0, fp
 8007e7e:	f000 fbab 	bl	80085d8 <_Bfree>
 8007e82:	4629      	mov	r1, r5
 8007e84:	4658      	mov	r0, fp
 8007e86:	f000 fba7 	bl	80085d8 <_Bfree>
 8007e8a:	e7d0      	b.n	8007e2e <_dtoa_r+0x65e>
 8007e8c:	9704      	str	r7, [sp, #16]
 8007e8e:	4633      	mov	r3, r6
 8007e90:	461e      	mov	r6, r3
 8007e92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007e96:	2a39      	cmp	r2, #57	@ 0x39
 8007e98:	d107      	bne.n	8007eaa <_dtoa_r+0x6da>
 8007e9a:	459a      	cmp	sl, r3
 8007e9c:	d1f8      	bne.n	8007e90 <_dtoa_r+0x6c0>
 8007e9e:	9a04      	ldr	r2, [sp, #16]
 8007ea0:	3201      	adds	r2, #1
 8007ea2:	9204      	str	r2, [sp, #16]
 8007ea4:	2230      	movs	r2, #48	@ 0x30
 8007ea6:	f88a 2000 	strb.w	r2, [sl]
 8007eaa:	781a      	ldrb	r2, [r3, #0]
 8007eac:	3201      	adds	r2, #1
 8007eae:	701a      	strb	r2, [r3, #0]
 8007eb0:	e7bd      	b.n	8007e2e <_dtoa_r+0x65e>
 8007eb2:	4b7b      	ldr	r3, [pc, #492]	@ (80080a0 <_dtoa_r+0x8d0>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f7f8 fb9f 	bl	80005f8 <__aeabi_dmul>
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	f7f8 fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f43f aebb 	beq.w	8007c42 <_dtoa_r+0x472>
 8007ecc:	e6f0      	b.n	8007cb0 <_dtoa_r+0x4e0>
 8007ece:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ed0:	2a00      	cmp	r2, #0
 8007ed2:	f000 80db 	beq.w	800808c <_dtoa_r+0x8bc>
 8007ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ed8:	2a01      	cmp	r2, #1
 8007eda:	f300 80bf 	bgt.w	800805c <_dtoa_r+0x88c>
 8007ede:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ee0:	2a00      	cmp	r2, #0
 8007ee2:	f000 80b7 	beq.w	8008054 <_dtoa_r+0x884>
 8007ee6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007eea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007eec:	4646      	mov	r6, r8
 8007eee:	9a08      	ldr	r2, [sp, #32]
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	441a      	add	r2, r3
 8007ef4:	4658      	mov	r0, fp
 8007ef6:	4498      	add	r8, r3
 8007ef8:	9208      	str	r2, [sp, #32]
 8007efa:	f000 fc6b 	bl	80087d4 <__i2b>
 8007efe:	4605      	mov	r5, r0
 8007f00:	b15e      	cbz	r6, 8007f1a <_dtoa_r+0x74a>
 8007f02:	9b08      	ldr	r3, [sp, #32]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	dd08      	ble.n	8007f1a <_dtoa_r+0x74a>
 8007f08:	42b3      	cmp	r3, r6
 8007f0a:	9a08      	ldr	r2, [sp, #32]
 8007f0c:	bfa8      	it	ge
 8007f0e:	4633      	movge	r3, r6
 8007f10:	eba8 0803 	sub.w	r8, r8, r3
 8007f14:	1af6      	subs	r6, r6, r3
 8007f16:	1ad3      	subs	r3, r2, r3
 8007f18:	9308      	str	r3, [sp, #32]
 8007f1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f1c:	b1f3      	cbz	r3, 8007f5c <_dtoa_r+0x78c>
 8007f1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	f000 80b7 	beq.w	8008094 <_dtoa_r+0x8c4>
 8007f26:	b18c      	cbz	r4, 8007f4c <_dtoa_r+0x77c>
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4622      	mov	r2, r4
 8007f2c:	4658      	mov	r0, fp
 8007f2e:	f000 fd11 	bl	8008954 <__pow5mult>
 8007f32:	464a      	mov	r2, r9
 8007f34:	4601      	mov	r1, r0
 8007f36:	4605      	mov	r5, r0
 8007f38:	4658      	mov	r0, fp
 8007f3a:	f000 fc61 	bl	8008800 <__multiply>
 8007f3e:	4649      	mov	r1, r9
 8007f40:	9004      	str	r0, [sp, #16]
 8007f42:	4658      	mov	r0, fp
 8007f44:	f000 fb48 	bl	80085d8 <_Bfree>
 8007f48:	9b04      	ldr	r3, [sp, #16]
 8007f4a:	4699      	mov	r9, r3
 8007f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f4e:	1b1a      	subs	r2, r3, r4
 8007f50:	d004      	beq.n	8007f5c <_dtoa_r+0x78c>
 8007f52:	4649      	mov	r1, r9
 8007f54:	4658      	mov	r0, fp
 8007f56:	f000 fcfd 	bl	8008954 <__pow5mult>
 8007f5a:	4681      	mov	r9, r0
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	4658      	mov	r0, fp
 8007f60:	f000 fc38 	bl	80087d4 <__i2b>
 8007f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f66:	4604      	mov	r4, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 81cf 	beq.w	800830c <_dtoa_r+0xb3c>
 8007f6e:	461a      	mov	r2, r3
 8007f70:	4601      	mov	r1, r0
 8007f72:	4658      	mov	r0, fp
 8007f74:	f000 fcee 	bl	8008954 <__pow5mult>
 8007f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	4604      	mov	r4, r0
 8007f7e:	f300 8095 	bgt.w	80080ac <_dtoa_r+0x8dc>
 8007f82:	9b02      	ldr	r3, [sp, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f040 8087 	bne.w	8008098 <_dtoa_r+0x8c8>
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f040 8089 	bne.w	80080a8 <_dtoa_r+0x8d8>
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f9c:	0d1b      	lsrs	r3, r3, #20
 8007f9e:	051b      	lsls	r3, r3, #20
 8007fa0:	b12b      	cbz	r3, 8007fae <_dtoa_r+0x7de>
 8007fa2:	9b08      	ldr	r3, [sp, #32]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	9308      	str	r3, [sp, #32]
 8007fa8:	f108 0801 	add.w	r8, r8, #1
 8007fac:	2301      	movs	r3, #1
 8007fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f000 81b0 	beq.w	8008318 <_dtoa_r+0xb48>
 8007fb8:	6923      	ldr	r3, [r4, #16]
 8007fba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fbe:	6918      	ldr	r0, [r3, #16]
 8007fc0:	f000 fbbc 	bl	800873c <__hi0bits>
 8007fc4:	f1c0 0020 	rsb	r0, r0, #32
 8007fc8:	9b08      	ldr	r3, [sp, #32]
 8007fca:	4418      	add	r0, r3
 8007fcc:	f010 001f 	ands.w	r0, r0, #31
 8007fd0:	d077      	beq.n	80080c2 <_dtoa_r+0x8f2>
 8007fd2:	f1c0 0320 	rsb	r3, r0, #32
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	dd6b      	ble.n	80080b2 <_dtoa_r+0x8e2>
 8007fda:	9b08      	ldr	r3, [sp, #32]
 8007fdc:	f1c0 001c 	rsb	r0, r0, #28
 8007fe0:	4403      	add	r3, r0
 8007fe2:	4480      	add	r8, r0
 8007fe4:	4406      	add	r6, r0
 8007fe6:	9308      	str	r3, [sp, #32]
 8007fe8:	f1b8 0f00 	cmp.w	r8, #0
 8007fec:	dd05      	ble.n	8007ffa <_dtoa_r+0x82a>
 8007fee:	4649      	mov	r1, r9
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	4658      	mov	r0, fp
 8007ff4:	f000 fd08 	bl	8008a08 <__lshift>
 8007ff8:	4681      	mov	r9, r0
 8007ffa:	9b08      	ldr	r3, [sp, #32]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	dd05      	ble.n	800800c <_dtoa_r+0x83c>
 8008000:	4621      	mov	r1, r4
 8008002:	461a      	mov	r2, r3
 8008004:	4658      	mov	r0, fp
 8008006:	f000 fcff 	bl	8008a08 <__lshift>
 800800a:	4604      	mov	r4, r0
 800800c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800800e:	2b00      	cmp	r3, #0
 8008010:	d059      	beq.n	80080c6 <_dtoa_r+0x8f6>
 8008012:	4621      	mov	r1, r4
 8008014:	4648      	mov	r0, r9
 8008016:	f000 fd63 	bl	8008ae0 <__mcmp>
 800801a:	2800      	cmp	r0, #0
 800801c:	da53      	bge.n	80080c6 <_dtoa_r+0x8f6>
 800801e:	1e7b      	subs	r3, r7, #1
 8008020:	9304      	str	r3, [sp, #16]
 8008022:	4649      	mov	r1, r9
 8008024:	2300      	movs	r3, #0
 8008026:	220a      	movs	r2, #10
 8008028:	4658      	mov	r0, fp
 800802a:	f000 faf7 	bl	800861c <__multadd>
 800802e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008030:	4681      	mov	r9, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 8172 	beq.w	800831c <_dtoa_r+0xb4c>
 8008038:	2300      	movs	r3, #0
 800803a:	4629      	mov	r1, r5
 800803c:	220a      	movs	r2, #10
 800803e:	4658      	mov	r0, fp
 8008040:	f000 faec 	bl	800861c <__multadd>
 8008044:	9b00      	ldr	r3, [sp, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	4605      	mov	r5, r0
 800804a:	dc67      	bgt.n	800811c <_dtoa_r+0x94c>
 800804c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800804e:	2b02      	cmp	r3, #2
 8008050:	dc41      	bgt.n	80080d6 <_dtoa_r+0x906>
 8008052:	e063      	b.n	800811c <_dtoa_r+0x94c>
 8008054:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008056:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800805a:	e746      	b.n	8007eea <_dtoa_r+0x71a>
 800805c:	9b07      	ldr	r3, [sp, #28]
 800805e:	1e5c      	subs	r4, r3, #1
 8008060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008062:	42a3      	cmp	r3, r4
 8008064:	bfbf      	itttt	lt
 8008066:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008068:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800806a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800806c:	1ae3      	sublt	r3, r4, r3
 800806e:	bfb4      	ite	lt
 8008070:	18d2      	addlt	r2, r2, r3
 8008072:	1b1c      	subge	r4, r3, r4
 8008074:	9b07      	ldr	r3, [sp, #28]
 8008076:	bfbc      	itt	lt
 8008078:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800807a:	2400      	movlt	r4, #0
 800807c:	2b00      	cmp	r3, #0
 800807e:	bfb5      	itete	lt
 8008080:	eba8 0603 	sublt.w	r6, r8, r3
 8008084:	9b07      	ldrge	r3, [sp, #28]
 8008086:	2300      	movlt	r3, #0
 8008088:	4646      	movge	r6, r8
 800808a:	e730      	b.n	8007eee <_dtoa_r+0x71e>
 800808c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800808e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008090:	4646      	mov	r6, r8
 8008092:	e735      	b.n	8007f00 <_dtoa_r+0x730>
 8008094:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008096:	e75c      	b.n	8007f52 <_dtoa_r+0x782>
 8008098:	2300      	movs	r3, #0
 800809a:	e788      	b.n	8007fae <_dtoa_r+0x7de>
 800809c:	3fe00000 	.word	0x3fe00000
 80080a0:	40240000 	.word	0x40240000
 80080a4:	40140000 	.word	0x40140000
 80080a8:	9b02      	ldr	r3, [sp, #8]
 80080aa:	e780      	b.n	8007fae <_dtoa_r+0x7de>
 80080ac:	2300      	movs	r3, #0
 80080ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80080b0:	e782      	b.n	8007fb8 <_dtoa_r+0x7e8>
 80080b2:	d099      	beq.n	8007fe8 <_dtoa_r+0x818>
 80080b4:	9a08      	ldr	r2, [sp, #32]
 80080b6:	331c      	adds	r3, #28
 80080b8:	441a      	add	r2, r3
 80080ba:	4498      	add	r8, r3
 80080bc:	441e      	add	r6, r3
 80080be:	9208      	str	r2, [sp, #32]
 80080c0:	e792      	b.n	8007fe8 <_dtoa_r+0x818>
 80080c2:	4603      	mov	r3, r0
 80080c4:	e7f6      	b.n	80080b4 <_dtoa_r+0x8e4>
 80080c6:	9b07      	ldr	r3, [sp, #28]
 80080c8:	9704      	str	r7, [sp, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dc20      	bgt.n	8008110 <_dtoa_r+0x940>
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	dd1e      	ble.n	8008114 <_dtoa_r+0x944>
 80080d6:	9b00      	ldr	r3, [sp, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f47f aec0 	bne.w	8007e5e <_dtoa_r+0x68e>
 80080de:	4621      	mov	r1, r4
 80080e0:	2205      	movs	r2, #5
 80080e2:	4658      	mov	r0, fp
 80080e4:	f000 fa9a 	bl	800861c <__multadd>
 80080e8:	4601      	mov	r1, r0
 80080ea:	4604      	mov	r4, r0
 80080ec:	4648      	mov	r0, r9
 80080ee:	f000 fcf7 	bl	8008ae0 <__mcmp>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f77f aeb3 	ble.w	8007e5e <_dtoa_r+0x68e>
 80080f8:	4656      	mov	r6, sl
 80080fa:	2331      	movs	r3, #49	@ 0x31
 80080fc:	f806 3b01 	strb.w	r3, [r6], #1
 8008100:	9b04      	ldr	r3, [sp, #16]
 8008102:	3301      	adds	r3, #1
 8008104:	9304      	str	r3, [sp, #16]
 8008106:	e6ae      	b.n	8007e66 <_dtoa_r+0x696>
 8008108:	9c07      	ldr	r4, [sp, #28]
 800810a:	9704      	str	r7, [sp, #16]
 800810c:	4625      	mov	r5, r4
 800810e:	e7f3      	b.n	80080f8 <_dtoa_r+0x928>
 8008110:	9b07      	ldr	r3, [sp, #28]
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008116:	2b00      	cmp	r3, #0
 8008118:	f000 8104 	beq.w	8008324 <_dtoa_r+0xb54>
 800811c:	2e00      	cmp	r6, #0
 800811e:	dd05      	ble.n	800812c <_dtoa_r+0x95c>
 8008120:	4629      	mov	r1, r5
 8008122:	4632      	mov	r2, r6
 8008124:	4658      	mov	r0, fp
 8008126:	f000 fc6f 	bl	8008a08 <__lshift>
 800812a:	4605      	mov	r5, r0
 800812c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800812e:	2b00      	cmp	r3, #0
 8008130:	d05a      	beq.n	80081e8 <_dtoa_r+0xa18>
 8008132:	6869      	ldr	r1, [r5, #4]
 8008134:	4658      	mov	r0, fp
 8008136:	f000 fa0f 	bl	8008558 <_Balloc>
 800813a:	4606      	mov	r6, r0
 800813c:	b928      	cbnz	r0, 800814a <_dtoa_r+0x97a>
 800813e:	4b84      	ldr	r3, [pc, #528]	@ (8008350 <_dtoa_r+0xb80>)
 8008140:	4602      	mov	r2, r0
 8008142:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008146:	f7ff bb5a 	b.w	80077fe <_dtoa_r+0x2e>
 800814a:	692a      	ldr	r2, [r5, #16]
 800814c:	3202      	adds	r2, #2
 800814e:	0092      	lsls	r2, r2, #2
 8008150:	f105 010c 	add.w	r1, r5, #12
 8008154:	300c      	adds	r0, #12
 8008156:	f001 ff75 	bl	800a044 <memcpy>
 800815a:	2201      	movs	r2, #1
 800815c:	4631      	mov	r1, r6
 800815e:	4658      	mov	r0, fp
 8008160:	f000 fc52 	bl	8008a08 <__lshift>
 8008164:	f10a 0301 	add.w	r3, sl, #1
 8008168:	9307      	str	r3, [sp, #28]
 800816a:	9b00      	ldr	r3, [sp, #0]
 800816c:	4453      	add	r3, sl
 800816e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008170:	9b02      	ldr	r3, [sp, #8]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	462f      	mov	r7, r5
 8008178:	930a      	str	r3, [sp, #40]	@ 0x28
 800817a:	4605      	mov	r5, r0
 800817c:	9b07      	ldr	r3, [sp, #28]
 800817e:	4621      	mov	r1, r4
 8008180:	3b01      	subs	r3, #1
 8008182:	4648      	mov	r0, r9
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	f7ff fa99 	bl	80076bc <quorem>
 800818a:	4639      	mov	r1, r7
 800818c:	9002      	str	r0, [sp, #8]
 800818e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008192:	4648      	mov	r0, r9
 8008194:	f000 fca4 	bl	8008ae0 <__mcmp>
 8008198:	462a      	mov	r2, r5
 800819a:	9008      	str	r0, [sp, #32]
 800819c:	4621      	mov	r1, r4
 800819e:	4658      	mov	r0, fp
 80081a0:	f000 fcba 	bl	8008b18 <__mdiff>
 80081a4:	68c2      	ldr	r2, [r0, #12]
 80081a6:	4606      	mov	r6, r0
 80081a8:	bb02      	cbnz	r2, 80081ec <_dtoa_r+0xa1c>
 80081aa:	4601      	mov	r1, r0
 80081ac:	4648      	mov	r0, r9
 80081ae:	f000 fc97 	bl	8008ae0 <__mcmp>
 80081b2:	4602      	mov	r2, r0
 80081b4:	4631      	mov	r1, r6
 80081b6:	4658      	mov	r0, fp
 80081b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80081ba:	f000 fa0d 	bl	80085d8 <_Bfree>
 80081be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081c2:	9e07      	ldr	r6, [sp, #28]
 80081c4:	ea43 0102 	orr.w	r1, r3, r2
 80081c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ca:	4319      	orrs	r1, r3
 80081cc:	d110      	bne.n	80081f0 <_dtoa_r+0xa20>
 80081ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081d2:	d029      	beq.n	8008228 <_dtoa_r+0xa58>
 80081d4:	9b08      	ldr	r3, [sp, #32]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	dd02      	ble.n	80081e0 <_dtoa_r+0xa10>
 80081da:	9b02      	ldr	r3, [sp, #8]
 80081dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80081e0:	9b00      	ldr	r3, [sp, #0]
 80081e2:	f883 8000 	strb.w	r8, [r3]
 80081e6:	e63f      	b.n	8007e68 <_dtoa_r+0x698>
 80081e8:	4628      	mov	r0, r5
 80081ea:	e7bb      	b.n	8008164 <_dtoa_r+0x994>
 80081ec:	2201      	movs	r2, #1
 80081ee:	e7e1      	b.n	80081b4 <_dtoa_r+0x9e4>
 80081f0:	9b08      	ldr	r3, [sp, #32]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	db04      	blt.n	8008200 <_dtoa_r+0xa30>
 80081f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80081f8:	430b      	orrs	r3, r1
 80081fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80081fc:	430b      	orrs	r3, r1
 80081fe:	d120      	bne.n	8008242 <_dtoa_r+0xa72>
 8008200:	2a00      	cmp	r2, #0
 8008202:	dded      	ble.n	80081e0 <_dtoa_r+0xa10>
 8008204:	4649      	mov	r1, r9
 8008206:	2201      	movs	r2, #1
 8008208:	4658      	mov	r0, fp
 800820a:	f000 fbfd 	bl	8008a08 <__lshift>
 800820e:	4621      	mov	r1, r4
 8008210:	4681      	mov	r9, r0
 8008212:	f000 fc65 	bl	8008ae0 <__mcmp>
 8008216:	2800      	cmp	r0, #0
 8008218:	dc03      	bgt.n	8008222 <_dtoa_r+0xa52>
 800821a:	d1e1      	bne.n	80081e0 <_dtoa_r+0xa10>
 800821c:	f018 0f01 	tst.w	r8, #1
 8008220:	d0de      	beq.n	80081e0 <_dtoa_r+0xa10>
 8008222:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008226:	d1d8      	bne.n	80081da <_dtoa_r+0xa0a>
 8008228:	9a00      	ldr	r2, [sp, #0]
 800822a:	2339      	movs	r3, #57	@ 0x39
 800822c:	7013      	strb	r3, [r2, #0]
 800822e:	4633      	mov	r3, r6
 8008230:	461e      	mov	r6, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008238:	2a39      	cmp	r2, #57	@ 0x39
 800823a:	d052      	beq.n	80082e2 <_dtoa_r+0xb12>
 800823c:	3201      	adds	r2, #1
 800823e:	701a      	strb	r2, [r3, #0]
 8008240:	e612      	b.n	8007e68 <_dtoa_r+0x698>
 8008242:	2a00      	cmp	r2, #0
 8008244:	dd07      	ble.n	8008256 <_dtoa_r+0xa86>
 8008246:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800824a:	d0ed      	beq.n	8008228 <_dtoa_r+0xa58>
 800824c:	9a00      	ldr	r2, [sp, #0]
 800824e:	f108 0301 	add.w	r3, r8, #1
 8008252:	7013      	strb	r3, [r2, #0]
 8008254:	e608      	b.n	8007e68 <_dtoa_r+0x698>
 8008256:	9b07      	ldr	r3, [sp, #28]
 8008258:	9a07      	ldr	r2, [sp, #28]
 800825a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800825e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008260:	4293      	cmp	r3, r2
 8008262:	d028      	beq.n	80082b6 <_dtoa_r+0xae6>
 8008264:	4649      	mov	r1, r9
 8008266:	2300      	movs	r3, #0
 8008268:	220a      	movs	r2, #10
 800826a:	4658      	mov	r0, fp
 800826c:	f000 f9d6 	bl	800861c <__multadd>
 8008270:	42af      	cmp	r7, r5
 8008272:	4681      	mov	r9, r0
 8008274:	f04f 0300 	mov.w	r3, #0
 8008278:	f04f 020a 	mov.w	r2, #10
 800827c:	4639      	mov	r1, r7
 800827e:	4658      	mov	r0, fp
 8008280:	d107      	bne.n	8008292 <_dtoa_r+0xac2>
 8008282:	f000 f9cb 	bl	800861c <__multadd>
 8008286:	4607      	mov	r7, r0
 8008288:	4605      	mov	r5, r0
 800828a:	9b07      	ldr	r3, [sp, #28]
 800828c:	3301      	adds	r3, #1
 800828e:	9307      	str	r3, [sp, #28]
 8008290:	e774      	b.n	800817c <_dtoa_r+0x9ac>
 8008292:	f000 f9c3 	bl	800861c <__multadd>
 8008296:	4629      	mov	r1, r5
 8008298:	4607      	mov	r7, r0
 800829a:	2300      	movs	r3, #0
 800829c:	220a      	movs	r2, #10
 800829e:	4658      	mov	r0, fp
 80082a0:	f000 f9bc 	bl	800861c <__multadd>
 80082a4:	4605      	mov	r5, r0
 80082a6:	e7f0      	b.n	800828a <_dtoa_r+0xaba>
 80082a8:	9b00      	ldr	r3, [sp, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	bfcc      	ite	gt
 80082ae:	461e      	movgt	r6, r3
 80082b0:	2601      	movle	r6, #1
 80082b2:	4456      	add	r6, sl
 80082b4:	2700      	movs	r7, #0
 80082b6:	4649      	mov	r1, r9
 80082b8:	2201      	movs	r2, #1
 80082ba:	4658      	mov	r0, fp
 80082bc:	f000 fba4 	bl	8008a08 <__lshift>
 80082c0:	4621      	mov	r1, r4
 80082c2:	4681      	mov	r9, r0
 80082c4:	f000 fc0c 	bl	8008ae0 <__mcmp>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	dcb0      	bgt.n	800822e <_dtoa_r+0xa5e>
 80082cc:	d102      	bne.n	80082d4 <_dtoa_r+0xb04>
 80082ce:	f018 0f01 	tst.w	r8, #1
 80082d2:	d1ac      	bne.n	800822e <_dtoa_r+0xa5e>
 80082d4:	4633      	mov	r3, r6
 80082d6:	461e      	mov	r6, r3
 80082d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082dc:	2a30      	cmp	r2, #48	@ 0x30
 80082de:	d0fa      	beq.n	80082d6 <_dtoa_r+0xb06>
 80082e0:	e5c2      	b.n	8007e68 <_dtoa_r+0x698>
 80082e2:	459a      	cmp	sl, r3
 80082e4:	d1a4      	bne.n	8008230 <_dtoa_r+0xa60>
 80082e6:	9b04      	ldr	r3, [sp, #16]
 80082e8:	3301      	adds	r3, #1
 80082ea:	9304      	str	r3, [sp, #16]
 80082ec:	2331      	movs	r3, #49	@ 0x31
 80082ee:	f88a 3000 	strb.w	r3, [sl]
 80082f2:	e5b9      	b.n	8007e68 <_dtoa_r+0x698>
 80082f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008354 <_dtoa_r+0xb84>
 80082fa:	b11b      	cbz	r3, 8008304 <_dtoa_r+0xb34>
 80082fc:	f10a 0308 	add.w	r3, sl, #8
 8008300:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008302:	6013      	str	r3, [r2, #0]
 8008304:	4650      	mov	r0, sl
 8008306:	b019      	add	sp, #100	@ 0x64
 8008308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800830e:	2b01      	cmp	r3, #1
 8008310:	f77f ae37 	ble.w	8007f82 <_dtoa_r+0x7b2>
 8008314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008316:	930a      	str	r3, [sp, #40]	@ 0x28
 8008318:	2001      	movs	r0, #1
 800831a:	e655      	b.n	8007fc8 <_dtoa_r+0x7f8>
 800831c:	9b00      	ldr	r3, [sp, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	f77f aed6 	ble.w	80080d0 <_dtoa_r+0x900>
 8008324:	4656      	mov	r6, sl
 8008326:	4621      	mov	r1, r4
 8008328:	4648      	mov	r0, r9
 800832a:	f7ff f9c7 	bl	80076bc <quorem>
 800832e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008332:	f806 8b01 	strb.w	r8, [r6], #1
 8008336:	9b00      	ldr	r3, [sp, #0]
 8008338:	eba6 020a 	sub.w	r2, r6, sl
 800833c:	4293      	cmp	r3, r2
 800833e:	ddb3      	ble.n	80082a8 <_dtoa_r+0xad8>
 8008340:	4649      	mov	r1, r9
 8008342:	2300      	movs	r3, #0
 8008344:	220a      	movs	r2, #10
 8008346:	4658      	mov	r0, fp
 8008348:	f000 f968 	bl	800861c <__multadd>
 800834c:	4681      	mov	r9, r0
 800834e:	e7ea      	b.n	8008326 <_dtoa_r+0xb56>
 8008350:	0800aed5 	.word	0x0800aed5
 8008354:	0800ae59 	.word	0x0800ae59

08008358 <_free_r>:
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	4605      	mov	r5, r0
 800835c:	2900      	cmp	r1, #0
 800835e:	d041      	beq.n	80083e4 <_free_r+0x8c>
 8008360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008364:	1f0c      	subs	r4, r1, #4
 8008366:	2b00      	cmp	r3, #0
 8008368:	bfb8      	it	lt
 800836a:	18e4      	addlt	r4, r4, r3
 800836c:	f000 f8e8 	bl	8008540 <__malloc_lock>
 8008370:	4a1d      	ldr	r2, [pc, #116]	@ (80083e8 <_free_r+0x90>)
 8008372:	6813      	ldr	r3, [r2, #0]
 8008374:	b933      	cbnz	r3, 8008384 <_free_r+0x2c>
 8008376:	6063      	str	r3, [r4, #4]
 8008378:	6014      	str	r4, [r2, #0]
 800837a:	4628      	mov	r0, r5
 800837c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008380:	f000 b8e4 	b.w	800854c <__malloc_unlock>
 8008384:	42a3      	cmp	r3, r4
 8008386:	d908      	bls.n	800839a <_free_r+0x42>
 8008388:	6820      	ldr	r0, [r4, #0]
 800838a:	1821      	adds	r1, r4, r0
 800838c:	428b      	cmp	r3, r1
 800838e:	bf01      	itttt	eq
 8008390:	6819      	ldreq	r1, [r3, #0]
 8008392:	685b      	ldreq	r3, [r3, #4]
 8008394:	1809      	addeq	r1, r1, r0
 8008396:	6021      	streq	r1, [r4, #0]
 8008398:	e7ed      	b.n	8008376 <_free_r+0x1e>
 800839a:	461a      	mov	r2, r3
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	b10b      	cbz	r3, 80083a4 <_free_r+0x4c>
 80083a0:	42a3      	cmp	r3, r4
 80083a2:	d9fa      	bls.n	800839a <_free_r+0x42>
 80083a4:	6811      	ldr	r1, [r2, #0]
 80083a6:	1850      	adds	r0, r2, r1
 80083a8:	42a0      	cmp	r0, r4
 80083aa:	d10b      	bne.n	80083c4 <_free_r+0x6c>
 80083ac:	6820      	ldr	r0, [r4, #0]
 80083ae:	4401      	add	r1, r0
 80083b0:	1850      	adds	r0, r2, r1
 80083b2:	4283      	cmp	r3, r0
 80083b4:	6011      	str	r1, [r2, #0]
 80083b6:	d1e0      	bne.n	800837a <_free_r+0x22>
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	6053      	str	r3, [r2, #4]
 80083be:	4408      	add	r0, r1
 80083c0:	6010      	str	r0, [r2, #0]
 80083c2:	e7da      	b.n	800837a <_free_r+0x22>
 80083c4:	d902      	bls.n	80083cc <_free_r+0x74>
 80083c6:	230c      	movs	r3, #12
 80083c8:	602b      	str	r3, [r5, #0]
 80083ca:	e7d6      	b.n	800837a <_free_r+0x22>
 80083cc:	6820      	ldr	r0, [r4, #0]
 80083ce:	1821      	adds	r1, r4, r0
 80083d0:	428b      	cmp	r3, r1
 80083d2:	bf04      	itt	eq
 80083d4:	6819      	ldreq	r1, [r3, #0]
 80083d6:	685b      	ldreq	r3, [r3, #4]
 80083d8:	6063      	str	r3, [r4, #4]
 80083da:	bf04      	itt	eq
 80083dc:	1809      	addeq	r1, r1, r0
 80083de:	6021      	streq	r1, [r4, #0]
 80083e0:	6054      	str	r4, [r2, #4]
 80083e2:	e7ca      	b.n	800837a <_free_r+0x22>
 80083e4:	bd38      	pop	{r3, r4, r5, pc}
 80083e6:	bf00      	nop
 80083e8:	20000b0c 	.word	0x20000b0c

080083ec <malloc>:
 80083ec:	4b02      	ldr	r3, [pc, #8]	@ (80083f8 <malloc+0xc>)
 80083ee:	4601      	mov	r1, r0
 80083f0:	6818      	ldr	r0, [r3, #0]
 80083f2:	f000 b825 	b.w	8008440 <_malloc_r>
 80083f6:	bf00      	nop
 80083f8:	20000018 	.word	0x20000018

080083fc <sbrk_aligned>:
 80083fc:	b570      	push	{r4, r5, r6, lr}
 80083fe:	4e0f      	ldr	r6, [pc, #60]	@ (800843c <sbrk_aligned+0x40>)
 8008400:	460c      	mov	r4, r1
 8008402:	6831      	ldr	r1, [r6, #0]
 8008404:	4605      	mov	r5, r0
 8008406:	b911      	cbnz	r1, 800840e <sbrk_aligned+0x12>
 8008408:	f001 fe0c 	bl	800a024 <_sbrk_r>
 800840c:	6030      	str	r0, [r6, #0]
 800840e:	4621      	mov	r1, r4
 8008410:	4628      	mov	r0, r5
 8008412:	f001 fe07 	bl	800a024 <_sbrk_r>
 8008416:	1c43      	adds	r3, r0, #1
 8008418:	d103      	bne.n	8008422 <sbrk_aligned+0x26>
 800841a:	f04f 34ff 	mov.w	r4, #4294967295
 800841e:	4620      	mov	r0, r4
 8008420:	bd70      	pop	{r4, r5, r6, pc}
 8008422:	1cc4      	adds	r4, r0, #3
 8008424:	f024 0403 	bic.w	r4, r4, #3
 8008428:	42a0      	cmp	r0, r4
 800842a:	d0f8      	beq.n	800841e <sbrk_aligned+0x22>
 800842c:	1a21      	subs	r1, r4, r0
 800842e:	4628      	mov	r0, r5
 8008430:	f001 fdf8 	bl	800a024 <_sbrk_r>
 8008434:	3001      	adds	r0, #1
 8008436:	d1f2      	bne.n	800841e <sbrk_aligned+0x22>
 8008438:	e7ef      	b.n	800841a <sbrk_aligned+0x1e>
 800843a:	bf00      	nop
 800843c:	20000b08 	.word	0x20000b08

08008440 <_malloc_r>:
 8008440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008444:	1ccd      	adds	r5, r1, #3
 8008446:	f025 0503 	bic.w	r5, r5, #3
 800844a:	3508      	adds	r5, #8
 800844c:	2d0c      	cmp	r5, #12
 800844e:	bf38      	it	cc
 8008450:	250c      	movcc	r5, #12
 8008452:	2d00      	cmp	r5, #0
 8008454:	4606      	mov	r6, r0
 8008456:	db01      	blt.n	800845c <_malloc_r+0x1c>
 8008458:	42a9      	cmp	r1, r5
 800845a:	d904      	bls.n	8008466 <_malloc_r+0x26>
 800845c:	230c      	movs	r3, #12
 800845e:	6033      	str	r3, [r6, #0]
 8008460:	2000      	movs	r0, #0
 8008462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008466:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800853c <_malloc_r+0xfc>
 800846a:	f000 f869 	bl	8008540 <__malloc_lock>
 800846e:	f8d8 3000 	ldr.w	r3, [r8]
 8008472:	461c      	mov	r4, r3
 8008474:	bb44      	cbnz	r4, 80084c8 <_malloc_r+0x88>
 8008476:	4629      	mov	r1, r5
 8008478:	4630      	mov	r0, r6
 800847a:	f7ff ffbf 	bl	80083fc <sbrk_aligned>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	4604      	mov	r4, r0
 8008482:	d158      	bne.n	8008536 <_malloc_r+0xf6>
 8008484:	f8d8 4000 	ldr.w	r4, [r8]
 8008488:	4627      	mov	r7, r4
 800848a:	2f00      	cmp	r7, #0
 800848c:	d143      	bne.n	8008516 <_malloc_r+0xd6>
 800848e:	2c00      	cmp	r4, #0
 8008490:	d04b      	beq.n	800852a <_malloc_r+0xea>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	4639      	mov	r1, r7
 8008496:	4630      	mov	r0, r6
 8008498:	eb04 0903 	add.w	r9, r4, r3
 800849c:	f001 fdc2 	bl	800a024 <_sbrk_r>
 80084a0:	4581      	cmp	r9, r0
 80084a2:	d142      	bne.n	800852a <_malloc_r+0xea>
 80084a4:	6821      	ldr	r1, [r4, #0]
 80084a6:	1a6d      	subs	r5, r5, r1
 80084a8:	4629      	mov	r1, r5
 80084aa:	4630      	mov	r0, r6
 80084ac:	f7ff ffa6 	bl	80083fc <sbrk_aligned>
 80084b0:	3001      	adds	r0, #1
 80084b2:	d03a      	beq.n	800852a <_malloc_r+0xea>
 80084b4:	6823      	ldr	r3, [r4, #0]
 80084b6:	442b      	add	r3, r5
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	f8d8 3000 	ldr.w	r3, [r8]
 80084be:	685a      	ldr	r2, [r3, #4]
 80084c0:	bb62      	cbnz	r2, 800851c <_malloc_r+0xdc>
 80084c2:	f8c8 7000 	str.w	r7, [r8]
 80084c6:	e00f      	b.n	80084e8 <_malloc_r+0xa8>
 80084c8:	6822      	ldr	r2, [r4, #0]
 80084ca:	1b52      	subs	r2, r2, r5
 80084cc:	d420      	bmi.n	8008510 <_malloc_r+0xd0>
 80084ce:	2a0b      	cmp	r2, #11
 80084d0:	d917      	bls.n	8008502 <_malloc_r+0xc2>
 80084d2:	1961      	adds	r1, r4, r5
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	6025      	str	r5, [r4, #0]
 80084d8:	bf18      	it	ne
 80084da:	6059      	strne	r1, [r3, #4]
 80084dc:	6863      	ldr	r3, [r4, #4]
 80084de:	bf08      	it	eq
 80084e0:	f8c8 1000 	streq.w	r1, [r8]
 80084e4:	5162      	str	r2, [r4, r5]
 80084e6:	604b      	str	r3, [r1, #4]
 80084e8:	4630      	mov	r0, r6
 80084ea:	f000 f82f 	bl	800854c <__malloc_unlock>
 80084ee:	f104 000b 	add.w	r0, r4, #11
 80084f2:	1d23      	adds	r3, r4, #4
 80084f4:	f020 0007 	bic.w	r0, r0, #7
 80084f8:	1ac2      	subs	r2, r0, r3
 80084fa:	bf1c      	itt	ne
 80084fc:	1a1b      	subne	r3, r3, r0
 80084fe:	50a3      	strne	r3, [r4, r2]
 8008500:	e7af      	b.n	8008462 <_malloc_r+0x22>
 8008502:	6862      	ldr	r2, [r4, #4]
 8008504:	42a3      	cmp	r3, r4
 8008506:	bf0c      	ite	eq
 8008508:	f8c8 2000 	streq.w	r2, [r8]
 800850c:	605a      	strne	r2, [r3, #4]
 800850e:	e7eb      	b.n	80084e8 <_malloc_r+0xa8>
 8008510:	4623      	mov	r3, r4
 8008512:	6864      	ldr	r4, [r4, #4]
 8008514:	e7ae      	b.n	8008474 <_malloc_r+0x34>
 8008516:	463c      	mov	r4, r7
 8008518:	687f      	ldr	r7, [r7, #4]
 800851a:	e7b6      	b.n	800848a <_malloc_r+0x4a>
 800851c:	461a      	mov	r2, r3
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	42a3      	cmp	r3, r4
 8008522:	d1fb      	bne.n	800851c <_malloc_r+0xdc>
 8008524:	2300      	movs	r3, #0
 8008526:	6053      	str	r3, [r2, #4]
 8008528:	e7de      	b.n	80084e8 <_malloc_r+0xa8>
 800852a:	230c      	movs	r3, #12
 800852c:	6033      	str	r3, [r6, #0]
 800852e:	4630      	mov	r0, r6
 8008530:	f000 f80c 	bl	800854c <__malloc_unlock>
 8008534:	e794      	b.n	8008460 <_malloc_r+0x20>
 8008536:	6005      	str	r5, [r0, #0]
 8008538:	e7d6      	b.n	80084e8 <_malloc_r+0xa8>
 800853a:	bf00      	nop
 800853c:	20000b0c 	.word	0x20000b0c

08008540 <__malloc_lock>:
 8008540:	4801      	ldr	r0, [pc, #4]	@ (8008548 <__malloc_lock+0x8>)
 8008542:	f7ff b8b2 	b.w	80076aa <__retarget_lock_acquire_recursive>
 8008546:	bf00      	nop
 8008548:	20000b04 	.word	0x20000b04

0800854c <__malloc_unlock>:
 800854c:	4801      	ldr	r0, [pc, #4]	@ (8008554 <__malloc_unlock+0x8>)
 800854e:	f7ff b8ad 	b.w	80076ac <__retarget_lock_release_recursive>
 8008552:	bf00      	nop
 8008554:	20000b04 	.word	0x20000b04

08008558 <_Balloc>:
 8008558:	b570      	push	{r4, r5, r6, lr}
 800855a:	69c6      	ldr	r6, [r0, #28]
 800855c:	4604      	mov	r4, r0
 800855e:	460d      	mov	r5, r1
 8008560:	b976      	cbnz	r6, 8008580 <_Balloc+0x28>
 8008562:	2010      	movs	r0, #16
 8008564:	f7ff ff42 	bl	80083ec <malloc>
 8008568:	4602      	mov	r2, r0
 800856a:	61e0      	str	r0, [r4, #28]
 800856c:	b920      	cbnz	r0, 8008578 <_Balloc+0x20>
 800856e:	4b18      	ldr	r3, [pc, #96]	@ (80085d0 <_Balloc+0x78>)
 8008570:	4818      	ldr	r0, [pc, #96]	@ (80085d4 <_Balloc+0x7c>)
 8008572:	216b      	movs	r1, #107	@ 0x6b
 8008574:	f001 fd7c 	bl	800a070 <__assert_func>
 8008578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800857c:	6006      	str	r6, [r0, #0]
 800857e:	60c6      	str	r6, [r0, #12]
 8008580:	69e6      	ldr	r6, [r4, #28]
 8008582:	68f3      	ldr	r3, [r6, #12]
 8008584:	b183      	cbz	r3, 80085a8 <_Balloc+0x50>
 8008586:	69e3      	ldr	r3, [r4, #28]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800858e:	b9b8      	cbnz	r0, 80085c0 <_Balloc+0x68>
 8008590:	2101      	movs	r1, #1
 8008592:	fa01 f605 	lsl.w	r6, r1, r5
 8008596:	1d72      	adds	r2, r6, #5
 8008598:	0092      	lsls	r2, r2, #2
 800859a:	4620      	mov	r0, r4
 800859c:	f001 fd86 	bl	800a0ac <_calloc_r>
 80085a0:	b160      	cbz	r0, 80085bc <_Balloc+0x64>
 80085a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085a6:	e00e      	b.n	80085c6 <_Balloc+0x6e>
 80085a8:	2221      	movs	r2, #33	@ 0x21
 80085aa:	2104      	movs	r1, #4
 80085ac:	4620      	mov	r0, r4
 80085ae:	f001 fd7d 	bl	800a0ac <_calloc_r>
 80085b2:	69e3      	ldr	r3, [r4, #28]
 80085b4:	60f0      	str	r0, [r6, #12]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1e4      	bne.n	8008586 <_Balloc+0x2e>
 80085bc:	2000      	movs	r0, #0
 80085be:	bd70      	pop	{r4, r5, r6, pc}
 80085c0:	6802      	ldr	r2, [r0, #0]
 80085c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085c6:	2300      	movs	r3, #0
 80085c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085cc:	e7f7      	b.n	80085be <_Balloc+0x66>
 80085ce:	bf00      	nop
 80085d0:	0800ae66 	.word	0x0800ae66
 80085d4:	0800aee6 	.word	0x0800aee6

080085d8 <_Bfree>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	69c6      	ldr	r6, [r0, #28]
 80085dc:	4605      	mov	r5, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	b976      	cbnz	r6, 8008600 <_Bfree+0x28>
 80085e2:	2010      	movs	r0, #16
 80085e4:	f7ff ff02 	bl	80083ec <malloc>
 80085e8:	4602      	mov	r2, r0
 80085ea:	61e8      	str	r0, [r5, #28]
 80085ec:	b920      	cbnz	r0, 80085f8 <_Bfree+0x20>
 80085ee:	4b09      	ldr	r3, [pc, #36]	@ (8008614 <_Bfree+0x3c>)
 80085f0:	4809      	ldr	r0, [pc, #36]	@ (8008618 <_Bfree+0x40>)
 80085f2:	218f      	movs	r1, #143	@ 0x8f
 80085f4:	f001 fd3c 	bl	800a070 <__assert_func>
 80085f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085fc:	6006      	str	r6, [r0, #0]
 80085fe:	60c6      	str	r6, [r0, #12]
 8008600:	b13c      	cbz	r4, 8008612 <_Bfree+0x3a>
 8008602:	69eb      	ldr	r3, [r5, #28]
 8008604:	6862      	ldr	r2, [r4, #4]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800860c:	6021      	str	r1, [r4, #0]
 800860e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	0800ae66 	.word	0x0800ae66
 8008618:	0800aee6 	.word	0x0800aee6

0800861c <__multadd>:
 800861c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008620:	690d      	ldr	r5, [r1, #16]
 8008622:	4607      	mov	r7, r0
 8008624:	460c      	mov	r4, r1
 8008626:	461e      	mov	r6, r3
 8008628:	f101 0c14 	add.w	ip, r1, #20
 800862c:	2000      	movs	r0, #0
 800862e:	f8dc 3000 	ldr.w	r3, [ip]
 8008632:	b299      	uxth	r1, r3
 8008634:	fb02 6101 	mla	r1, r2, r1, r6
 8008638:	0c1e      	lsrs	r6, r3, #16
 800863a:	0c0b      	lsrs	r3, r1, #16
 800863c:	fb02 3306 	mla	r3, r2, r6, r3
 8008640:	b289      	uxth	r1, r1
 8008642:	3001      	adds	r0, #1
 8008644:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008648:	4285      	cmp	r5, r0
 800864a:	f84c 1b04 	str.w	r1, [ip], #4
 800864e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008652:	dcec      	bgt.n	800862e <__multadd+0x12>
 8008654:	b30e      	cbz	r6, 800869a <__multadd+0x7e>
 8008656:	68a3      	ldr	r3, [r4, #8]
 8008658:	42ab      	cmp	r3, r5
 800865a:	dc19      	bgt.n	8008690 <__multadd+0x74>
 800865c:	6861      	ldr	r1, [r4, #4]
 800865e:	4638      	mov	r0, r7
 8008660:	3101      	adds	r1, #1
 8008662:	f7ff ff79 	bl	8008558 <_Balloc>
 8008666:	4680      	mov	r8, r0
 8008668:	b928      	cbnz	r0, 8008676 <__multadd+0x5a>
 800866a:	4602      	mov	r2, r0
 800866c:	4b0c      	ldr	r3, [pc, #48]	@ (80086a0 <__multadd+0x84>)
 800866e:	480d      	ldr	r0, [pc, #52]	@ (80086a4 <__multadd+0x88>)
 8008670:	21ba      	movs	r1, #186	@ 0xba
 8008672:	f001 fcfd 	bl	800a070 <__assert_func>
 8008676:	6922      	ldr	r2, [r4, #16]
 8008678:	3202      	adds	r2, #2
 800867a:	f104 010c 	add.w	r1, r4, #12
 800867e:	0092      	lsls	r2, r2, #2
 8008680:	300c      	adds	r0, #12
 8008682:	f001 fcdf 	bl	800a044 <memcpy>
 8008686:	4621      	mov	r1, r4
 8008688:	4638      	mov	r0, r7
 800868a:	f7ff ffa5 	bl	80085d8 <_Bfree>
 800868e:	4644      	mov	r4, r8
 8008690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008694:	3501      	adds	r5, #1
 8008696:	615e      	str	r6, [r3, #20]
 8008698:	6125      	str	r5, [r4, #16]
 800869a:	4620      	mov	r0, r4
 800869c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a0:	0800aed5 	.word	0x0800aed5
 80086a4:	0800aee6 	.word	0x0800aee6

080086a8 <__s2b>:
 80086a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086ac:	460c      	mov	r4, r1
 80086ae:	4615      	mov	r5, r2
 80086b0:	461f      	mov	r7, r3
 80086b2:	2209      	movs	r2, #9
 80086b4:	3308      	adds	r3, #8
 80086b6:	4606      	mov	r6, r0
 80086b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80086bc:	2100      	movs	r1, #0
 80086be:	2201      	movs	r2, #1
 80086c0:	429a      	cmp	r2, r3
 80086c2:	db09      	blt.n	80086d8 <__s2b+0x30>
 80086c4:	4630      	mov	r0, r6
 80086c6:	f7ff ff47 	bl	8008558 <_Balloc>
 80086ca:	b940      	cbnz	r0, 80086de <__s2b+0x36>
 80086cc:	4602      	mov	r2, r0
 80086ce:	4b19      	ldr	r3, [pc, #100]	@ (8008734 <__s2b+0x8c>)
 80086d0:	4819      	ldr	r0, [pc, #100]	@ (8008738 <__s2b+0x90>)
 80086d2:	21d3      	movs	r1, #211	@ 0xd3
 80086d4:	f001 fccc 	bl	800a070 <__assert_func>
 80086d8:	0052      	lsls	r2, r2, #1
 80086da:	3101      	adds	r1, #1
 80086dc:	e7f0      	b.n	80086c0 <__s2b+0x18>
 80086de:	9b08      	ldr	r3, [sp, #32]
 80086e0:	6143      	str	r3, [r0, #20]
 80086e2:	2d09      	cmp	r5, #9
 80086e4:	f04f 0301 	mov.w	r3, #1
 80086e8:	6103      	str	r3, [r0, #16]
 80086ea:	dd16      	ble.n	800871a <__s2b+0x72>
 80086ec:	f104 0909 	add.w	r9, r4, #9
 80086f0:	46c8      	mov	r8, r9
 80086f2:	442c      	add	r4, r5
 80086f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80086f8:	4601      	mov	r1, r0
 80086fa:	3b30      	subs	r3, #48	@ 0x30
 80086fc:	220a      	movs	r2, #10
 80086fe:	4630      	mov	r0, r6
 8008700:	f7ff ff8c 	bl	800861c <__multadd>
 8008704:	45a0      	cmp	r8, r4
 8008706:	d1f5      	bne.n	80086f4 <__s2b+0x4c>
 8008708:	f1a5 0408 	sub.w	r4, r5, #8
 800870c:	444c      	add	r4, r9
 800870e:	1b2d      	subs	r5, r5, r4
 8008710:	1963      	adds	r3, r4, r5
 8008712:	42bb      	cmp	r3, r7
 8008714:	db04      	blt.n	8008720 <__s2b+0x78>
 8008716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800871a:	340a      	adds	r4, #10
 800871c:	2509      	movs	r5, #9
 800871e:	e7f6      	b.n	800870e <__s2b+0x66>
 8008720:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008724:	4601      	mov	r1, r0
 8008726:	3b30      	subs	r3, #48	@ 0x30
 8008728:	220a      	movs	r2, #10
 800872a:	4630      	mov	r0, r6
 800872c:	f7ff ff76 	bl	800861c <__multadd>
 8008730:	e7ee      	b.n	8008710 <__s2b+0x68>
 8008732:	bf00      	nop
 8008734:	0800aed5 	.word	0x0800aed5
 8008738:	0800aee6 	.word	0x0800aee6

0800873c <__hi0bits>:
 800873c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008740:	4603      	mov	r3, r0
 8008742:	bf36      	itet	cc
 8008744:	0403      	lslcc	r3, r0, #16
 8008746:	2000      	movcs	r0, #0
 8008748:	2010      	movcc	r0, #16
 800874a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800874e:	bf3c      	itt	cc
 8008750:	021b      	lslcc	r3, r3, #8
 8008752:	3008      	addcc	r0, #8
 8008754:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008758:	bf3c      	itt	cc
 800875a:	011b      	lslcc	r3, r3, #4
 800875c:	3004      	addcc	r0, #4
 800875e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008762:	bf3c      	itt	cc
 8008764:	009b      	lslcc	r3, r3, #2
 8008766:	3002      	addcc	r0, #2
 8008768:	2b00      	cmp	r3, #0
 800876a:	db05      	blt.n	8008778 <__hi0bits+0x3c>
 800876c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008770:	f100 0001 	add.w	r0, r0, #1
 8008774:	bf08      	it	eq
 8008776:	2020      	moveq	r0, #32
 8008778:	4770      	bx	lr

0800877a <__lo0bits>:
 800877a:	6803      	ldr	r3, [r0, #0]
 800877c:	4602      	mov	r2, r0
 800877e:	f013 0007 	ands.w	r0, r3, #7
 8008782:	d00b      	beq.n	800879c <__lo0bits+0x22>
 8008784:	07d9      	lsls	r1, r3, #31
 8008786:	d421      	bmi.n	80087cc <__lo0bits+0x52>
 8008788:	0798      	lsls	r0, r3, #30
 800878a:	bf49      	itett	mi
 800878c:	085b      	lsrmi	r3, r3, #1
 800878e:	089b      	lsrpl	r3, r3, #2
 8008790:	2001      	movmi	r0, #1
 8008792:	6013      	strmi	r3, [r2, #0]
 8008794:	bf5c      	itt	pl
 8008796:	6013      	strpl	r3, [r2, #0]
 8008798:	2002      	movpl	r0, #2
 800879a:	4770      	bx	lr
 800879c:	b299      	uxth	r1, r3
 800879e:	b909      	cbnz	r1, 80087a4 <__lo0bits+0x2a>
 80087a0:	0c1b      	lsrs	r3, r3, #16
 80087a2:	2010      	movs	r0, #16
 80087a4:	b2d9      	uxtb	r1, r3
 80087a6:	b909      	cbnz	r1, 80087ac <__lo0bits+0x32>
 80087a8:	3008      	adds	r0, #8
 80087aa:	0a1b      	lsrs	r3, r3, #8
 80087ac:	0719      	lsls	r1, r3, #28
 80087ae:	bf04      	itt	eq
 80087b0:	091b      	lsreq	r3, r3, #4
 80087b2:	3004      	addeq	r0, #4
 80087b4:	0799      	lsls	r1, r3, #30
 80087b6:	bf04      	itt	eq
 80087b8:	089b      	lsreq	r3, r3, #2
 80087ba:	3002      	addeq	r0, #2
 80087bc:	07d9      	lsls	r1, r3, #31
 80087be:	d403      	bmi.n	80087c8 <__lo0bits+0x4e>
 80087c0:	085b      	lsrs	r3, r3, #1
 80087c2:	f100 0001 	add.w	r0, r0, #1
 80087c6:	d003      	beq.n	80087d0 <__lo0bits+0x56>
 80087c8:	6013      	str	r3, [r2, #0]
 80087ca:	4770      	bx	lr
 80087cc:	2000      	movs	r0, #0
 80087ce:	4770      	bx	lr
 80087d0:	2020      	movs	r0, #32
 80087d2:	4770      	bx	lr

080087d4 <__i2b>:
 80087d4:	b510      	push	{r4, lr}
 80087d6:	460c      	mov	r4, r1
 80087d8:	2101      	movs	r1, #1
 80087da:	f7ff febd 	bl	8008558 <_Balloc>
 80087de:	4602      	mov	r2, r0
 80087e0:	b928      	cbnz	r0, 80087ee <__i2b+0x1a>
 80087e2:	4b05      	ldr	r3, [pc, #20]	@ (80087f8 <__i2b+0x24>)
 80087e4:	4805      	ldr	r0, [pc, #20]	@ (80087fc <__i2b+0x28>)
 80087e6:	f240 1145 	movw	r1, #325	@ 0x145
 80087ea:	f001 fc41 	bl	800a070 <__assert_func>
 80087ee:	2301      	movs	r3, #1
 80087f0:	6144      	str	r4, [r0, #20]
 80087f2:	6103      	str	r3, [r0, #16]
 80087f4:	bd10      	pop	{r4, pc}
 80087f6:	bf00      	nop
 80087f8:	0800aed5 	.word	0x0800aed5
 80087fc:	0800aee6 	.word	0x0800aee6

08008800 <__multiply>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	4614      	mov	r4, r2
 8008806:	690a      	ldr	r2, [r1, #16]
 8008808:	6923      	ldr	r3, [r4, #16]
 800880a:	429a      	cmp	r2, r3
 800880c:	bfa8      	it	ge
 800880e:	4623      	movge	r3, r4
 8008810:	460f      	mov	r7, r1
 8008812:	bfa4      	itt	ge
 8008814:	460c      	movge	r4, r1
 8008816:	461f      	movge	r7, r3
 8008818:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800881c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008820:	68a3      	ldr	r3, [r4, #8]
 8008822:	6861      	ldr	r1, [r4, #4]
 8008824:	eb0a 0609 	add.w	r6, sl, r9
 8008828:	42b3      	cmp	r3, r6
 800882a:	b085      	sub	sp, #20
 800882c:	bfb8      	it	lt
 800882e:	3101      	addlt	r1, #1
 8008830:	f7ff fe92 	bl	8008558 <_Balloc>
 8008834:	b930      	cbnz	r0, 8008844 <__multiply+0x44>
 8008836:	4602      	mov	r2, r0
 8008838:	4b44      	ldr	r3, [pc, #272]	@ (800894c <__multiply+0x14c>)
 800883a:	4845      	ldr	r0, [pc, #276]	@ (8008950 <__multiply+0x150>)
 800883c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008840:	f001 fc16 	bl	800a070 <__assert_func>
 8008844:	f100 0514 	add.w	r5, r0, #20
 8008848:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800884c:	462b      	mov	r3, r5
 800884e:	2200      	movs	r2, #0
 8008850:	4543      	cmp	r3, r8
 8008852:	d321      	bcc.n	8008898 <__multiply+0x98>
 8008854:	f107 0114 	add.w	r1, r7, #20
 8008858:	f104 0214 	add.w	r2, r4, #20
 800885c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008860:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008864:	9302      	str	r3, [sp, #8]
 8008866:	1b13      	subs	r3, r2, r4
 8008868:	3b15      	subs	r3, #21
 800886a:	f023 0303 	bic.w	r3, r3, #3
 800886e:	3304      	adds	r3, #4
 8008870:	f104 0715 	add.w	r7, r4, #21
 8008874:	42ba      	cmp	r2, r7
 8008876:	bf38      	it	cc
 8008878:	2304      	movcc	r3, #4
 800887a:	9301      	str	r3, [sp, #4]
 800887c:	9b02      	ldr	r3, [sp, #8]
 800887e:	9103      	str	r1, [sp, #12]
 8008880:	428b      	cmp	r3, r1
 8008882:	d80c      	bhi.n	800889e <__multiply+0x9e>
 8008884:	2e00      	cmp	r6, #0
 8008886:	dd03      	ble.n	8008890 <__multiply+0x90>
 8008888:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800888c:	2b00      	cmp	r3, #0
 800888e:	d05b      	beq.n	8008948 <__multiply+0x148>
 8008890:	6106      	str	r6, [r0, #16]
 8008892:	b005      	add	sp, #20
 8008894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008898:	f843 2b04 	str.w	r2, [r3], #4
 800889c:	e7d8      	b.n	8008850 <__multiply+0x50>
 800889e:	f8b1 a000 	ldrh.w	sl, [r1]
 80088a2:	f1ba 0f00 	cmp.w	sl, #0
 80088a6:	d024      	beq.n	80088f2 <__multiply+0xf2>
 80088a8:	f104 0e14 	add.w	lr, r4, #20
 80088ac:	46a9      	mov	r9, r5
 80088ae:	f04f 0c00 	mov.w	ip, #0
 80088b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80088b6:	f8d9 3000 	ldr.w	r3, [r9]
 80088ba:	fa1f fb87 	uxth.w	fp, r7
 80088be:	b29b      	uxth	r3, r3
 80088c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80088c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80088c8:	f8d9 7000 	ldr.w	r7, [r9]
 80088cc:	4463      	add	r3, ip
 80088ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088d2:	fb0a c70b 	mla	r7, sl, fp, ip
 80088d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80088da:	b29b      	uxth	r3, r3
 80088dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088e0:	4572      	cmp	r2, lr
 80088e2:	f849 3b04 	str.w	r3, [r9], #4
 80088e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80088ea:	d8e2      	bhi.n	80088b2 <__multiply+0xb2>
 80088ec:	9b01      	ldr	r3, [sp, #4]
 80088ee:	f845 c003 	str.w	ip, [r5, r3]
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80088f8:	3104      	adds	r1, #4
 80088fa:	f1b9 0f00 	cmp.w	r9, #0
 80088fe:	d021      	beq.n	8008944 <__multiply+0x144>
 8008900:	682b      	ldr	r3, [r5, #0]
 8008902:	f104 0c14 	add.w	ip, r4, #20
 8008906:	46ae      	mov	lr, r5
 8008908:	f04f 0a00 	mov.w	sl, #0
 800890c:	f8bc b000 	ldrh.w	fp, [ip]
 8008910:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008914:	fb09 770b 	mla	r7, r9, fp, r7
 8008918:	4457      	add	r7, sl
 800891a:	b29b      	uxth	r3, r3
 800891c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008920:	f84e 3b04 	str.w	r3, [lr], #4
 8008924:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008928:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800892c:	f8be 3000 	ldrh.w	r3, [lr]
 8008930:	fb09 330a 	mla	r3, r9, sl, r3
 8008934:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008938:	4562      	cmp	r2, ip
 800893a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800893e:	d8e5      	bhi.n	800890c <__multiply+0x10c>
 8008940:	9f01      	ldr	r7, [sp, #4]
 8008942:	51eb      	str	r3, [r5, r7]
 8008944:	3504      	adds	r5, #4
 8008946:	e799      	b.n	800887c <__multiply+0x7c>
 8008948:	3e01      	subs	r6, #1
 800894a:	e79b      	b.n	8008884 <__multiply+0x84>
 800894c:	0800aed5 	.word	0x0800aed5
 8008950:	0800aee6 	.word	0x0800aee6

08008954 <__pow5mult>:
 8008954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008958:	4615      	mov	r5, r2
 800895a:	f012 0203 	ands.w	r2, r2, #3
 800895e:	4607      	mov	r7, r0
 8008960:	460e      	mov	r6, r1
 8008962:	d007      	beq.n	8008974 <__pow5mult+0x20>
 8008964:	4c25      	ldr	r4, [pc, #148]	@ (80089fc <__pow5mult+0xa8>)
 8008966:	3a01      	subs	r2, #1
 8008968:	2300      	movs	r3, #0
 800896a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800896e:	f7ff fe55 	bl	800861c <__multadd>
 8008972:	4606      	mov	r6, r0
 8008974:	10ad      	asrs	r5, r5, #2
 8008976:	d03d      	beq.n	80089f4 <__pow5mult+0xa0>
 8008978:	69fc      	ldr	r4, [r7, #28]
 800897a:	b97c      	cbnz	r4, 800899c <__pow5mult+0x48>
 800897c:	2010      	movs	r0, #16
 800897e:	f7ff fd35 	bl	80083ec <malloc>
 8008982:	4602      	mov	r2, r0
 8008984:	61f8      	str	r0, [r7, #28]
 8008986:	b928      	cbnz	r0, 8008994 <__pow5mult+0x40>
 8008988:	4b1d      	ldr	r3, [pc, #116]	@ (8008a00 <__pow5mult+0xac>)
 800898a:	481e      	ldr	r0, [pc, #120]	@ (8008a04 <__pow5mult+0xb0>)
 800898c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008990:	f001 fb6e 	bl	800a070 <__assert_func>
 8008994:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008998:	6004      	str	r4, [r0, #0]
 800899a:	60c4      	str	r4, [r0, #12]
 800899c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80089a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089a4:	b94c      	cbnz	r4, 80089ba <__pow5mult+0x66>
 80089a6:	f240 2171 	movw	r1, #625	@ 0x271
 80089aa:	4638      	mov	r0, r7
 80089ac:	f7ff ff12 	bl	80087d4 <__i2b>
 80089b0:	2300      	movs	r3, #0
 80089b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80089b6:	4604      	mov	r4, r0
 80089b8:	6003      	str	r3, [r0, #0]
 80089ba:	f04f 0900 	mov.w	r9, #0
 80089be:	07eb      	lsls	r3, r5, #31
 80089c0:	d50a      	bpl.n	80089d8 <__pow5mult+0x84>
 80089c2:	4631      	mov	r1, r6
 80089c4:	4622      	mov	r2, r4
 80089c6:	4638      	mov	r0, r7
 80089c8:	f7ff ff1a 	bl	8008800 <__multiply>
 80089cc:	4631      	mov	r1, r6
 80089ce:	4680      	mov	r8, r0
 80089d0:	4638      	mov	r0, r7
 80089d2:	f7ff fe01 	bl	80085d8 <_Bfree>
 80089d6:	4646      	mov	r6, r8
 80089d8:	106d      	asrs	r5, r5, #1
 80089da:	d00b      	beq.n	80089f4 <__pow5mult+0xa0>
 80089dc:	6820      	ldr	r0, [r4, #0]
 80089de:	b938      	cbnz	r0, 80089f0 <__pow5mult+0x9c>
 80089e0:	4622      	mov	r2, r4
 80089e2:	4621      	mov	r1, r4
 80089e4:	4638      	mov	r0, r7
 80089e6:	f7ff ff0b 	bl	8008800 <__multiply>
 80089ea:	6020      	str	r0, [r4, #0]
 80089ec:	f8c0 9000 	str.w	r9, [r0]
 80089f0:	4604      	mov	r4, r0
 80089f2:	e7e4      	b.n	80089be <__pow5mult+0x6a>
 80089f4:	4630      	mov	r0, r6
 80089f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fa:	bf00      	nop
 80089fc:	0800af40 	.word	0x0800af40
 8008a00:	0800ae66 	.word	0x0800ae66
 8008a04:	0800aee6 	.word	0x0800aee6

08008a08 <__lshift>:
 8008a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	6849      	ldr	r1, [r1, #4]
 8008a10:	6923      	ldr	r3, [r4, #16]
 8008a12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a16:	68a3      	ldr	r3, [r4, #8]
 8008a18:	4607      	mov	r7, r0
 8008a1a:	4691      	mov	r9, r2
 8008a1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a20:	f108 0601 	add.w	r6, r8, #1
 8008a24:	42b3      	cmp	r3, r6
 8008a26:	db0b      	blt.n	8008a40 <__lshift+0x38>
 8008a28:	4638      	mov	r0, r7
 8008a2a:	f7ff fd95 	bl	8008558 <_Balloc>
 8008a2e:	4605      	mov	r5, r0
 8008a30:	b948      	cbnz	r0, 8008a46 <__lshift+0x3e>
 8008a32:	4602      	mov	r2, r0
 8008a34:	4b28      	ldr	r3, [pc, #160]	@ (8008ad8 <__lshift+0xd0>)
 8008a36:	4829      	ldr	r0, [pc, #164]	@ (8008adc <__lshift+0xd4>)
 8008a38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008a3c:	f001 fb18 	bl	800a070 <__assert_func>
 8008a40:	3101      	adds	r1, #1
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	e7ee      	b.n	8008a24 <__lshift+0x1c>
 8008a46:	2300      	movs	r3, #0
 8008a48:	f100 0114 	add.w	r1, r0, #20
 8008a4c:	f100 0210 	add.w	r2, r0, #16
 8008a50:	4618      	mov	r0, r3
 8008a52:	4553      	cmp	r3, sl
 8008a54:	db33      	blt.n	8008abe <__lshift+0xb6>
 8008a56:	6920      	ldr	r0, [r4, #16]
 8008a58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a5c:	f104 0314 	add.w	r3, r4, #20
 8008a60:	f019 091f 	ands.w	r9, r9, #31
 8008a64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a6c:	d02b      	beq.n	8008ac6 <__lshift+0xbe>
 8008a6e:	f1c9 0e20 	rsb	lr, r9, #32
 8008a72:	468a      	mov	sl, r1
 8008a74:	2200      	movs	r2, #0
 8008a76:	6818      	ldr	r0, [r3, #0]
 8008a78:	fa00 f009 	lsl.w	r0, r0, r9
 8008a7c:	4310      	orrs	r0, r2
 8008a7e:	f84a 0b04 	str.w	r0, [sl], #4
 8008a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a86:	459c      	cmp	ip, r3
 8008a88:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a8c:	d8f3      	bhi.n	8008a76 <__lshift+0x6e>
 8008a8e:	ebac 0304 	sub.w	r3, ip, r4
 8008a92:	3b15      	subs	r3, #21
 8008a94:	f023 0303 	bic.w	r3, r3, #3
 8008a98:	3304      	adds	r3, #4
 8008a9a:	f104 0015 	add.w	r0, r4, #21
 8008a9e:	4584      	cmp	ip, r0
 8008aa0:	bf38      	it	cc
 8008aa2:	2304      	movcc	r3, #4
 8008aa4:	50ca      	str	r2, [r1, r3]
 8008aa6:	b10a      	cbz	r2, 8008aac <__lshift+0xa4>
 8008aa8:	f108 0602 	add.w	r6, r8, #2
 8008aac:	3e01      	subs	r6, #1
 8008aae:	4638      	mov	r0, r7
 8008ab0:	612e      	str	r6, [r5, #16]
 8008ab2:	4621      	mov	r1, r4
 8008ab4:	f7ff fd90 	bl	80085d8 <_Bfree>
 8008ab8:	4628      	mov	r0, r5
 8008aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008abe:	f842 0f04 	str.w	r0, [r2, #4]!
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	e7c5      	b.n	8008a52 <__lshift+0x4a>
 8008ac6:	3904      	subs	r1, #4
 8008ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008acc:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ad0:	459c      	cmp	ip, r3
 8008ad2:	d8f9      	bhi.n	8008ac8 <__lshift+0xc0>
 8008ad4:	e7ea      	b.n	8008aac <__lshift+0xa4>
 8008ad6:	bf00      	nop
 8008ad8:	0800aed5 	.word	0x0800aed5
 8008adc:	0800aee6 	.word	0x0800aee6

08008ae0 <__mcmp>:
 8008ae0:	690a      	ldr	r2, [r1, #16]
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	6900      	ldr	r0, [r0, #16]
 8008ae6:	1a80      	subs	r0, r0, r2
 8008ae8:	b530      	push	{r4, r5, lr}
 8008aea:	d10e      	bne.n	8008b0a <__mcmp+0x2a>
 8008aec:	3314      	adds	r3, #20
 8008aee:	3114      	adds	r1, #20
 8008af0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008af4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008af8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008afc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008b00:	4295      	cmp	r5, r2
 8008b02:	d003      	beq.n	8008b0c <__mcmp+0x2c>
 8008b04:	d205      	bcs.n	8008b12 <__mcmp+0x32>
 8008b06:	f04f 30ff 	mov.w	r0, #4294967295
 8008b0a:	bd30      	pop	{r4, r5, pc}
 8008b0c:	42a3      	cmp	r3, r4
 8008b0e:	d3f3      	bcc.n	8008af8 <__mcmp+0x18>
 8008b10:	e7fb      	b.n	8008b0a <__mcmp+0x2a>
 8008b12:	2001      	movs	r0, #1
 8008b14:	e7f9      	b.n	8008b0a <__mcmp+0x2a>
	...

08008b18 <__mdiff>:
 8008b18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b1c:	4689      	mov	r9, r1
 8008b1e:	4606      	mov	r6, r0
 8008b20:	4611      	mov	r1, r2
 8008b22:	4648      	mov	r0, r9
 8008b24:	4614      	mov	r4, r2
 8008b26:	f7ff ffdb 	bl	8008ae0 <__mcmp>
 8008b2a:	1e05      	subs	r5, r0, #0
 8008b2c:	d112      	bne.n	8008b54 <__mdiff+0x3c>
 8008b2e:	4629      	mov	r1, r5
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7ff fd11 	bl	8008558 <_Balloc>
 8008b36:	4602      	mov	r2, r0
 8008b38:	b928      	cbnz	r0, 8008b46 <__mdiff+0x2e>
 8008b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8008c38 <__mdiff+0x120>)
 8008b3c:	f240 2137 	movw	r1, #567	@ 0x237
 8008b40:	483e      	ldr	r0, [pc, #248]	@ (8008c3c <__mdiff+0x124>)
 8008b42:	f001 fa95 	bl	800a070 <__assert_func>
 8008b46:	2301      	movs	r3, #1
 8008b48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	b003      	add	sp, #12
 8008b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b54:	bfbc      	itt	lt
 8008b56:	464b      	movlt	r3, r9
 8008b58:	46a1      	movlt	r9, r4
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008b60:	bfba      	itte	lt
 8008b62:	461c      	movlt	r4, r3
 8008b64:	2501      	movlt	r5, #1
 8008b66:	2500      	movge	r5, #0
 8008b68:	f7ff fcf6 	bl	8008558 <_Balloc>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	b918      	cbnz	r0, 8008b78 <__mdiff+0x60>
 8008b70:	4b31      	ldr	r3, [pc, #196]	@ (8008c38 <__mdiff+0x120>)
 8008b72:	f240 2145 	movw	r1, #581	@ 0x245
 8008b76:	e7e3      	b.n	8008b40 <__mdiff+0x28>
 8008b78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b7c:	6926      	ldr	r6, [r4, #16]
 8008b7e:	60c5      	str	r5, [r0, #12]
 8008b80:	f109 0310 	add.w	r3, r9, #16
 8008b84:	f109 0514 	add.w	r5, r9, #20
 8008b88:	f104 0e14 	add.w	lr, r4, #20
 8008b8c:	f100 0b14 	add.w	fp, r0, #20
 8008b90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	46d9      	mov	r9, fp
 8008b9c:	f04f 0c00 	mov.w	ip, #0
 8008ba0:	9b01      	ldr	r3, [sp, #4]
 8008ba2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008ba6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008baa:	9301      	str	r3, [sp, #4]
 8008bac:	fa1f f38a 	uxth.w	r3, sl
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	b283      	uxth	r3, r0
 8008bb4:	1acb      	subs	r3, r1, r3
 8008bb6:	0c00      	lsrs	r0, r0, #16
 8008bb8:	4463      	add	r3, ip
 8008bba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008bbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008bc8:	4576      	cmp	r6, lr
 8008bca:	f849 3b04 	str.w	r3, [r9], #4
 8008bce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bd2:	d8e5      	bhi.n	8008ba0 <__mdiff+0x88>
 8008bd4:	1b33      	subs	r3, r6, r4
 8008bd6:	3b15      	subs	r3, #21
 8008bd8:	f023 0303 	bic.w	r3, r3, #3
 8008bdc:	3415      	adds	r4, #21
 8008bde:	3304      	adds	r3, #4
 8008be0:	42a6      	cmp	r6, r4
 8008be2:	bf38      	it	cc
 8008be4:	2304      	movcc	r3, #4
 8008be6:	441d      	add	r5, r3
 8008be8:	445b      	add	r3, fp
 8008bea:	461e      	mov	r6, r3
 8008bec:	462c      	mov	r4, r5
 8008bee:	4544      	cmp	r4, r8
 8008bf0:	d30e      	bcc.n	8008c10 <__mdiff+0xf8>
 8008bf2:	f108 0103 	add.w	r1, r8, #3
 8008bf6:	1b49      	subs	r1, r1, r5
 8008bf8:	f021 0103 	bic.w	r1, r1, #3
 8008bfc:	3d03      	subs	r5, #3
 8008bfe:	45a8      	cmp	r8, r5
 8008c00:	bf38      	it	cc
 8008c02:	2100      	movcc	r1, #0
 8008c04:	440b      	add	r3, r1
 8008c06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c0a:	b191      	cbz	r1, 8008c32 <__mdiff+0x11a>
 8008c0c:	6117      	str	r7, [r2, #16]
 8008c0e:	e79d      	b.n	8008b4c <__mdiff+0x34>
 8008c10:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c14:	46e6      	mov	lr, ip
 8008c16:	0c08      	lsrs	r0, r1, #16
 8008c18:	fa1c fc81 	uxtah	ip, ip, r1
 8008c1c:	4471      	add	r1, lr
 8008c1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008c22:	b289      	uxth	r1, r1
 8008c24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008c28:	f846 1b04 	str.w	r1, [r6], #4
 8008c2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c30:	e7dd      	b.n	8008bee <__mdiff+0xd6>
 8008c32:	3f01      	subs	r7, #1
 8008c34:	e7e7      	b.n	8008c06 <__mdiff+0xee>
 8008c36:	bf00      	nop
 8008c38:	0800aed5 	.word	0x0800aed5
 8008c3c:	0800aee6 	.word	0x0800aee6

08008c40 <__ulp>:
 8008c40:	b082      	sub	sp, #8
 8008c42:	ed8d 0b00 	vstr	d0, [sp]
 8008c46:	9a01      	ldr	r2, [sp, #4]
 8008c48:	4b0f      	ldr	r3, [pc, #60]	@ (8008c88 <__ulp+0x48>)
 8008c4a:	4013      	ands	r3, r2
 8008c4c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	dc08      	bgt.n	8008c66 <__ulp+0x26>
 8008c54:	425b      	negs	r3, r3
 8008c56:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008c5a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008c5e:	da04      	bge.n	8008c6a <__ulp+0x2a>
 8008c60:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008c64:	4113      	asrs	r3, r2
 8008c66:	2200      	movs	r2, #0
 8008c68:	e008      	b.n	8008c7c <__ulp+0x3c>
 8008c6a:	f1a2 0314 	sub.w	r3, r2, #20
 8008c6e:	2b1e      	cmp	r3, #30
 8008c70:	bfda      	itte	le
 8008c72:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008c76:	40da      	lsrle	r2, r3
 8008c78:	2201      	movgt	r2, #1
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4610      	mov	r0, r2
 8008c80:	ec41 0b10 	vmov	d0, r0, r1
 8008c84:	b002      	add	sp, #8
 8008c86:	4770      	bx	lr
 8008c88:	7ff00000 	.word	0x7ff00000

08008c8c <__b2d>:
 8008c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c90:	6906      	ldr	r6, [r0, #16]
 8008c92:	f100 0814 	add.w	r8, r0, #20
 8008c96:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008c9a:	1f37      	subs	r7, r6, #4
 8008c9c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	f7ff fd4b 	bl	800873c <__hi0bits>
 8008ca6:	f1c0 0320 	rsb	r3, r0, #32
 8008caa:	280a      	cmp	r0, #10
 8008cac:	600b      	str	r3, [r1, #0]
 8008cae:	491b      	ldr	r1, [pc, #108]	@ (8008d1c <__b2d+0x90>)
 8008cb0:	dc15      	bgt.n	8008cde <__b2d+0x52>
 8008cb2:	f1c0 0c0b 	rsb	ip, r0, #11
 8008cb6:	fa22 f30c 	lsr.w	r3, r2, ip
 8008cba:	45b8      	cmp	r8, r7
 8008cbc:	ea43 0501 	orr.w	r5, r3, r1
 8008cc0:	bf34      	ite	cc
 8008cc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008cc6:	2300      	movcs	r3, #0
 8008cc8:	3015      	adds	r0, #21
 8008cca:	fa02 f000 	lsl.w	r0, r2, r0
 8008cce:	fa23 f30c 	lsr.w	r3, r3, ip
 8008cd2:	4303      	orrs	r3, r0
 8008cd4:	461c      	mov	r4, r3
 8008cd6:	ec45 4b10 	vmov	d0, r4, r5
 8008cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cde:	45b8      	cmp	r8, r7
 8008ce0:	bf3a      	itte	cc
 8008ce2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ce6:	f1a6 0708 	subcc.w	r7, r6, #8
 8008cea:	2300      	movcs	r3, #0
 8008cec:	380b      	subs	r0, #11
 8008cee:	d012      	beq.n	8008d16 <__b2d+0x8a>
 8008cf0:	f1c0 0120 	rsb	r1, r0, #32
 8008cf4:	fa23 f401 	lsr.w	r4, r3, r1
 8008cf8:	4082      	lsls	r2, r0
 8008cfa:	4322      	orrs	r2, r4
 8008cfc:	4547      	cmp	r7, r8
 8008cfe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008d02:	bf8c      	ite	hi
 8008d04:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008d08:	2200      	movls	r2, #0
 8008d0a:	4083      	lsls	r3, r0
 8008d0c:	40ca      	lsrs	r2, r1
 8008d0e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008d12:	4313      	orrs	r3, r2
 8008d14:	e7de      	b.n	8008cd4 <__b2d+0x48>
 8008d16:	ea42 0501 	orr.w	r5, r2, r1
 8008d1a:	e7db      	b.n	8008cd4 <__b2d+0x48>
 8008d1c:	3ff00000 	.word	0x3ff00000

08008d20 <__d2b>:
 8008d20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d24:	460f      	mov	r7, r1
 8008d26:	2101      	movs	r1, #1
 8008d28:	ec59 8b10 	vmov	r8, r9, d0
 8008d2c:	4616      	mov	r6, r2
 8008d2e:	f7ff fc13 	bl	8008558 <_Balloc>
 8008d32:	4604      	mov	r4, r0
 8008d34:	b930      	cbnz	r0, 8008d44 <__d2b+0x24>
 8008d36:	4602      	mov	r2, r0
 8008d38:	4b23      	ldr	r3, [pc, #140]	@ (8008dc8 <__d2b+0xa8>)
 8008d3a:	4824      	ldr	r0, [pc, #144]	@ (8008dcc <__d2b+0xac>)
 8008d3c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008d40:	f001 f996 	bl	800a070 <__assert_func>
 8008d44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008d48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d4c:	b10d      	cbz	r5, 8008d52 <__d2b+0x32>
 8008d4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	f1b8 0300 	subs.w	r3, r8, #0
 8008d58:	d023      	beq.n	8008da2 <__d2b+0x82>
 8008d5a:	4668      	mov	r0, sp
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	f7ff fd0c 	bl	800877a <__lo0bits>
 8008d62:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008d66:	b1d0      	cbz	r0, 8008d9e <__d2b+0x7e>
 8008d68:	f1c0 0320 	rsb	r3, r0, #32
 8008d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d70:	430b      	orrs	r3, r1
 8008d72:	40c2      	lsrs	r2, r0
 8008d74:	6163      	str	r3, [r4, #20]
 8008d76:	9201      	str	r2, [sp, #4]
 8008d78:	9b01      	ldr	r3, [sp, #4]
 8008d7a:	61a3      	str	r3, [r4, #24]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	bf0c      	ite	eq
 8008d80:	2201      	moveq	r2, #1
 8008d82:	2202      	movne	r2, #2
 8008d84:	6122      	str	r2, [r4, #16]
 8008d86:	b1a5      	cbz	r5, 8008db2 <__d2b+0x92>
 8008d88:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008d8c:	4405      	add	r5, r0
 8008d8e:	603d      	str	r5, [r7, #0]
 8008d90:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008d94:	6030      	str	r0, [r6, #0]
 8008d96:	4620      	mov	r0, r4
 8008d98:	b003      	add	sp, #12
 8008d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d9e:	6161      	str	r1, [r4, #20]
 8008da0:	e7ea      	b.n	8008d78 <__d2b+0x58>
 8008da2:	a801      	add	r0, sp, #4
 8008da4:	f7ff fce9 	bl	800877a <__lo0bits>
 8008da8:	9b01      	ldr	r3, [sp, #4]
 8008daa:	6163      	str	r3, [r4, #20]
 8008dac:	3020      	adds	r0, #32
 8008dae:	2201      	movs	r2, #1
 8008db0:	e7e8      	b.n	8008d84 <__d2b+0x64>
 8008db2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008db6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008dba:	6038      	str	r0, [r7, #0]
 8008dbc:	6918      	ldr	r0, [r3, #16]
 8008dbe:	f7ff fcbd 	bl	800873c <__hi0bits>
 8008dc2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008dc6:	e7e5      	b.n	8008d94 <__d2b+0x74>
 8008dc8:	0800aed5 	.word	0x0800aed5
 8008dcc:	0800aee6 	.word	0x0800aee6

08008dd0 <__ratio>:
 8008dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	e9cd 1000 	strd	r1, r0, [sp]
 8008dda:	a902      	add	r1, sp, #8
 8008ddc:	f7ff ff56 	bl	8008c8c <__b2d>
 8008de0:	9800      	ldr	r0, [sp, #0]
 8008de2:	a903      	add	r1, sp, #12
 8008de4:	ec55 4b10 	vmov	r4, r5, d0
 8008de8:	f7ff ff50 	bl	8008c8c <__b2d>
 8008dec:	9b01      	ldr	r3, [sp, #4]
 8008dee:	6919      	ldr	r1, [r3, #16]
 8008df0:	9b00      	ldr	r3, [sp, #0]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	1ac9      	subs	r1, r1, r3
 8008df6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008dfa:	1a9b      	subs	r3, r3, r2
 8008dfc:	ec5b ab10 	vmov	sl, fp, d0
 8008e00:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	bfce      	itee	gt
 8008e08:	462a      	movgt	r2, r5
 8008e0a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e0e:	465a      	movle	r2, fp
 8008e10:	462f      	mov	r7, r5
 8008e12:	46d9      	mov	r9, fp
 8008e14:	bfcc      	ite	gt
 8008e16:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e1a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008e1e:	464b      	mov	r3, r9
 8008e20:	4652      	mov	r2, sl
 8008e22:	4620      	mov	r0, r4
 8008e24:	4639      	mov	r1, r7
 8008e26:	f7f7 fd11 	bl	800084c <__aeabi_ddiv>
 8008e2a:	ec41 0b10 	vmov	d0, r0, r1
 8008e2e:	b005      	add	sp, #20
 8008e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e34 <__copybits>:
 8008e34:	3901      	subs	r1, #1
 8008e36:	b570      	push	{r4, r5, r6, lr}
 8008e38:	1149      	asrs	r1, r1, #5
 8008e3a:	6914      	ldr	r4, [r2, #16]
 8008e3c:	3101      	adds	r1, #1
 8008e3e:	f102 0314 	add.w	r3, r2, #20
 8008e42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008e4a:	1f05      	subs	r5, r0, #4
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	d30c      	bcc.n	8008e6a <__copybits+0x36>
 8008e50:	1aa3      	subs	r3, r4, r2
 8008e52:	3b11      	subs	r3, #17
 8008e54:	f023 0303 	bic.w	r3, r3, #3
 8008e58:	3211      	adds	r2, #17
 8008e5a:	42a2      	cmp	r2, r4
 8008e5c:	bf88      	it	hi
 8008e5e:	2300      	movhi	r3, #0
 8008e60:	4418      	add	r0, r3
 8008e62:	2300      	movs	r3, #0
 8008e64:	4288      	cmp	r0, r1
 8008e66:	d305      	bcc.n	8008e74 <__copybits+0x40>
 8008e68:	bd70      	pop	{r4, r5, r6, pc}
 8008e6a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008e6e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008e72:	e7eb      	b.n	8008e4c <__copybits+0x18>
 8008e74:	f840 3b04 	str.w	r3, [r0], #4
 8008e78:	e7f4      	b.n	8008e64 <__copybits+0x30>

08008e7a <__any_on>:
 8008e7a:	f100 0214 	add.w	r2, r0, #20
 8008e7e:	6900      	ldr	r0, [r0, #16]
 8008e80:	114b      	asrs	r3, r1, #5
 8008e82:	4298      	cmp	r0, r3
 8008e84:	b510      	push	{r4, lr}
 8008e86:	db11      	blt.n	8008eac <__any_on+0x32>
 8008e88:	dd0a      	ble.n	8008ea0 <__any_on+0x26>
 8008e8a:	f011 011f 	ands.w	r1, r1, #31
 8008e8e:	d007      	beq.n	8008ea0 <__any_on+0x26>
 8008e90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e94:	fa24 f001 	lsr.w	r0, r4, r1
 8008e98:	fa00 f101 	lsl.w	r1, r0, r1
 8008e9c:	428c      	cmp	r4, r1
 8008e9e:	d10b      	bne.n	8008eb8 <__any_on+0x3e>
 8008ea0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d803      	bhi.n	8008eb0 <__any_on+0x36>
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	bd10      	pop	{r4, pc}
 8008eac:	4603      	mov	r3, r0
 8008eae:	e7f7      	b.n	8008ea0 <__any_on+0x26>
 8008eb0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008eb4:	2900      	cmp	r1, #0
 8008eb6:	d0f5      	beq.n	8008ea4 <__any_on+0x2a>
 8008eb8:	2001      	movs	r0, #1
 8008eba:	e7f6      	b.n	8008eaa <__any_on+0x30>

08008ebc <sulp>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	460d      	mov	r5, r1
 8008ec2:	ec45 4b10 	vmov	d0, r4, r5
 8008ec6:	4616      	mov	r6, r2
 8008ec8:	f7ff feba 	bl	8008c40 <__ulp>
 8008ecc:	ec51 0b10 	vmov	r0, r1, d0
 8008ed0:	b17e      	cbz	r6, 8008ef2 <sulp+0x36>
 8008ed2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ed6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	dd09      	ble.n	8008ef2 <sulp+0x36>
 8008ede:	051b      	lsls	r3, r3, #20
 8008ee0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008ee4:	2400      	movs	r4, #0
 8008ee6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008eea:	4622      	mov	r2, r4
 8008eec:	462b      	mov	r3, r5
 8008eee:	f7f7 fb83 	bl	80005f8 <__aeabi_dmul>
 8008ef2:	ec41 0b10 	vmov	d0, r0, r1
 8008ef6:	bd70      	pop	{r4, r5, r6, pc}

08008ef8 <_strtod_l>:
 8008ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008efc:	b09f      	sub	sp, #124	@ 0x7c
 8008efe:	460c      	mov	r4, r1
 8008f00:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008f02:	2200      	movs	r2, #0
 8008f04:	921a      	str	r2, [sp, #104]	@ 0x68
 8008f06:	9005      	str	r0, [sp, #20]
 8008f08:	f04f 0a00 	mov.w	sl, #0
 8008f0c:	f04f 0b00 	mov.w	fp, #0
 8008f10:	460a      	mov	r2, r1
 8008f12:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f14:	7811      	ldrb	r1, [r2, #0]
 8008f16:	292b      	cmp	r1, #43	@ 0x2b
 8008f18:	d04a      	beq.n	8008fb0 <_strtod_l+0xb8>
 8008f1a:	d838      	bhi.n	8008f8e <_strtod_l+0x96>
 8008f1c:	290d      	cmp	r1, #13
 8008f1e:	d832      	bhi.n	8008f86 <_strtod_l+0x8e>
 8008f20:	2908      	cmp	r1, #8
 8008f22:	d832      	bhi.n	8008f8a <_strtod_l+0x92>
 8008f24:	2900      	cmp	r1, #0
 8008f26:	d03b      	beq.n	8008fa0 <_strtod_l+0xa8>
 8008f28:	2200      	movs	r2, #0
 8008f2a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008f2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008f2e:	782a      	ldrb	r2, [r5, #0]
 8008f30:	2a30      	cmp	r2, #48	@ 0x30
 8008f32:	f040 80b3 	bne.w	800909c <_strtod_l+0x1a4>
 8008f36:	786a      	ldrb	r2, [r5, #1]
 8008f38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008f3c:	2a58      	cmp	r2, #88	@ 0x58
 8008f3e:	d16e      	bne.n	800901e <_strtod_l+0x126>
 8008f40:	9302      	str	r3, [sp, #8]
 8008f42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f44:	9301      	str	r3, [sp, #4]
 8008f46:	ab1a      	add	r3, sp, #104	@ 0x68
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	4a8e      	ldr	r2, [pc, #568]	@ (8009184 <_strtod_l+0x28c>)
 8008f4c:	9805      	ldr	r0, [sp, #20]
 8008f4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008f50:	a919      	add	r1, sp, #100	@ 0x64
 8008f52:	f001 f927 	bl	800a1a4 <__gethex>
 8008f56:	f010 060f 	ands.w	r6, r0, #15
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	d005      	beq.n	8008f6a <_strtod_l+0x72>
 8008f5e:	2e06      	cmp	r6, #6
 8008f60:	d128      	bne.n	8008fb4 <_strtod_l+0xbc>
 8008f62:	3501      	adds	r5, #1
 8008f64:	2300      	movs	r3, #0
 8008f66:	9519      	str	r5, [sp, #100]	@ 0x64
 8008f68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f040 858e 	bne.w	8009a8e <_strtod_l+0xb96>
 8008f72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f74:	b1cb      	cbz	r3, 8008faa <_strtod_l+0xb2>
 8008f76:	4652      	mov	r2, sl
 8008f78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008f7c:	ec43 2b10 	vmov	d0, r2, r3
 8008f80:	b01f      	add	sp, #124	@ 0x7c
 8008f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f86:	2920      	cmp	r1, #32
 8008f88:	d1ce      	bne.n	8008f28 <_strtod_l+0x30>
 8008f8a:	3201      	adds	r2, #1
 8008f8c:	e7c1      	b.n	8008f12 <_strtod_l+0x1a>
 8008f8e:	292d      	cmp	r1, #45	@ 0x2d
 8008f90:	d1ca      	bne.n	8008f28 <_strtod_l+0x30>
 8008f92:	2101      	movs	r1, #1
 8008f94:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008f96:	1c51      	adds	r1, r2, #1
 8008f98:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f9a:	7852      	ldrb	r2, [r2, #1]
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	d1c5      	bne.n	8008f2c <_strtod_l+0x34>
 8008fa0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008fa2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	f040 8570 	bne.w	8009a8a <_strtod_l+0xb92>
 8008faa:	4652      	mov	r2, sl
 8008fac:	465b      	mov	r3, fp
 8008fae:	e7e5      	b.n	8008f7c <_strtod_l+0x84>
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	e7ef      	b.n	8008f94 <_strtod_l+0x9c>
 8008fb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008fb6:	b13a      	cbz	r2, 8008fc8 <_strtod_l+0xd0>
 8008fb8:	2135      	movs	r1, #53	@ 0x35
 8008fba:	a81c      	add	r0, sp, #112	@ 0x70
 8008fbc:	f7ff ff3a 	bl	8008e34 <__copybits>
 8008fc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fc2:	9805      	ldr	r0, [sp, #20]
 8008fc4:	f7ff fb08 	bl	80085d8 <_Bfree>
 8008fc8:	3e01      	subs	r6, #1
 8008fca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008fcc:	2e04      	cmp	r6, #4
 8008fce:	d806      	bhi.n	8008fde <_strtod_l+0xe6>
 8008fd0:	e8df f006 	tbb	[pc, r6]
 8008fd4:	201d0314 	.word	0x201d0314
 8008fd8:	14          	.byte	0x14
 8008fd9:	00          	.byte	0x00
 8008fda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008fde:	05e1      	lsls	r1, r4, #23
 8008fe0:	bf48      	it	mi
 8008fe2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008fe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008fea:	0d1b      	lsrs	r3, r3, #20
 8008fec:	051b      	lsls	r3, r3, #20
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1bb      	bne.n	8008f6a <_strtod_l+0x72>
 8008ff2:	f7fe fb2f 	bl	8007654 <__errno>
 8008ff6:	2322      	movs	r3, #34	@ 0x22
 8008ff8:	6003      	str	r3, [r0, #0]
 8008ffa:	e7b6      	b.n	8008f6a <_strtod_l+0x72>
 8008ffc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009000:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009004:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009008:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800900c:	e7e7      	b.n	8008fde <_strtod_l+0xe6>
 800900e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800918c <_strtod_l+0x294>
 8009012:	e7e4      	b.n	8008fde <_strtod_l+0xe6>
 8009014:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009018:	f04f 3aff 	mov.w	sl, #4294967295
 800901c:	e7df      	b.n	8008fde <_strtod_l+0xe6>
 800901e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009020:	1c5a      	adds	r2, r3, #1
 8009022:	9219      	str	r2, [sp, #100]	@ 0x64
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	2b30      	cmp	r3, #48	@ 0x30
 8009028:	d0f9      	beq.n	800901e <_strtod_l+0x126>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d09d      	beq.n	8008f6a <_strtod_l+0x72>
 800902e:	2301      	movs	r3, #1
 8009030:	9309      	str	r3, [sp, #36]	@ 0x24
 8009032:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009034:	930c      	str	r3, [sp, #48]	@ 0x30
 8009036:	2300      	movs	r3, #0
 8009038:	9308      	str	r3, [sp, #32]
 800903a:	930a      	str	r3, [sp, #40]	@ 0x28
 800903c:	461f      	mov	r7, r3
 800903e:	220a      	movs	r2, #10
 8009040:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009042:	7805      	ldrb	r5, [r0, #0]
 8009044:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009048:	b2d9      	uxtb	r1, r3
 800904a:	2909      	cmp	r1, #9
 800904c:	d928      	bls.n	80090a0 <_strtod_l+0x1a8>
 800904e:	494e      	ldr	r1, [pc, #312]	@ (8009188 <_strtod_l+0x290>)
 8009050:	2201      	movs	r2, #1
 8009052:	f000 ffd5 	bl	800a000 <strncmp>
 8009056:	2800      	cmp	r0, #0
 8009058:	d032      	beq.n	80090c0 <_strtod_l+0x1c8>
 800905a:	2000      	movs	r0, #0
 800905c:	462a      	mov	r2, r5
 800905e:	4681      	mov	r9, r0
 8009060:	463d      	mov	r5, r7
 8009062:	4603      	mov	r3, r0
 8009064:	2a65      	cmp	r2, #101	@ 0x65
 8009066:	d001      	beq.n	800906c <_strtod_l+0x174>
 8009068:	2a45      	cmp	r2, #69	@ 0x45
 800906a:	d114      	bne.n	8009096 <_strtod_l+0x19e>
 800906c:	b91d      	cbnz	r5, 8009076 <_strtod_l+0x17e>
 800906e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009070:	4302      	orrs	r2, r0
 8009072:	d095      	beq.n	8008fa0 <_strtod_l+0xa8>
 8009074:	2500      	movs	r5, #0
 8009076:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009078:	1c62      	adds	r2, r4, #1
 800907a:	9219      	str	r2, [sp, #100]	@ 0x64
 800907c:	7862      	ldrb	r2, [r4, #1]
 800907e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009080:	d077      	beq.n	8009172 <_strtod_l+0x27a>
 8009082:	2a2d      	cmp	r2, #45	@ 0x2d
 8009084:	d07b      	beq.n	800917e <_strtod_l+0x286>
 8009086:	f04f 0c00 	mov.w	ip, #0
 800908a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800908e:	2909      	cmp	r1, #9
 8009090:	f240 8082 	bls.w	8009198 <_strtod_l+0x2a0>
 8009094:	9419      	str	r4, [sp, #100]	@ 0x64
 8009096:	f04f 0800 	mov.w	r8, #0
 800909a:	e0a2      	b.n	80091e2 <_strtod_l+0x2ea>
 800909c:	2300      	movs	r3, #0
 800909e:	e7c7      	b.n	8009030 <_strtod_l+0x138>
 80090a0:	2f08      	cmp	r7, #8
 80090a2:	bfd5      	itete	le
 80090a4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80090a6:	9908      	ldrgt	r1, [sp, #32]
 80090a8:	fb02 3301 	mlale	r3, r2, r1, r3
 80090ac:	fb02 3301 	mlagt	r3, r2, r1, r3
 80090b0:	f100 0001 	add.w	r0, r0, #1
 80090b4:	bfd4      	ite	le
 80090b6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80090b8:	9308      	strgt	r3, [sp, #32]
 80090ba:	3701      	adds	r7, #1
 80090bc:	9019      	str	r0, [sp, #100]	@ 0x64
 80090be:	e7bf      	b.n	8009040 <_strtod_l+0x148>
 80090c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80090c6:	785a      	ldrb	r2, [r3, #1]
 80090c8:	b37f      	cbz	r7, 800912a <_strtod_l+0x232>
 80090ca:	4681      	mov	r9, r0
 80090cc:	463d      	mov	r5, r7
 80090ce:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80090d2:	2b09      	cmp	r3, #9
 80090d4:	d912      	bls.n	80090fc <_strtod_l+0x204>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e7c4      	b.n	8009064 <_strtod_l+0x16c>
 80090da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090dc:	1c5a      	adds	r2, r3, #1
 80090de:	9219      	str	r2, [sp, #100]	@ 0x64
 80090e0:	785a      	ldrb	r2, [r3, #1]
 80090e2:	3001      	adds	r0, #1
 80090e4:	2a30      	cmp	r2, #48	@ 0x30
 80090e6:	d0f8      	beq.n	80090da <_strtod_l+0x1e2>
 80090e8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80090ec:	2b08      	cmp	r3, #8
 80090ee:	f200 84d3 	bhi.w	8009a98 <_strtod_l+0xba0>
 80090f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80090f6:	4681      	mov	r9, r0
 80090f8:	2000      	movs	r0, #0
 80090fa:	4605      	mov	r5, r0
 80090fc:	3a30      	subs	r2, #48	@ 0x30
 80090fe:	f100 0301 	add.w	r3, r0, #1
 8009102:	d02a      	beq.n	800915a <_strtod_l+0x262>
 8009104:	4499      	add	r9, r3
 8009106:	eb00 0c05 	add.w	ip, r0, r5
 800910a:	462b      	mov	r3, r5
 800910c:	210a      	movs	r1, #10
 800910e:	4563      	cmp	r3, ip
 8009110:	d10d      	bne.n	800912e <_strtod_l+0x236>
 8009112:	1c69      	adds	r1, r5, #1
 8009114:	4401      	add	r1, r0
 8009116:	4428      	add	r0, r5
 8009118:	2808      	cmp	r0, #8
 800911a:	dc16      	bgt.n	800914a <_strtod_l+0x252>
 800911c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800911e:	230a      	movs	r3, #10
 8009120:	fb03 2300 	mla	r3, r3, r0, r2
 8009124:	930a      	str	r3, [sp, #40]	@ 0x28
 8009126:	2300      	movs	r3, #0
 8009128:	e018      	b.n	800915c <_strtod_l+0x264>
 800912a:	4638      	mov	r0, r7
 800912c:	e7da      	b.n	80090e4 <_strtod_l+0x1ec>
 800912e:	2b08      	cmp	r3, #8
 8009130:	f103 0301 	add.w	r3, r3, #1
 8009134:	dc03      	bgt.n	800913e <_strtod_l+0x246>
 8009136:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009138:	434e      	muls	r6, r1
 800913a:	960a      	str	r6, [sp, #40]	@ 0x28
 800913c:	e7e7      	b.n	800910e <_strtod_l+0x216>
 800913e:	2b10      	cmp	r3, #16
 8009140:	bfde      	ittt	le
 8009142:	9e08      	ldrle	r6, [sp, #32]
 8009144:	434e      	mulle	r6, r1
 8009146:	9608      	strle	r6, [sp, #32]
 8009148:	e7e1      	b.n	800910e <_strtod_l+0x216>
 800914a:	280f      	cmp	r0, #15
 800914c:	dceb      	bgt.n	8009126 <_strtod_l+0x22e>
 800914e:	9808      	ldr	r0, [sp, #32]
 8009150:	230a      	movs	r3, #10
 8009152:	fb03 2300 	mla	r3, r3, r0, r2
 8009156:	9308      	str	r3, [sp, #32]
 8009158:	e7e5      	b.n	8009126 <_strtod_l+0x22e>
 800915a:	4629      	mov	r1, r5
 800915c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800915e:	1c50      	adds	r0, r2, #1
 8009160:	9019      	str	r0, [sp, #100]	@ 0x64
 8009162:	7852      	ldrb	r2, [r2, #1]
 8009164:	4618      	mov	r0, r3
 8009166:	460d      	mov	r5, r1
 8009168:	e7b1      	b.n	80090ce <_strtod_l+0x1d6>
 800916a:	f04f 0900 	mov.w	r9, #0
 800916e:	2301      	movs	r3, #1
 8009170:	e77d      	b.n	800906e <_strtod_l+0x176>
 8009172:	f04f 0c00 	mov.w	ip, #0
 8009176:	1ca2      	adds	r2, r4, #2
 8009178:	9219      	str	r2, [sp, #100]	@ 0x64
 800917a:	78a2      	ldrb	r2, [r4, #2]
 800917c:	e785      	b.n	800908a <_strtod_l+0x192>
 800917e:	f04f 0c01 	mov.w	ip, #1
 8009182:	e7f8      	b.n	8009176 <_strtod_l+0x27e>
 8009184:	0800b058 	.word	0x0800b058
 8009188:	0800b040 	.word	0x0800b040
 800918c:	7ff00000 	.word	0x7ff00000
 8009190:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009192:	1c51      	adds	r1, r2, #1
 8009194:	9119      	str	r1, [sp, #100]	@ 0x64
 8009196:	7852      	ldrb	r2, [r2, #1]
 8009198:	2a30      	cmp	r2, #48	@ 0x30
 800919a:	d0f9      	beq.n	8009190 <_strtod_l+0x298>
 800919c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80091a0:	2908      	cmp	r1, #8
 80091a2:	f63f af78 	bhi.w	8009096 <_strtod_l+0x19e>
 80091a6:	3a30      	subs	r2, #48	@ 0x30
 80091a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80091aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091ac:	920f      	str	r2, [sp, #60]	@ 0x3c
 80091ae:	f04f 080a 	mov.w	r8, #10
 80091b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80091b4:	1c56      	adds	r6, r2, #1
 80091b6:	9619      	str	r6, [sp, #100]	@ 0x64
 80091b8:	7852      	ldrb	r2, [r2, #1]
 80091ba:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80091be:	f1be 0f09 	cmp.w	lr, #9
 80091c2:	d939      	bls.n	8009238 <_strtod_l+0x340>
 80091c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80091c6:	1a76      	subs	r6, r6, r1
 80091c8:	2e08      	cmp	r6, #8
 80091ca:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80091ce:	dc03      	bgt.n	80091d8 <_strtod_l+0x2e0>
 80091d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80091d2:	4588      	cmp	r8, r1
 80091d4:	bfa8      	it	ge
 80091d6:	4688      	movge	r8, r1
 80091d8:	f1bc 0f00 	cmp.w	ip, #0
 80091dc:	d001      	beq.n	80091e2 <_strtod_l+0x2ea>
 80091de:	f1c8 0800 	rsb	r8, r8, #0
 80091e2:	2d00      	cmp	r5, #0
 80091e4:	d14e      	bne.n	8009284 <_strtod_l+0x38c>
 80091e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091e8:	4308      	orrs	r0, r1
 80091ea:	f47f aebe 	bne.w	8008f6a <_strtod_l+0x72>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f47f aed6 	bne.w	8008fa0 <_strtod_l+0xa8>
 80091f4:	2a69      	cmp	r2, #105	@ 0x69
 80091f6:	d028      	beq.n	800924a <_strtod_l+0x352>
 80091f8:	dc25      	bgt.n	8009246 <_strtod_l+0x34e>
 80091fa:	2a49      	cmp	r2, #73	@ 0x49
 80091fc:	d025      	beq.n	800924a <_strtod_l+0x352>
 80091fe:	2a4e      	cmp	r2, #78	@ 0x4e
 8009200:	f47f aece 	bne.w	8008fa0 <_strtod_l+0xa8>
 8009204:	499b      	ldr	r1, [pc, #620]	@ (8009474 <_strtod_l+0x57c>)
 8009206:	a819      	add	r0, sp, #100	@ 0x64
 8009208:	f001 f9ee 	bl	800a5e8 <__match>
 800920c:	2800      	cmp	r0, #0
 800920e:	f43f aec7 	beq.w	8008fa0 <_strtod_l+0xa8>
 8009212:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b28      	cmp	r3, #40	@ 0x28
 8009218:	d12e      	bne.n	8009278 <_strtod_l+0x380>
 800921a:	4997      	ldr	r1, [pc, #604]	@ (8009478 <_strtod_l+0x580>)
 800921c:	aa1c      	add	r2, sp, #112	@ 0x70
 800921e:	a819      	add	r0, sp, #100	@ 0x64
 8009220:	f001 f9f6 	bl	800a610 <__hexnan>
 8009224:	2805      	cmp	r0, #5
 8009226:	d127      	bne.n	8009278 <_strtod_l+0x380>
 8009228:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800922a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800922e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009232:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009236:	e698      	b.n	8008f6a <_strtod_l+0x72>
 8009238:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800923a:	fb08 2101 	mla	r1, r8, r1, r2
 800923e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009242:	920e      	str	r2, [sp, #56]	@ 0x38
 8009244:	e7b5      	b.n	80091b2 <_strtod_l+0x2ba>
 8009246:	2a6e      	cmp	r2, #110	@ 0x6e
 8009248:	e7da      	b.n	8009200 <_strtod_l+0x308>
 800924a:	498c      	ldr	r1, [pc, #560]	@ (800947c <_strtod_l+0x584>)
 800924c:	a819      	add	r0, sp, #100	@ 0x64
 800924e:	f001 f9cb 	bl	800a5e8 <__match>
 8009252:	2800      	cmp	r0, #0
 8009254:	f43f aea4 	beq.w	8008fa0 <_strtod_l+0xa8>
 8009258:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800925a:	4989      	ldr	r1, [pc, #548]	@ (8009480 <_strtod_l+0x588>)
 800925c:	3b01      	subs	r3, #1
 800925e:	a819      	add	r0, sp, #100	@ 0x64
 8009260:	9319      	str	r3, [sp, #100]	@ 0x64
 8009262:	f001 f9c1 	bl	800a5e8 <__match>
 8009266:	b910      	cbnz	r0, 800926e <_strtod_l+0x376>
 8009268:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800926a:	3301      	adds	r3, #1
 800926c:	9319      	str	r3, [sp, #100]	@ 0x64
 800926e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009490 <_strtod_l+0x598>
 8009272:	f04f 0a00 	mov.w	sl, #0
 8009276:	e678      	b.n	8008f6a <_strtod_l+0x72>
 8009278:	4882      	ldr	r0, [pc, #520]	@ (8009484 <_strtod_l+0x58c>)
 800927a:	f000 fef1 	bl	800a060 <nan>
 800927e:	ec5b ab10 	vmov	sl, fp, d0
 8009282:	e672      	b.n	8008f6a <_strtod_l+0x72>
 8009284:	eba8 0309 	sub.w	r3, r8, r9
 8009288:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800928a:	9309      	str	r3, [sp, #36]	@ 0x24
 800928c:	2f00      	cmp	r7, #0
 800928e:	bf08      	it	eq
 8009290:	462f      	moveq	r7, r5
 8009292:	2d10      	cmp	r5, #16
 8009294:	462c      	mov	r4, r5
 8009296:	bfa8      	it	ge
 8009298:	2410      	movge	r4, #16
 800929a:	f7f7 f933 	bl	8000504 <__aeabi_ui2d>
 800929e:	2d09      	cmp	r5, #9
 80092a0:	4682      	mov	sl, r0
 80092a2:	468b      	mov	fp, r1
 80092a4:	dc13      	bgt.n	80092ce <_strtod_l+0x3d6>
 80092a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f43f ae5e 	beq.w	8008f6a <_strtod_l+0x72>
 80092ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092b0:	dd78      	ble.n	80093a4 <_strtod_l+0x4ac>
 80092b2:	2b16      	cmp	r3, #22
 80092b4:	dc5f      	bgt.n	8009376 <_strtod_l+0x47e>
 80092b6:	4974      	ldr	r1, [pc, #464]	@ (8009488 <_strtod_l+0x590>)
 80092b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80092bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092c0:	4652      	mov	r2, sl
 80092c2:	465b      	mov	r3, fp
 80092c4:	f7f7 f998 	bl	80005f8 <__aeabi_dmul>
 80092c8:	4682      	mov	sl, r0
 80092ca:	468b      	mov	fp, r1
 80092cc:	e64d      	b.n	8008f6a <_strtod_l+0x72>
 80092ce:	4b6e      	ldr	r3, [pc, #440]	@ (8009488 <_strtod_l+0x590>)
 80092d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80092d8:	f7f7 f98e 	bl	80005f8 <__aeabi_dmul>
 80092dc:	4682      	mov	sl, r0
 80092de:	9808      	ldr	r0, [sp, #32]
 80092e0:	468b      	mov	fp, r1
 80092e2:	f7f7 f90f 	bl	8000504 <__aeabi_ui2d>
 80092e6:	4602      	mov	r2, r0
 80092e8:	460b      	mov	r3, r1
 80092ea:	4650      	mov	r0, sl
 80092ec:	4659      	mov	r1, fp
 80092ee:	f7f6 ffcd 	bl	800028c <__adddf3>
 80092f2:	2d0f      	cmp	r5, #15
 80092f4:	4682      	mov	sl, r0
 80092f6:	468b      	mov	fp, r1
 80092f8:	ddd5      	ble.n	80092a6 <_strtod_l+0x3ae>
 80092fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092fc:	1b2c      	subs	r4, r5, r4
 80092fe:	441c      	add	r4, r3
 8009300:	2c00      	cmp	r4, #0
 8009302:	f340 8096 	ble.w	8009432 <_strtod_l+0x53a>
 8009306:	f014 030f 	ands.w	r3, r4, #15
 800930a:	d00a      	beq.n	8009322 <_strtod_l+0x42a>
 800930c:	495e      	ldr	r1, [pc, #376]	@ (8009488 <_strtod_l+0x590>)
 800930e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009312:	4652      	mov	r2, sl
 8009314:	465b      	mov	r3, fp
 8009316:	e9d1 0100 	ldrd	r0, r1, [r1]
 800931a:	f7f7 f96d 	bl	80005f8 <__aeabi_dmul>
 800931e:	4682      	mov	sl, r0
 8009320:	468b      	mov	fp, r1
 8009322:	f034 040f 	bics.w	r4, r4, #15
 8009326:	d073      	beq.n	8009410 <_strtod_l+0x518>
 8009328:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800932c:	dd48      	ble.n	80093c0 <_strtod_l+0x4c8>
 800932e:	2400      	movs	r4, #0
 8009330:	46a0      	mov	r8, r4
 8009332:	940a      	str	r4, [sp, #40]	@ 0x28
 8009334:	46a1      	mov	r9, r4
 8009336:	9a05      	ldr	r2, [sp, #20]
 8009338:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009490 <_strtod_l+0x598>
 800933c:	2322      	movs	r3, #34	@ 0x22
 800933e:	6013      	str	r3, [r2, #0]
 8009340:	f04f 0a00 	mov.w	sl, #0
 8009344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009346:	2b00      	cmp	r3, #0
 8009348:	f43f ae0f 	beq.w	8008f6a <_strtod_l+0x72>
 800934c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800934e:	9805      	ldr	r0, [sp, #20]
 8009350:	f7ff f942 	bl	80085d8 <_Bfree>
 8009354:	9805      	ldr	r0, [sp, #20]
 8009356:	4649      	mov	r1, r9
 8009358:	f7ff f93e 	bl	80085d8 <_Bfree>
 800935c:	9805      	ldr	r0, [sp, #20]
 800935e:	4641      	mov	r1, r8
 8009360:	f7ff f93a 	bl	80085d8 <_Bfree>
 8009364:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009366:	9805      	ldr	r0, [sp, #20]
 8009368:	f7ff f936 	bl	80085d8 <_Bfree>
 800936c:	9805      	ldr	r0, [sp, #20]
 800936e:	4621      	mov	r1, r4
 8009370:	f7ff f932 	bl	80085d8 <_Bfree>
 8009374:	e5f9      	b.n	8008f6a <_strtod_l+0x72>
 8009376:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009378:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800937c:	4293      	cmp	r3, r2
 800937e:	dbbc      	blt.n	80092fa <_strtod_l+0x402>
 8009380:	4c41      	ldr	r4, [pc, #260]	@ (8009488 <_strtod_l+0x590>)
 8009382:	f1c5 050f 	rsb	r5, r5, #15
 8009386:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800938a:	4652      	mov	r2, sl
 800938c:	465b      	mov	r3, fp
 800938e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009392:	f7f7 f931 	bl	80005f8 <__aeabi_dmul>
 8009396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009398:	1b5d      	subs	r5, r3, r5
 800939a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800939e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80093a2:	e78f      	b.n	80092c4 <_strtod_l+0x3cc>
 80093a4:	3316      	adds	r3, #22
 80093a6:	dba8      	blt.n	80092fa <_strtod_l+0x402>
 80093a8:	4b37      	ldr	r3, [pc, #220]	@ (8009488 <_strtod_l+0x590>)
 80093aa:	eba9 0808 	sub.w	r8, r9, r8
 80093ae:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80093b2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80093b6:	4650      	mov	r0, sl
 80093b8:	4659      	mov	r1, fp
 80093ba:	f7f7 fa47 	bl	800084c <__aeabi_ddiv>
 80093be:	e783      	b.n	80092c8 <_strtod_l+0x3d0>
 80093c0:	4b32      	ldr	r3, [pc, #200]	@ (800948c <_strtod_l+0x594>)
 80093c2:	9308      	str	r3, [sp, #32]
 80093c4:	2300      	movs	r3, #0
 80093c6:	1124      	asrs	r4, r4, #4
 80093c8:	4650      	mov	r0, sl
 80093ca:	4659      	mov	r1, fp
 80093cc:	461e      	mov	r6, r3
 80093ce:	2c01      	cmp	r4, #1
 80093d0:	dc21      	bgt.n	8009416 <_strtod_l+0x51e>
 80093d2:	b10b      	cbz	r3, 80093d8 <_strtod_l+0x4e0>
 80093d4:	4682      	mov	sl, r0
 80093d6:	468b      	mov	fp, r1
 80093d8:	492c      	ldr	r1, [pc, #176]	@ (800948c <_strtod_l+0x594>)
 80093da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80093de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80093e2:	4652      	mov	r2, sl
 80093e4:	465b      	mov	r3, fp
 80093e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093ea:	f7f7 f905 	bl	80005f8 <__aeabi_dmul>
 80093ee:	4b28      	ldr	r3, [pc, #160]	@ (8009490 <_strtod_l+0x598>)
 80093f0:	460a      	mov	r2, r1
 80093f2:	400b      	ands	r3, r1
 80093f4:	4927      	ldr	r1, [pc, #156]	@ (8009494 <_strtod_l+0x59c>)
 80093f6:	428b      	cmp	r3, r1
 80093f8:	4682      	mov	sl, r0
 80093fa:	d898      	bhi.n	800932e <_strtod_l+0x436>
 80093fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009400:	428b      	cmp	r3, r1
 8009402:	bf86      	itte	hi
 8009404:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009498 <_strtod_l+0x5a0>
 8009408:	f04f 3aff 	movhi.w	sl, #4294967295
 800940c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009410:	2300      	movs	r3, #0
 8009412:	9308      	str	r3, [sp, #32]
 8009414:	e07a      	b.n	800950c <_strtod_l+0x614>
 8009416:	07e2      	lsls	r2, r4, #31
 8009418:	d505      	bpl.n	8009426 <_strtod_l+0x52e>
 800941a:	9b08      	ldr	r3, [sp, #32]
 800941c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009420:	f7f7 f8ea 	bl	80005f8 <__aeabi_dmul>
 8009424:	2301      	movs	r3, #1
 8009426:	9a08      	ldr	r2, [sp, #32]
 8009428:	3208      	adds	r2, #8
 800942a:	3601      	adds	r6, #1
 800942c:	1064      	asrs	r4, r4, #1
 800942e:	9208      	str	r2, [sp, #32]
 8009430:	e7cd      	b.n	80093ce <_strtod_l+0x4d6>
 8009432:	d0ed      	beq.n	8009410 <_strtod_l+0x518>
 8009434:	4264      	negs	r4, r4
 8009436:	f014 020f 	ands.w	r2, r4, #15
 800943a:	d00a      	beq.n	8009452 <_strtod_l+0x55a>
 800943c:	4b12      	ldr	r3, [pc, #72]	@ (8009488 <_strtod_l+0x590>)
 800943e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009442:	4650      	mov	r0, sl
 8009444:	4659      	mov	r1, fp
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	f7f7 f9ff 	bl	800084c <__aeabi_ddiv>
 800944e:	4682      	mov	sl, r0
 8009450:	468b      	mov	fp, r1
 8009452:	1124      	asrs	r4, r4, #4
 8009454:	d0dc      	beq.n	8009410 <_strtod_l+0x518>
 8009456:	2c1f      	cmp	r4, #31
 8009458:	dd20      	ble.n	800949c <_strtod_l+0x5a4>
 800945a:	2400      	movs	r4, #0
 800945c:	46a0      	mov	r8, r4
 800945e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009460:	46a1      	mov	r9, r4
 8009462:	9a05      	ldr	r2, [sp, #20]
 8009464:	2322      	movs	r3, #34	@ 0x22
 8009466:	f04f 0a00 	mov.w	sl, #0
 800946a:	f04f 0b00 	mov.w	fp, #0
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	e768      	b.n	8009344 <_strtod_l+0x44c>
 8009472:	bf00      	nop
 8009474:	0800ae2d 	.word	0x0800ae2d
 8009478:	0800b044 	.word	0x0800b044
 800947c:	0800ae25 	.word	0x0800ae25
 8009480:	0800ae5c 	.word	0x0800ae5c
 8009484:	0800b1ed 	.word	0x0800b1ed
 8009488:	0800af78 	.word	0x0800af78
 800948c:	0800af50 	.word	0x0800af50
 8009490:	7ff00000 	.word	0x7ff00000
 8009494:	7ca00000 	.word	0x7ca00000
 8009498:	7fefffff 	.word	0x7fefffff
 800949c:	f014 0310 	ands.w	r3, r4, #16
 80094a0:	bf18      	it	ne
 80094a2:	236a      	movne	r3, #106	@ 0x6a
 80094a4:	4ea9      	ldr	r6, [pc, #676]	@ (800974c <_strtod_l+0x854>)
 80094a6:	9308      	str	r3, [sp, #32]
 80094a8:	4650      	mov	r0, sl
 80094aa:	4659      	mov	r1, fp
 80094ac:	2300      	movs	r3, #0
 80094ae:	07e2      	lsls	r2, r4, #31
 80094b0:	d504      	bpl.n	80094bc <_strtod_l+0x5c4>
 80094b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094b6:	f7f7 f89f 	bl	80005f8 <__aeabi_dmul>
 80094ba:	2301      	movs	r3, #1
 80094bc:	1064      	asrs	r4, r4, #1
 80094be:	f106 0608 	add.w	r6, r6, #8
 80094c2:	d1f4      	bne.n	80094ae <_strtod_l+0x5b6>
 80094c4:	b10b      	cbz	r3, 80094ca <_strtod_l+0x5d2>
 80094c6:	4682      	mov	sl, r0
 80094c8:	468b      	mov	fp, r1
 80094ca:	9b08      	ldr	r3, [sp, #32]
 80094cc:	b1b3      	cbz	r3, 80094fc <_strtod_l+0x604>
 80094ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80094d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	4659      	mov	r1, fp
 80094da:	dd0f      	ble.n	80094fc <_strtod_l+0x604>
 80094dc:	2b1f      	cmp	r3, #31
 80094de:	dd55      	ble.n	800958c <_strtod_l+0x694>
 80094e0:	2b34      	cmp	r3, #52	@ 0x34
 80094e2:	bfde      	ittt	le
 80094e4:	f04f 33ff 	movle.w	r3, #4294967295
 80094e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80094ec:	4093      	lslle	r3, r2
 80094ee:	f04f 0a00 	mov.w	sl, #0
 80094f2:	bfcc      	ite	gt
 80094f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80094f8:	ea03 0b01 	andle.w	fp, r3, r1
 80094fc:	2200      	movs	r2, #0
 80094fe:	2300      	movs	r3, #0
 8009500:	4650      	mov	r0, sl
 8009502:	4659      	mov	r1, fp
 8009504:	f7f7 fae0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009508:	2800      	cmp	r0, #0
 800950a:	d1a6      	bne.n	800945a <_strtod_l+0x562>
 800950c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009512:	9805      	ldr	r0, [sp, #20]
 8009514:	462b      	mov	r3, r5
 8009516:	463a      	mov	r2, r7
 8009518:	f7ff f8c6 	bl	80086a8 <__s2b>
 800951c:	900a      	str	r0, [sp, #40]	@ 0x28
 800951e:	2800      	cmp	r0, #0
 8009520:	f43f af05 	beq.w	800932e <_strtod_l+0x436>
 8009524:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009526:	2a00      	cmp	r2, #0
 8009528:	eba9 0308 	sub.w	r3, r9, r8
 800952c:	bfa8      	it	ge
 800952e:	2300      	movge	r3, #0
 8009530:	9312      	str	r3, [sp, #72]	@ 0x48
 8009532:	2400      	movs	r4, #0
 8009534:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009538:	9316      	str	r3, [sp, #88]	@ 0x58
 800953a:	46a0      	mov	r8, r4
 800953c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800953e:	9805      	ldr	r0, [sp, #20]
 8009540:	6859      	ldr	r1, [r3, #4]
 8009542:	f7ff f809 	bl	8008558 <_Balloc>
 8009546:	4681      	mov	r9, r0
 8009548:	2800      	cmp	r0, #0
 800954a:	f43f aef4 	beq.w	8009336 <_strtod_l+0x43e>
 800954e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	3202      	adds	r2, #2
 8009554:	f103 010c 	add.w	r1, r3, #12
 8009558:	0092      	lsls	r2, r2, #2
 800955a:	300c      	adds	r0, #12
 800955c:	f000 fd72 	bl	800a044 <memcpy>
 8009560:	ec4b ab10 	vmov	d0, sl, fp
 8009564:	9805      	ldr	r0, [sp, #20]
 8009566:	aa1c      	add	r2, sp, #112	@ 0x70
 8009568:	a91b      	add	r1, sp, #108	@ 0x6c
 800956a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800956e:	f7ff fbd7 	bl	8008d20 <__d2b>
 8009572:	901a      	str	r0, [sp, #104]	@ 0x68
 8009574:	2800      	cmp	r0, #0
 8009576:	f43f aede 	beq.w	8009336 <_strtod_l+0x43e>
 800957a:	9805      	ldr	r0, [sp, #20]
 800957c:	2101      	movs	r1, #1
 800957e:	f7ff f929 	bl	80087d4 <__i2b>
 8009582:	4680      	mov	r8, r0
 8009584:	b948      	cbnz	r0, 800959a <_strtod_l+0x6a2>
 8009586:	f04f 0800 	mov.w	r8, #0
 800958a:	e6d4      	b.n	8009336 <_strtod_l+0x43e>
 800958c:	f04f 32ff 	mov.w	r2, #4294967295
 8009590:	fa02 f303 	lsl.w	r3, r2, r3
 8009594:	ea03 0a0a 	and.w	sl, r3, sl
 8009598:	e7b0      	b.n	80094fc <_strtod_l+0x604>
 800959a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800959c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800959e:	2d00      	cmp	r5, #0
 80095a0:	bfab      	itete	ge
 80095a2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80095a4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80095a6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80095a8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80095aa:	bfac      	ite	ge
 80095ac:	18ef      	addge	r7, r5, r3
 80095ae:	1b5e      	sublt	r6, r3, r5
 80095b0:	9b08      	ldr	r3, [sp, #32]
 80095b2:	1aed      	subs	r5, r5, r3
 80095b4:	4415      	add	r5, r2
 80095b6:	4b66      	ldr	r3, [pc, #408]	@ (8009750 <_strtod_l+0x858>)
 80095b8:	3d01      	subs	r5, #1
 80095ba:	429d      	cmp	r5, r3
 80095bc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80095c0:	da50      	bge.n	8009664 <_strtod_l+0x76c>
 80095c2:	1b5b      	subs	r3, r3, r5
 80095c4:	2b1f      	cmp	r3, #31
 80095c6:	eba2 0203 	sub.w	r2, r2, r3
 80095ca:	f04f 0101 	mov.w	r1, #1
 80095ce:	dc3d      	bgt.n	800964c <_strtod_l+0x754>
 80095d0:	fa01 f303 	lsl.w	r3, r1, r3
 80095d4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095d6:	2300      	movs	r3, #0
 80095d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80095da:	18bd      	adds	r5, r7, r2
 80095dc:	9b08      	ldr	r3, [sp, #32]
 80095de:	42af      	cmp	r7, r5
 80095e0:	4416      	add	r6, r2
 80095e2:	441e      	add	r6, r3
 80095e4:	463b      	mov	r3, r7
 80095e6:	bfa8      	it	ge
 80095e8:	462b      	movge	r3, r5
 80095ea:	42b3      	cmp	r3, r6
 80095ec:	bfa8      	it	ge
 80095ee:	4633      	movge	r3, r6
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	bfc2      	ittt	gt
 80095f4:	1aed      	subgt	r5, r5, r3
 80095f6:	1af6      	subgt	r6, r6, r3
 80095f8:	1aff      	subgt	r7, r7, r3
 80095fa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	dd16      	ble.n	800962e <_strtod_l+0x736>
 8009600:	4641      	mov	r1, r8
 8009602:	9805      	ldr	r0, [sp, #20]
 8009604:	461a      	mov	r2, r3
 8009606:	f7ff f9a5 	bl	8008954 <__pow5mult>
 800960a:	4680      	mov	r8, r0
 800960c:	2800      	cmp	r0, #0
 800960e:	d0ba      	beq.n	8009586 <_strtod_l+0x68e>
 8009610:	4601      	mov	r1, r0
 8009612:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009614:	9805      	ldr	r0, [sp, #20]
 8009616:	f7ff f8f3 	bl	8008800 <__multiply>
 800961a:	900e      	str	r0, [sp, #56]	@ 0x38
 800961c:	2800      	cmp	r0, #0
 800961e:	f43f ae8a 	beq.w	8009336 <_strtod_l+0x43e>
 8009622:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009624:	9805      	ldr	r0, [sp, #20]
 8009626:	f7fe ffd7 	bl	80085d8 <_Bfree>
 800962a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800962c:	931a      	str	r3, [sp, #104]	@ 0x68
 800962e:	2d00      	cmp	r5, #0
 8009630:	dc1d      	bgt.n	800966e <_strtod_l+0x776>
 8009632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009634:	2b00      	cmp	r3, #0
 8009636:	dd23      	ble.n	8009680 <_strtod_l+0x788>
 8009638:	4649      	mov	r1, r9
 800963a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800963c:	9805      	ldr	r0, [sp, #20]
 800963e:	f7ff f989 	bl	8008954 <__pow5mult>
 8009642:	4681      	mov	r9, r0
 8009644:	b9e0      	cbnz	r0, 8009680 <_strtod_l+0x788>
 8009646:	f04f 0900 	mov.w	r9, #0
 800964a:	e674      	b.n	8009336 <_strtod_l+0x43e>
 800964c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009650:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009654:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009658:	35e2      	adds	r5, #226	@ 0xe2
 800965a:	fa01 f305 	lsl.w	r3, r1, r5
 800965e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009660:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009662:	e7ba      	b.n	80095da <_strtod_l+0x6e2>
 8009664:	2300      	movs	r3, #0
 8009666:	9310      	str	r3, [sp, #64]	@ 0x40
 8009668:	2301      	movs	r3, #1
 800966a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800966c:	e7b5      	b.n	80095da <_strtod_l+0x6e2>
 800966e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009670:	9805      	ldr	r0, [sp, #20]
 8009672:	462a      	mov	r2, r5
 8009674:	f7ff f9c8 	bl	8008a08 <__lshift>
 8009678:	901a      	str	r0, [sp, #104]	@ 0x68
 800967a:	2800      	cmp	r0, #0
 800967c:	d1d9      	bne.n	8009632 <_strtod_l+0x73a>
 800967e:	e65a      	b.n	8009336 <_strtod_l+0x43e>
 8009680:	2e00      	cmp	r6, #0
 8009682:	dd07      	ble.n	8009694 <_strtod_l+0x79c>
 8009684:	4649      	mov	r1, r9
 8009686:	9805      	ldr	r0, [sp, #20]
 8009688:	4632      	mov	r2, r6
 800968a:	f7ff f9bd 	bl	8008a08 <__lshift>
 800968e:	4681      	mov	r9, r0
 8009690:	2800      	cmp	r0, #0
 8009692:	d0d8      	beq.n	8009646 <_strtod_l+0x74e>
 8009694:	2f00      	cmp	r7, #0
 8009696:	dd08      	ble.n	80096aa <_strtod_l+0x7b2>
 8009698:	4641      	mov	r1, r8
 800969a:	9805      	ldr	r0, [sp, #20]
 800969c:	463a      	mov	r2, r7
 800969e:	f7ff f9b3 	bl	8008a08 <__lshift>
 80096a2:	4680      	mov	r8, r0
 80096a4:	2800      	cmp	r0, #0
 80096a6:	f43f ae46 	beq.w	8009336 <_strtod_l+0x43e>
 80096aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096ac:	9805      	ldr	r0, [sp, #20]
 80096ae:	464a      	mov	r2, r9
 80096b0:	f7ff fa32 	bl	8008b18 <__mdiff>
 80096b4:	4604      	mov	r4, r0
 80096b6:	2800      	cmp	r0, #0
 80096b8:	f43f ae3d 	beq.w	8009336 <_strtod_l+0x43e>
 80096bc:	68c3      	ldr	r3, [r0, #12]
 80096be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096c0:	2300      	movs	r3, #0
 80096c2:	60c3      	str	r3, [r0, #12]
 80096c4:	4641      	mov	r1, r8
 80096c6:	f7ff fa0b 	bl	8008ae0 <__mcmp>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	da46      	bge.n	800975c <_strtod_l+0x864>
 80096ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096d0:	ea53 030a 	orrs.w	r3, r3, sl
 80096d4:	d16c      	bne.n	80097b0 <_strtod_l+0x8b8>
 80096d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d168      	bne.n	80097b0 <_strtod_l+0x8b8>
 80096de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096e2:	0d1b      	lsrs	r3, r3, #20
 80096e4:	051b      	lsls	r3, r3, #20
 80096e6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80096ea:	d961      	bls.n	80097b0 <_strtod_l+0x8b8>
 80096ec:	6963      	ldr	r3, [r4, #20]
 80096ee:	b913      	cbnz	r3, 80096f6 <_strtod_l+0x7fe>
 80096f0:	6923      	ldr	r3, [r4, #16]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	dd5c      	ble.n	80097b0 <_strtod_l+0x8b8>
 80096f6:	4621      	mov	r1, r4
 80096f8:	2201      	movs	r2, #1
 80096fa:	9805      	ldr	r0, [sp, #20]
 80096fc:	f7ff f984 	bl	8008a08 <__lshift>
 8009700:	4641      	mov	r1, r8
 8009702:	4604      	mov	r4, r0
 8009704:	f7ff f9ec 	bl	8008ae0 <__mcmp>
 8009708:	2800      	cmp	r0, #0
 800970a:	dd51      	ble.n	80097b0 <_strtod_l+0x8b8>
 800970c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009710:	9a08      	ldr	r2, [sp, #32]
 8009712:	0d1b      	lsrs	r3, r3, #20
 8009714:	051b      	lsls	r3, r3, #20
 8009716:	2a00      	cmp	r2, #0
 8009718:	d06b      	beq.n	80097f2 <_strtod_l+0x8fa>
 800971a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800971e:	d868      	bhi.n	80097f2 <_strtod_l+0x8fa>
 8009720:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009724:	f67f ae9d 	bls.w	8009462 <_strtod_l+0x56a>
 8009728:	4b0a      	ldr	r3, [pc, #40]	@ (8009754 <_strtod_l+0x85c>)
 800972a:	4650      	mov	r0, sl
 800972c:	4659      	mov	r1, fp
 800972e:	2200      	movs	r2, #0
 8009730:	f7f6 ff62 	bl	80005f8 <__aeabi_dmul>
 8009734:	4b08      	ldr	r3, [pc, #32]	@ (8009758 <_strtod_l+0x860>)
 8009736:	400b      	ands	r3, r1
 8009738:	4682      	mov	sl, r0
 800973a:	468b      	mov	fp, r1
 800973c:	2b00      	cmp	r3, #0
 800973e:	f47f ae05 	bne.w	800934c <_strtod_l+0x454>
 8009742:	9a05      	ldr	r2, [sp, #20]
 8009744:	2322      	movs	r3, #34	@ 0x22
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	e600      	b.n	800934c <_strtod_l+0x454>
 800974a:	bf00      	nop
 800974c:	0800b070 	.word	0x0800b070
 8009750:	fffffc02 	.word	0xfffffc02
 8009754:	39500000 	.word	0x39500000
 8009758:	7ff00000 	.word	0x7ff00000
 800975c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009760:	d165      	bne.n	800982e <_strtod_l+0x936>
 8009762:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009764:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009768:	b35a      	cbz	r2, 80097c2 <_strtod_l+0x8ca>
 800976a:	4a9f      	ldr	r2, [pc, #636]	@ (80099e8 <_strtod_l+0xaf0>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d12b      	bne.n	80097c8 <_strtod_l+0x8d0>
 8009770:	9b08      	ldr	r3, [sp, #32]
 8009772:	4651      	mov	r1, sl
 8009774:	b303      	cbz	r3, 80097b8 <_strtod_l+0x8c0>
 8009776:	4b9d      	ldr	r3, [pc, #628]	@ (80099ec <_strtod_l+0xaf4>)
 8009778:	465a      	mov	r2, fp
 800977a:	4013      	ands	r3, r2
 800977c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009780:	f04f 32ff 	mov.w	r2, #4294967295
 8009784:	d81b      	bhi.n	80097be <_strtod_l+0x8c6>
 8009786:	0d1b      	lsrs	r3, r3, #20
 8009788:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800978c:	fa02 f303 	lsl.w	r3, r2, r3
 8009790:	4299      	cmp	r1, r3
 8009792:	d119      	bne.n	80097c8 <_strtod_l+0x8d0>
 8009794:	4b96      	ldr	r3, [pc, #600]	@ (80099f0 <_strtod_l+0xaf8>)
 8009796:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009798:	429a      	cmp	r2, r3
 800979a:	d102      	bne.n	80097a2 <_strtod_l+0x8aa>
 800979c:	3101      	adds	r1, #1
 800979e:	f43f adca 	beq.w	8009336 <_strtod_l+0x43e>
 80097a2:	4b92      	ldr	r3, [pc, #584]	@ (80099ec <_strtod_l+0xaf4>)
 80097a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097a6:	401a      	ands	r2, r3
 80097a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80097ac:	f04f 0a00 	mov.w	sl, #0
 80097b0:	9b08      	ldr	r3, [sp, #32]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d1b8      	bne.n	8009728 <_strtod_l+0x830>
 80097b6:	e5c9      	b.n	800934c <_strtod_l+0x454>
 80097b8:	f04f 33ff 	mov.w	r3, #4294967295
 80097bc:	e7e8      	b.n	8009790 <_strtod_l+0x898>
 80097be:	4613      	mov	r3, r2
 80097c0:	e7e6      	b.n	8009790 <_strtod_l+0x898>
 80097c2:	ea53 030a 	orrs.w	r3, r3, sl
 80097c6:	d0a1      	beq.n	800970c <_strtod_l+0x814>
 80097c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097ca:	b1db      	cbz	r3, 8009804 <_strtod_l+0x90c>
 80097cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097ce:	4213      	tst	r3, r2
 80097d0:	d0ee      	beq.n	80097b0 <_strtod_l+0x8b8>
 80097d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097d4:	9a08      	ldr	r2, [sp, #32]
 80097d6:	4650      	mov	r0, sl
 80097d8:	4659      	mov	r1, fp
 80097da:	b1bb      	cbz	r3, 800980c <_strtod_l+0x914>
 80097dc:	f7ff fb6e 	bl	8008ebc <sulp>
 80097e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097e4:	ec53 2b10 	vmov	r2, r3, d0
 80097e8:	f7f6 fd50 	bl	800028c <__adddf3>
 80097ec:	4682      	mov	sl, r0
 80097ee:	468b      	mov	fp, r1
 80097f0:	e7de      	b.n	80097b0 <_strtod_l+0x8b8>
 80097f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80097f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80097fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80097fe:	f04f 3aff 	mov.w	sl, #4294967295
 8009802:	e7d5      	b.n	80097b0 <_strtod_l+0x8b8>
 8009804:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009806:	ea13 0f0a 	tst.w	r3, sl
 800980a:	e7e1      	b.n	80097d0 <_strtod_l+0x8d8>
 800980c:	f7ff fb56 	bl	8008ebc <sulp>
 8009810:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009814:	ec53 2b10 	vmov	r2, r3, d0
 8009818:	f7f6 fd36 	bl	8000288 <__aeabi_dsub>
 800981c:	2200      	movs	r2, #0
 800981e:	2300      	movs	r3, #0
 8009820:	4682      	mov	sl, r0
 8009822:	468b      	mov	fp, r1
 8009824:	f7f7 f950 	bl	8000ac8 <__aeabi_dcmpeq>
 8009828:	2800      	cmp	r0, #0
 800982a:	d0c1      	beq.n	80097b0 <_strtod_l+0x8b8>
 800982c:	e619      	b.n	8009462 <_strtod_l+0x56a>
 800982e:	4641      	mov	r1, r8
 8009830:	4620      	mov	r0, r4
 8009832:	f7ff facd 	bl	8008dd0 <__ratio>
 8009836:	ec57 6b10 	vmov	r6, r7, d0
 800983a:	2200      	movs	r2, #0
 800983c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009840:	4630      	mov	r0, r6
 8009842:	4639      	mov	r1, r7
 8009844:	f7f7 f954 	bl	8000af0 <__aeabi_dcmple>
 8009848:	2800      	cmp	r0, #0
 800984a:	d06f      	beq.n	800992c <_strtod_l+0xa34>
 800984c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800984e:	2b00      	cmp	r3, #0
 8009850:	d17a      	bne.n	8009948 <_strtod_l+0xa50>
 8009852:	f1ba 0f00 	cmp.w	sl, #0
 8009856:	d158      	bne.n	800990a <_strtod_l+0xa12>
 8009858:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800985a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800985e:	2b00      	cmp	r3, #0
 8009860:	d15a      	bne.n	8009918 <_strtod_l+0xa20>
 8009862:	4b64      	ldr	r3, [pc, #400]	@ (80099f4 <_strtod_l+0xafc>)
 8009864:	2200      	movs	r2, #0
 8009866:	4630      	mov	r0, r6
 8009868:	4639      	mov	r1, r7
 800986a:	f7f7 f937 	bl	8000adc <__aeabi_dcmplt>
 800986e:	2800      	cmp	r0, #0
 8009870:	d159      	bne.n	8009926 <_strtod_l+0xa2e>
 8009872:	4630      	mov	r0, r6
 8009874:	4639      	mov	r1, r7
 8009876:	4b60      	ldr	r3, [pc, #384]	@ (80099f8 <_strtod_l+0xb00>)
 8009878:	2200      	movs	r2, #0
 800987a:	f7f6 febd 	bl	80005f8 <__aeabi_dmul>
 800987e:	4606      	mov	r6, r0
 8009880:	460f      	mov	r7, r1
 8009882:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009886:	9606      	str	r6, [sp, #24]
 8009888:	9307      	str	r3, [sp, #28]
 800988a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800988e:	4d57      	ldr	r5, [pc, #348]	@ (80099ec <_strtod_l+0xaf4>)
 8009890:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009894:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009896:	401d      	ands	r5, r3
 8009898:	4b58      	ldr	r3, [pc, #352]	@ (80099fc <_strtod_l+0xb04>)
 800989a:	429d      	cmp	r5, r3
 800989c:	f040 80b2 	bne.w	8009a04 <_strtod_l+0xb0c>
 80098a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80098a6:	ec4b ab10 	vmov	d0, sl, fp
 80098aa:	f7ff f9c9 	bl	8008c40 <__ulp>
 80098ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098b2:	ec51 0b10 	vmov	r0, r1, d0
 80098b6:	f7f6 fe9f 	bl	80005f8 <__aeabi_dmul>
 80098ba:	4652      	mov	r2, sl
 80098bc:	465b      	mov	r3, fp
 80098be:	f7f6 fce5 	bl	800028c <__adddf3>
 80098c2:	460b      	mov	r3, r1
 80098c4:	4949      	ldr	r1, [pc, #292]	@ (80099ec <_strtod_l+0xaf4>)
 80098c6:	4a4e      	ldr	r2, [pc, #312]	@ (8009a00 <_strtod_l+0xb08>)
 80098c8:	4019      	ands	r1, r3
 80098ca:	4291      	cmp	r1, r2
 80098cc:	4682      	mov	sl, r0
 80098ce:	d942      	bls.n	8009956 <_strtod_l+0xa5e>
 80098d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80098d2:	4b47      	ldr	r3, [pc, #284]	@ (80099f0 <_strtod_l+0xaf8>)
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d103      	bne.n	80098e0 <_strtod_l+0x9e8>
 80098d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098da:	3301      	adds	r3, #1
 80098dc:	f43f ad2b 	beq.w	8009336 <_strtod_l+0x43e>
 80098e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80099f0 <_strtod_l+0xaf8>
 80098e4:	f04f 3aff 	mov.w	sl, #4294967295
 80098e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098ea:	9805      	ldr	r0, [sp, #20]
 80098ec:	f7fe fe74 	bl	80085d8 <_Bfree>
 80098f0:	9805      	ldr	r0, [sp, #20]
 80098f2:	4649      	mov	r1, r9
 80098f4:	f7fe fe70 	bl	80085d8 <_Bfree>
 80098f8:	9805      	ldr	r0, [sp, #20]
 80098fa:	4641      	mov	r1, r8
 80098fc:	f7fe fe6c 	bl	80085d8 <_Bfree>
 8009900:	9805      	ldr	r0, [sp, #20]
 8009902:	4621      	mov	r1, r4
 8009904:	f7fe fe68 	bl	80085d8 <_Bfree>
 8009908:	e618      	b.n	800953c <_strtod_l+0x644>
 800990a:	f1ba 0f01 	cmp.w	sl, #1
 800990e:	d103      	bne.n	8009918 <_strtod_l+0xa20>
 8009910:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009912:	2b00      	cmp	r3, #0
 8009914:	f43f ada5 	beq.w	8009462 <_strtod_l+0x56a>
 8009918:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80099c8 <_strtod_l+0xad0>
 800991c:	4f35      	ldr	r7, [pc, #212]	@ (80099f4 <_strtod_l+0xafc>)
 800991e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009922:	2600      	movs	r6, #0
 8009924:	e7b1      	b.n	800988a <_strtod_l+0x992>
 8009926:	4f34      	ldr	r7, [pc, #208]	@ (80099f8 <_strtod_l+0xb00>)
 8009928:	2600      	movs	r6, #0
 800992a:	e7aa      	b.n	8009882 <_strtod_l+0x98a>
 800992c:	4b32      	ldr	r3, [pc, #200]	@ (80099f8 <_strtod_l+0xb00>)
 800992e:	4630      	mov	r0, r6
 8009930:	4639      	mov	r1, r7
 8009932:	2200      	movs	r2, #0
 8009934:	f7f6 fe60 	bl	80005f8 <__aeabi_dmul>
 8009938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800993a:	4606      	mov	r6, r0
 800993c:	460f      	mov	r7, r1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d09f      	beq.n	8009882 <_strtod_l+0x98a>
 8009942:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009946:	e7a0      	b.n	800988a <_strtod_l+0x992>
 8009948:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80099d0 <_strtod_l+0xad8>
 800994c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009950:	ec57 6b17 	vmov	r6, r7, d7
 8009954:	e799      	b.n	800988a <_strtod_l+0x992>
 8009956:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800995a:	9b08      	ldr	r3, [sp, #32]
 800995c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1c1      	bne.n	80098e8 <_strtod_l+0x9f0>
 8009964:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009968:	0d1b      	lsrs	r3, r3, #20
 800996a:	051b      	lsls	r3, r3, #20
 800996c:	429d      	cmp	r5, r3
 800996e:	d1bb      	bne.n	80098e8 <_strtod_l+0x9f0>
 8009970:	4630      	mov	r0, r6
 8009972:	4639      	mov	r1, r7
 8009974:	f7f7 f9a0 	bl	8000cb8 <__aeabi_d2lz>
 8009978:	f7f6 fe10 	bl	800059c <__aeabi_l2d>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	4630      	mov	r0, r6
 8009982:	4639      	mov	r1, r7
 8009984:	f7f6 fc80 	bl	8000288 <__aeabi_dsub>
 8009988:	460b      	mov	r3, r1
 800998a:	4602      	mov	r2, r0
 800998c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009990:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009996:	ea46 060a 	orr.w	r6, r6, sl
 800999a:	431e      	orrs	r6, r3
 800999c:	d06f      	beq.n	8009a7e <_strtod_l+0xb86>
 800999e:	a30e      	add	r3, pc, #56	@ (adr r3, 80099d8 <_strtod_l+0xae0>)
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	f7f7 f89a 	bl	8000adc <__aeabi_dcmplt>
 80099a8:	2800      	cmp	r0, #0
 80099aa:	f47f accf 	bne.w	800934c <_strtod_l+0x454>
 80099ae:	a30c      	add	r3, pc, #48	@ (adr r3, 80099e0 <_strtod_l+0xae8>)
 80099b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099b8:	f7f7 f8ae 	bl	8000b18 <__aeabi_dcmpgt>
 80099bc:	2800      	cmp	r0, #0
 80099be:	d093      	beq.n	80098e8 <_strtod_l+0x9f0>
 80099c0:	e4c4      	b.n	800934c <_strtod_l+0x454>
 80099c2:	bf00      	nop
 80099c4:	f3af 8000 	nop.w
 80099c8:	00000000 	.word	0x00000000
 80099cc:	bff00000 	.word	0xbff00000
 80099d0:	00000000 	.word	0x00000000
 80099d4:	3ff00000 	.word	0x3ff00000
 80099d8:	94a03595 	.word	0x94a03595
 80099dc:	3fdfffff 	.word	0x3fdfffff
 80099e0:	35afe535 	.word	0x35afe535
 80099e4:	3fe00000 	.word	0x3fe00000
 80099e8:	000fffff 	.word	0x000fffff
 80099ec:	7ff00000 	.word	0x7ff00000
 80099f0:	7fefffff 	.word	0x7fefffff
 80099f4:	3ff00000 	.word	0x3ff00000
 80099f8:	3fe00000 	.word	0x3fe00000
 80099fc:	7fe00000 	.word	0x7fe00000
 8009a00:	7c9fffff 	.word	0x7c9fffff
 8009a04:	9b08      	ldr	r3, [sp, #32]
 8009a06:	b323      	cbz	r3, 8009a52 <_strtod_l+0xb5a>
 8009a08:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009a0c:	d821      	bhi.n	8009a52 <_strtod_l+0xb5a>
 8009a0e:	a328      	add	r3, pc, #160	@ (adr r3, 8009ab0 <_strtod_l+0xbb8>)
 8009a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a14:	4630      	mov	r0, r6
 8009a16:	4639      	mov	r1, r7
 8009a18:	f7f7 f86a 	bl	8000af0 <__aeabi_dcmple>
 8009a1c:	b1a0      	cbz	r0, 8009a48 <_strtod_l+0xb50>
 8009a1e:	4639      	mov	r1, r7
 8009a20:	4630      	mov	r0, r6
 8009a22:	f7f7 f8c1 	bl	8000ba8 <__aeabi_d2uiz>
 8009a26:	2801      	cmp	r0, #1
 8009a28:	bf38      	it	cc
 8009a2a:	2001      	movcc	r0, #1
 8009a2c:	f7f6 fd6a 	bl	8000504 <__aeabi_ui2d>
 8009a30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a32:	4606      	mov	r6, r0
 8009a34:	460f      	mov	r7, r1
 8009a36:	b9fb      	cbnz	r3, 8009a78 <_strtod_l+0xb80>
 8009a38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a3c:	9014      	str	r0, [sp, #80]	@ 0x50
 8009a3e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009a44:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009a48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009a4a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009a4e:	1b5b      	subs	r3, r3, r5
 8009a50:	9311      	str	r3, [sp, #68]	@ 0x44
 8009a52:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009a56:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009a5a:	f7ff f8f1 	bl	8008c40 <__ulp>
 8009a5e:	4650      	mov	r0, sl
 8009a60:	ec53 2b10 	vmov	r2, r3, d0
 8009a64:	4659      	mov	r1, fp
 8009a66:	f7f6 fdc7 	bl	80005f8 <__aeabi_dmul>
 8009a6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009a6e:	f7f6 fc0d 	bl	800028c <__adddf3>
 8009a72:	4682      	mov	sl, r0
 8009a74:	468b      	mov	fp, r1
 8009a76:	e770      	b.n	800995a <_strtod_l+0xa62>
 8009a78:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009a7c:	e7e0      	b.n	8009a40 <_strtod_l+0xb48>
 8009a7e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ab8 <_strtod_l+0xbc0>)
 8009a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a84:	f7f7 f82a 	bl	8000adc <__aeabi_dcmplt>
 8009a88:	e798      	b.n	80099bc <_strtod_l+0xac4>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a8e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009a90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	f7ff ba6d 	b.w	8008f72 <_strtod_l+0x7a>
 8009a98:	2a65      	cmp	r2, #101	@ 0x65
 8009a9a:	f43f ab66 	beq.w	800916a <_strtod_l+0x272>
 8009a9e:	2a45      	cmp	r2, #69	@ 0x45
 8009aa0:	f43f ab63 	beq.w	800916a <_strtod_l+0x272>
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	f7ff bb9e 	b.w	80091e6 <_strtod_l+0x2ee>
 8009aaa:	bf00      	nop
 8009aac:	f3af 8000 	nop.w
 8009ab0:	ffc00000 	.word	0xffc00000
 8009ab4:	41dfffff 	.word	0x41dfffff
 8009ab8:	94a03595 	.word	0x94a03595
 8009abc:	3fcfffff 	.word	0x3fcfffff

08009ac0 <_strtod_r>:
 8009ac0:	4b01      	ldr	r3, [pc, #4]	@ (8009ac8 <_strtod_r+0x8>)
 8009ac2:	f7ff ba19 	b.w	8008ef8 <_strtod_l>
 8009ac6:	bf00      	nop
 8009ac8:	20000068 	.word	0x20000068

08009acc <_strtol_l.constprop.0>:
 8009acc:	2b24      	cmp	r3, #36	@ 0x24
 8009ace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad2:	4686      	mov	lr, r0
 8009ad4:	4690      	mov	r8, r2
 8009ad6:	d801      	bhi.n	8009adc <_strtol_l.constprop.0+0x10>
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d106      	bne.n	8009aea <_strtol_l.constprop.0+0x1e>
 8009adc:	f7fd fdba 	bl	8007654 <__errno>
 8009ae0:	2316      	movs	r3, #22
 8009ae2:	6003      	str	r3, [r0, #0]
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aea:	4834      	ldr	r0, [pc, #208]	@ (8009bbc <_strtol_l.constprop.0+0xf0>)
 8009aec:	460d      	mov	r5, r1
 8009aee:	462a      	mov	r2, r5
 8009af0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009af4:	5d06      	ldrb	r6, [r0, r4]
 8009af6:	f016 0608 	ands.w	r6, r6, #8
 8009afa:	d1f8      	bne.n	8009aee <_strtol_l.constprop.0+0x22>
 8009afc:	2c2d      	cmp	r4, #45	@ 0x2d
 8009afe:	d12d      	bne.n	8009b5c <_strtol_l.constprop.0+0x90>
 8009b00:	782c      	ldrb	r4, [r5, #0]
 8009b02:	2601      	movs	r6, #1
 8009b04:	1c95      	adds	r5, r2, #2
 8009b06:	f033 0210 	bics.w	r2, r3, #16
 8009b0a:	d109      	bne.n	8009b20 <_strtol_l.constprop.0+0x54>
 8009b0c:	2c30      	cmp	r4, #48	@ 0x30
 8009b0e:	d12a      	bne.n	8009b66 <_strtol_l.constprop.0+0x9a>
 8009b10:	782a      	ldrb	r2, [r5, #0]
 8009b12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b16:	2a58      	cmp	r2, #88	@ 0x58
 8009b18:	d125      	bne.n	8009b66 <_strtol_l.constprop.0+0x9a>
 8009b1a:	786c      	ldrb	r4, [r5, #1]
 8009b1c:	2310      	movs	r3, #16
 8009b1e:	3502      	adds	r5, #2
 8009b20:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009b24:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009b28:	2200      	movs	r2, #0
 8009b2a:	fbbc f9f3 	udiv	r9, ip, r3
 8009b2e:	4610      	mov	r0, r2
 8009b30:	fb03 ca19 	mls	sl, r3, r9, ip
 8009b34:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009b38:	2f09      	cmp	r7, #9
 8009b3a:	d81b      	bhi.n	8009b74 <_strtol_l.constprop.0+0xa8>
 8009b3c:	463c      	mov	r4, r7
 8009b3e:	42a3      	cmp	r3, r4
 8009b40:	dd27      	ble.n	8009b92 <_strtol_l.constprop.0+0xc6>
 8009b42:	1c57      	adds	r7, r2, #1
 8009b44:	d007      	beq.n	8009b56 <_strtol_l.constprop.0+0x8a>
 8009b46:	4581      	cmp	r9, r0
 8009b48:	d320      	bcc.n	8009b8c <_strtol_l.constprop.0+0xc0>
 8009b4a:	d101      	bne.n	8009b50 <_strtol_l.constprop.0+0x84>
 8009b4c:	45a2      	cmp	sl, r4
 8009b4e:	db1d      	blt.n	8009b8c <_strtol_l.constprop.0+0xc0>
 8009b50:	fb00 4003 	mla	r0, r0, r3, r4
 8009b54:	2201      	movs	r2, #1
 8009b56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009b5a:	e7eb      	b.n	8009b34 <_strtol_l.constprop.0+0x68>
 8009b5c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009b5e:	bf04      	itt	eq
 8009b60:	782c      	ldrbeq	r4, [r5, #0]
 8009b62:	1c95      	addeq	r5, r2, #2
 8009b64:	e7cf      	b.n	8009b06 <_strtol_l.constprop.0+0x3a>
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1da      	bne.n	8009b20 <_strtol_l.constprop.0+0x54>
 8009b6a:	2c30      	cmp	r4, #48	@ 0x30
 8009b6c:	bf0c      	ite	eq
 8009b6e:	2308      	moveq	r3, #8
 8009b70:	230a      	movne	r3, #10
 8009b72:	e7d5      	b.n	8009b20 <_strtol_l.constprop.0+0x54>
 8009b74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009b78:	2f19      	cmp	r7, #25
 8009b7a:	d801      	bhi.n	8009b80 <_strtol_l.constprop.0+0xb4>
 8009b7c:	3c37      	subs	r4, #55	@ 0x37
 8009b7e:	e7de      	b.n	8009b3e <_strtol_l.constprop.0+0x72>
 8009b80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009b84:	2f19      	cmp	r7, #25
 8009b86:	d804      	bhi.n	8009b92 <_strtol_l.constprop.0+0xc6>
 8009b88:	3c57      	subs	r4, #87	@ 0x57
 8009b8a:	e7d8      	b.n	8009b3e <_strtol_l.constprop.0+0x72>
 8009b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b90:	e7e1      	b.n	8009b56 <_strtol_l.constprop.0+0x8a>
 8009b92:	1c53      	adds	r3, r2, #1
 8009b94:	d108      	bne.n	8009ba8 <_strtol_l.constprop.0+0xdc>
 8009b96:	2322      	movs	r3, #34	@ 0x22
 8009b98:	f8ce 3000 	str.w	r3, [lr]
 8009b9c:	4660      	mov	r0, ip
 8009b9e:	f1b8 0f00 	cmp.w	r8, #0
 8009ba2:	d0a0      	beq.n	8009ae6 <_strtol_l.constprop.0+0x1a>
 8009ba4:	1e69      	subs	r1, r5, #1
 8009ba6:	e006      	b.n	8009bb6 <_strtol_l.constprop.0+0xea>
 8009ba8:	b106      	cbz	r6, 8009bac <_strtol_l.constprop.0+0xe0>
 8009baa:	4240      	negs	r0, r0
 8009bac:	f1b8 0f00 	cmp.w	r8, #0
 8009bb0:	d099      	beq.n	8009ae6 <_strtol_l.constprop.0+0x1a>
 8009bb2:	2a00      	cmp	r2, #0
 8009bb4:	d1f6      	bne.n	8009ba4 <_strtol_l.constprop.0+0xd8>
 8009bb6:	f8c8 1000 	str.w	r1, [r8]
 8009bba:	e794      	b.n	8009ae6 <_strtol_l.constprop.0+0x1a>
 8009bbc:	0800b099 	.word	0x0800b099

08009bc0 <_strtol_r>:
 8009bc0:	f7ff bf84 	b.w	8009acc <_strtol_l.constprop.0>

08009bc4 <__ssputs_r>:
 8009bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bc8:	688e      	ldr	r6, [r1, #8]
 8009bca:	461f      	mov	r7, r3
 8009bcc:	42be      	cmp	r6, r7
 8009bce:	680b      	ldr	r3, [r1, #0]
 8009bd0:	4682      	mov	sl, r0
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	4690      	mov	r8, r2
 8009bd6:	d82d      	bhi.n	8009c34 <__ssputs_r+0x70>
 8009bd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009be0:	d026      	beq.n	8009c30 <__ssputs_r+0x6c>
 8009be2:	6965      	ldr	r5, [r4, #20]
 8009be4:	6909      	ldr	r1, [r1, #16]
 8009be6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bea:	eba3 0901 	sub.w	r9, r3, r1
 8009bee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bf2:	1c7b      	adds	r3, r7, #1
 8009bf4:	444b      	add	r3, r9
 8009bf6:	106d      	asrs	r5, r5, #1
 8009bf8:	429d      	cmp	r5, r3
 8009bfa:	bf38      	it	cc
 8009bfc:	461d      	movcc	r5, r3
 8009bfe:	0553      	lsls	r3, r2, #21
 8009c00:	d527      	bpl.n	8009c52 <__ssputs_r+0x8e>
 8009c02:	4629      	mov	r1, r5
 8009c04:	f7fe fc1c 	bl	8008440 <_malloc_r>
 8009c08:	4606      	mov	r6, r0
 8009c0a:	b360      	cbz	r0, 8009c66 <__ssputs_r+0xa2>
 8009c0c:	6921      	ldr	r1, [r4, #16]
 8009c0e:	464a      	mov	r2, r9
 8009c10:	f000 fa18 	bl	800a044 <memcpy>
 8009c14:	89a3      	ldrh	r3, [r4, #12]
 8009c16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c1e:	81a3      	strh	r3, [r4, #12]
 8009c20:	6126      	str	r6, [r4, #16]
 8009c22:	6165      	str	r5, [r4, #20]
 8009c24:	444e      	add	r6, r9
 8009c26:	eba5 0509 	sub.w	r5, r5, r9
 8009c2a:	6026      	str	r6, [r4, #0]
 8009c2c:	60a5      	str	r5, [r4, #8]
 8009c2e:	463e      	mov	r6, r7
 8009c30:	42be      	cmp	r6, r7
 8009c32:	d900      	bls.n	8009c36 <__ssputs_r+0x72>
 8009c34:	463e      	mov	r6, r7
 8009c36:	6820      	ldr	r0, [r4, #0]
 8009c38:	4632      	mov	r2, r6
 8009c3a:	4641      	mov	r1, r8
 8009c3c:	f000 f9c6 	bl	8009fcc <memmove>
 8009c40:	68a3      	ldr	r3, [r4, #8]
 8009c42:	1b9b      	subs	r3, r3, r6
 8009c44:	60a3      	str	r3, [r4, #8]
 8009c46:	6823      	ldr	r3, [r4, #0]
 8009c48:	4433      	add	r3, r6
 8009c4a:	6023      	str	r3, [r4, #0]
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c52:	462a      	mov	r2, r5
 8009c54:	f000 fd89 	bl	800a76a <_realloc_r>
 8009c58:	4606      	mov	r6, r0
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	d1e0      	bne.n	8009c20 <__ssputs_r+0x5c>
 8009c5e:	6921      	ldr	r1, [r4, #16]
 8009c60:	4650      	mov	r0, sl
 8009c62:	f7fe fb79 	bl	8008358 <_free_r>
 8009c66:	230c      	movs	r3, #12
 8009c68:	f8ca 3000 	str.w	r3, [sl]
 8009c6c:	89a3      	ldrh	r3, [r4, #12]
 8009c6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c72:	81a3      	strh	r3, [r4, #12]
 8009c74:	f04f 30ff 	mov.w	r0, #4294967295
 8009c78:	e7e9      	b.n	8009c4e <__ssputs_r+0x8a>
	...

08009c7c <_svfiprintf_r>:
 8009c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c80:	4698      	mov	r8, r3
 8009c82:	898b      	ldrh	r3, [r1, #12]
 8009c84:	061b      	lsls	r3, r3, #24
 8009c86:	b09d      	sub	sp, #116	@ 0x74
 8009c88:	4607      	mov	r7, r0
 8009c8a:	460d      	mov	r5, r1
 8009c8c:	4614      	mov	r4, r2
 8009c8e:	d510      	bpl.n	8009cb2 <_svfiprintf_r+0x36>
 8009c90:	690b      	ldr	r3, [r1, #16]
 8009c92:	b973      	cbnz	r3, 8009cb2 <_svfiprintf_r+0x36>
 8009c94:	2140      	movs	r1, #64	@ 0x40
 8009c96:	f7fe fbd3 	bl	8008440 <_malloc_r>
 8009c9a:	6028      	str	r0, [r5, #0]
 8009c9c:	6128      	str	r0, [r5, #16]
 8009c9e:	b930      	cbnz	r0, 8009cae <_svfiprintf_r+0x32>
 8009ca0:	230c      	movs	r3, #12
 8009ca2:	603b      	str	r3, [r7, #0]
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca8:	b01d      	add	sp, #116	@ 0x74
 8009caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cae:	2340      	movs	r3, #64	@ 0x40
 8009cb0:	616b      	str	r3, [r5, #20]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cb6:	2320      	movs	r3, #32
 8009cb8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009cbc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cc0:	2330      	movs	r3, #48	@ 0x30
 8009cc2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e60 <_svfiprintf_r+0x1e4>
 8009cc6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cca:	f04f 0901 	mov.w	r9, #1
 8009cce:	4623      	mov	r3, r4
 8009cd0:	469a      	mov	sl, r3
 8009cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd6:	b10a      	cbz	r2, 8009cdc <_svfiprintf_r+0x60>
 8009cd8:	2a25      	cmp	r2, #37	@ 0x25
 8009cda:	d1f9      	bne.n	8009cd0 <_svfiprintf_r+0x54>
 8009cdc:	ebba 0b04 	subs.w	fp, sl, r4
 8009ce0:	d00b      	beq.n	8009cfa <_svfiprintf_r+0x7e>
 8009ce2:	465b      	mov	r3, fp
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7ff ff6b 	bl	8009bc4 <__ssputs_r>
 8009cee:	3001      	adds	r0, #1
 8009cf0:	f000 80a7 	beq.w	8009e42 <_svfiprintf_r+0x1c6>
 8009cf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cf6:	445a      	add	r2, fp
 8009cf8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cfa:	f89a 3000 	ldrb.w	r3, [sl]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f000 809f 	beq.w	8009e42 <_svfiprintf_r+0x1c6>
 8009d04:	2300      	movs	r3, #0
 8009d06:	f04f 32ff 	mov.w	r2, #4294967295
 8009d0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d0e:	f10a 0a01 	add.w	sl, sl, #1
 8009d12:	9304      	str	r3, [sp, #16]
 8009d14:	9307      	str	r3, [sp, #28]
 8009d16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d1c:	4654      	mov	r4, sl
 8009d1e:	2205      	movs	r2, #5
 8009d20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d24:	484e      	ldr	r0, [pc, #312]	@ (8009e60 <_svfiprintf_r+0x1e4>)
 8009d26:	f7f6 fa53 	bl	80001d0 <memchr>
 8009d2a:	9a04      	ldr	r2, [sp, #16]
 8009d2c:	b9d8      	cbnz	r0, 8009d66 <_svfiprintf_r+0xea>
 8009d2e:	06d0      	lsls	r0, r2, #27
 8009d30:	bf44      	itt	mi
 8009d32:	2320      	movmi	r3, #32
 8009d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d38:	0711      	lsls	r1, r2, #28
 8009d3a:	bf44      	itt	mi
 8009d3c:	232b      	movmi	r3, #43	@ 0x2b
 8009d3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d42:	f89a 3000 	ldrb.w	r3, [sl]
 8009d46:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d48:	d015      	beq.n	8009d76 <_svfiprintf_r+0xfa>
 8009d4a:	9a07      	ldr	r2, [sp, #28]
 8009d4c:	4654      	mov	r4, sl
 8009d4e:	2000      	movs	r0, #0
 8009d50:	f04f 0c0a 	mov.w	ip, #10
 8009d54:	4621      	mov	r1, r4
 8009d56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d5a:	3b30      	subs	r3, #48	@ 0x30
 8009d5c:	2b09      	cmp	r3, #9
 8009d5e:	d94b      	bls.n	8009df8 <_svfiprintf_r+0x17c>
 8009d60:	b1b0      	cbz	r0, 8009d90 <_svfiprintf_r+0x114>
 8009d62:	9207      	str	r2, [sp, #28]
 8009d64:	e014      	b.n	8009d90 <_svfiprintf_r+0x114>
 8009d66:	eba0 0308 	sub.w	r3, r0, r8
 8009d6a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	9304      	str	r3, [sp, #16]
 8009d72:	46a2      	mov	sl, r4
 8009d74:	e7d2      	b.n	8009d1c <_svfiprintf_r+0xa0>
 8009d76:	9b03      	ldr	r3, [sp, #12]
 8009d78:	1d19      	adds	r1, r3, #4
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	9103      	str	r1, [sp, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	bfbb      	ittet	lt
 8009d82:	425b      	neglt	r3, r3
 8009d84:	f042 0202 	orrlt.w	r2, r2, #2
 8009d88:	9307      	strge	r3, [sp, #28]
 8009d8a:	9307      	strlt	r3, [sp, #28]
 8009d8c:	bfb8      	it	lt
 8009d8e:	9204      	strlt	r2, [sp, #16]
 8009d90:	7823      	ldrb	r3, [r4, #0]
 8009d92:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d94:	d10a      	bne.n	8009dac <_svfiprintf_r+0x130>
 8009d96:	7863      	ldrb	r3, [r4, #1]
 8009d98:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d9a:	d132      	bne.n	8009e02 <_svfiprintf_r+0x186>
 8009d9c:	9b03      	ldr	r3, [sp, #12]
 8009d9e:	1d1a      	adds	r2, r3, #4
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	9203      	str	r2, [sp, #12]
 8009da4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009da8:	3402      	adds	r4, #2
 8009daa:	9305      	str	r3, [sp, #20]
 8009dac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e70 <_svfiprintf_r+0x1f4>
 8009db0:	7821      	ldrb	r1, [r4, #0]
 8009db2:	2203      	movs	r2, #3
 8009db4:	4650      	mov	r0, sl
 8009db6:	f7f6 fa0b 	bl	80001d0 <memchr>
 8009dba:	b138      	cbz	r0, 8009dcc <_svfiprintf_r+0x150>
 8009dbc:	9b04      	ldr	r3, [sp, #16]
 8009dbe:	eba0 000a 	sub.w	r0, r0, sl
 8009dc2:	2240      	movs	r2, #64	@ 0x40
 8009dc4:	4082      	lsls	r2, r0
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	3401      	adds	r4, #1
 8009dca:	9304      	str	r3, [sp, #16]
 8009dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd0:	4824      	ldr	r0, [pc, #144]	@ (8009e64 <_svfiprintf_r+0x1e8>)
 8009dd2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dd6:	2206      	movs	r2, #6
 8009dd8:	f7f6 f9fa 	bl	80001d0 <memchr>
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d036      	beq.n	8009e4e <_svfiprintf_r+0x1d2>
 8009de0:	4b21      	ldr	r3, [pc, #132]	@ (8009e68 <_svfiprintf_r+0x1ec>)
 8009de2:	bb1b      	cbnz	r3, 8009e2c <_svfiprintf_r+0x1b0>
 8009de4:	9b03      	ldr	r3, [sp, #12]
 8009de6:	3307      	adds	r3, #7
 8009de8:	f023 0307 	bic.w	r3, r3, #7
 8009dec:	3308      	adds	r3, #8
 8009dee:	9303      	str	r3, [sp, #12]
 8009df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df2:	4433      	add	r3, r6
 8009df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009df6:	e76a      	b.n	8009cce <_svfiprintf_r+0x52>
 8009df8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	2001      	movs	r0, #1
 8009e00:	e7a8      	b.n	8009d54 <_svfiprintf_r+0xd8>
 8009e02:	2300      	movs	r3, #0
 8009e04:	3401      	adds	r4, #1
 8009e06:	9305      	str	r3, [sp, #20]
 8009e08:	4619      	mov	r1, r3
 8009e0a:	f04f 0c0a 	mov.w	ip, #10
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e14:	3a30      	subs	r2, #48	@ 0x30
 8009e16:	2a09      	cmp	r2, #9
 8009e18:	d903      	bls.n	8009e22 <_svfiprintf_r+0x1a6>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0c6      	beq.n	8009dac <_svfiprintf_r+0x130>
 8009e1e:	9105      	str	r1, [sp, #20]
 8009e20:	e7c4      	b.n	8009dac <_svfiprintf_r+0x130>
 8009e22:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e26:	4604      	mov	r4, r0
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e7f0      	b.n	8009e0e <_svfiprintf_r+0x192>
 8009e2c:	ab03      	add	r3, sp, #12
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	462a      	mov	r2, r5
 8009e32:	4b0e      	ldr	r3, [pc, #56]	@ (8009e6c <_svfiprintf_r+0x1f0>)
 8009e34:	a904      	add	r1, sp, #16
 8009e36:	4638      	mov	r0, r7
 8009e38:	f7fc fcc8 	bl	80067cc <_printf_float>
 8009e3c:	1c42      	adds	r2, r0, #1
 8009e3e:	4606      	mov	r6, r0
 8009e40:	d1d6      	bne.n	8009df0 <_svfiprintf_r+0x174>
 8009e42:	89ab      	ldrh	r3, [r5, #12]
 8009e44:	065b      	lsls	r3, r3, #25
 8009e46:	f53f af2d 	bmi.w	8009ca4 <_svfiprintf_r+0x28>
 8009e4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e4c:	e72c      	b.n	8009ca8 <_svfiprintf_r+0x2c>
 8009e4e:	ab03      	add	r3, sp, #12
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	462a      	mov	r2, r5
 8009e54:	4b05      	ldr	r3, [pc, #20]	@ (8009e6c <_svfiprintf_r+0x1f0>)
 8009e56:	a904      	add	r1, sp, #16
 8009e58:	4638      	mov	r0, r7
 8009e5a:	f7fc ff4f 	bl	8006cfc <_printf_i>
 8009e5e:	e7ed      	b.n	8009e3c <_svfiprintf_r+0x1c0>
 8009e60:	0800b199 	.word	0x0800b199
 8009e64:	0800b1a3 	.word	0x0800b1a3
 8009e68:	080067cd 	.word	0x080067cd
 8009e6c:	08009bc5 	.word	0x08009bc5
 8009e70:	0800b19f 	.word	0x0800b19f

08009e74 <__sflush_r>:
 8009e74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7c:	0716      	lsls	r6, r2, #28
 8009e7e:	4605      	mov	r5, r0
 8009e80:	460c      	mov	r4, r1
 8009e82:	d454      	bmi.n	8009f2e <__sflush_r+0xba>
 8009e84:	684b      	ldr	r3, [r1, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	dc02      	bgt.n	8009e90 <__sflush_r+0x1c>
 8009e8a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	dd48      	ble.n	8009f22 <__sflush_r+0xae>
 8009e90:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e92:	2e00      	cmp	r6, #0
 8009e94:	d045      	beq.n	8009f22 <__sflush_r+0xae>
 8009e96:	2300      	movs	r3, #0
 8009e98:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e9c:	682f      	ldr	r7, [r5, #0]
 8009e9e:	6a21      	ldr	r1, [r4, #32]
 8009ea0:	602b      	str	r3, [r5, #0]
 8009ea2:	d030      	beq.n	8009f06 <__sflush_r+0x92>
 8009ea4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	0759      	lsls	r1, r3, #29
 8009eaa:	d505      	bpl.n	8009eb8 <__sflush_r+0x44>
 8009eac:	6863      	ldr	r3, [r4, #4]
 8009eae:	1ad2      	subs	r2, r2, r3
 8009eb0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009eb2:	b10b      	cbz	r3, 8009eb8 <__sflush_r+0x44>
 8009eb4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009eb6:	1ad2      	subs	r2, r2, r3
 8009eb8:	2300      	movs	r3, #0
 8009eba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ebc:	6a21      	ldr	r1, [r4, #32]
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b0      	blx	r6
 8009ec2:	1c43      	adds	r3, r0, #1
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	d106      	bne.n	8009ed6 <__sflush_r+0x62>
 8009ec8:	6829      	ldr	r1, [r5, #0]
 8009eca:	291d      	cmp	r1, #29
 8009ecc:	d82b      	bhi.n	8009f26 <__sflush_r+0xb2>
 8009ece:	4a2a      	ldr	r2, [pc, #168]	@ (8009f78 <__sflush_r+0x104>)
 8009ed0:	410a      	asrs	r2, r1
 8009ed2:	07d6      	lsls	r6, r2, #31
 8009ed4:	d427      	bmi.n	8009f26 <__sflush_r+0xb2>
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	6062      	str	r2, [r4, #4]
 8009eda:	04d9      	lsls	r1, r3, #19
 8009edc:	6922      	ldr	r2, [r4, #16]
 8009ede:	6022      	str	r2, [r4, #0]
 8009ee0:	d504      	bpl.n	8009eec <__sflush_r+0x78>
 8009ee2:	1c42      	adds	r2, r0, #1
 8009ee4:	d101      	bne.n	8009eea <__sflush_r+0x76>
 8009ee6:	682b      	ldr	r3, [r5, #0]
 8009ee8:	b903      	cbnz	r3, 8009eec <__sflush_r+0x78>
 8009eea:	6560      	str	r0, [r4, #84]	@ 0x54
 8009eec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009eee:	602f      	str	r7, [r5, #0]
 8009ef0:	b1b9      	cbz	r1, 8009f22 <__sflush_r+0xae>
 8009ef2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ef6:	4299      	cmp	r1, r3
 8009ef8:	d002      	beq.n	8009f00 <__sflush_r+0x8c>
 8009efa:	4628      	mov	r0, r5
 8009efc:	f7fe fa2c 	bl	8008358 <_free_r>
 8009f00:	2300      	movs	r3, #0
 8009f02:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f04:	e00d      	b.n	8009f22 <__sflush_r+0xae>
 8009f06:	2301      	movs	r3, #1
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b0      	blx	r6
 8009f0c:	4602      	mov	r2, r0
 8009f0e:	1c50      	adds	r0, r2, #1
 8009f10:	d1c9      	bne.n	8009ea6 <__sflush_r+0x32>
 8009f12:	682b      	ldr	r3, [r5, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d0c6      	beq.n	8009ea6 <__sflush_r+0x32>
 8009f18:	2b1d      	cmp	r3, #29
 8009f1a:	d001      	beq.n	8009f20 <__sflush_r+0xac>
 8009f1c:	2b16      	cmp	r3, #22
 8009f1e:	d11e      	bne.n	8009f5e <__sflush_r+0xea>
 8009f20:	602f      	str	r7, [r5, #0]
 8009f22:	2000      	movs	r0, #0
 8009f24:	e022      	b.n	8009f6c <__sflush_r+0xf8>
 8009f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f2a:	b21b      	sxth	r3, r3
 8009f2c:	e01b      	b.n	8009f66 <__sflush_r+0xf2>
 8009f2e:	690f      	ldr	r7, [r1, #16]
 8009f30:	2f00      	cmp	r7, #0
 8009f32:	d0f6      	beq.n	8009f22 <__sflush_r+0xae>
 8009f34:	0793      	lsls	r3, r2, #30
 8009f36:	680e      	ldr	r6, [r1, #0]
 8009f38:	bf08      	it	eq
 8009f3a:	694b      	ldreq	r3, [r1, #20]
 8009f3c:	600f      	str	r7, [r1, #0]
 8009f3e:	bf18      	it	ne
 8009f40:	2300      	movne	r3, #0
 8009f42:	eba6 0807 	sub.w	r8, r6, r7
 8009f46:	608b      	str	r3, [r1, #8]
 8009f48:	f1b8 0f00 	cmp.w	r8, #0
 8009f4c:	dde9      	ble.n	8009f22 <__sflush_r+0xae>
 8009f4e:	6a21      	ldr	r1, [r4, #32]
 8009f50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009f52:	4643      	mov	r3, r8
 8009f54:	463a      	mov	r2, r7
 8009f56:	4628      	mov	r0, r5
 8009f58:	47b0      	blx	r6
 8009f5a:	2800      	cmp	r0, #0
 8009f5c:	dc08      	bgt.n	8009f70 <__sflush_r+0xfc>
 8009f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f66:	81a3      	strh	r3, [r4, #12]
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f70:	4407      	add	r7, r0
 8009f72:	eba8 0800 	sub.w	r8, r8, r0
 8009f76:	e7e7      	b.n	8009f48 <__sflush_r+0xd4>
 8009f78:	dfbffffe 	.word	0xdfbffffe

08009f7c <_fflush_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	690b      	ldr	r3, [r1, #16]
 8009f80:	4605      	mov	r5, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	b913      	cbnz	r3, 8009f8c <_fflush_r+0x10>
 8009f86:	2500      	movs	r5, #0
 8009f88:	4628      	mov	r0, r5
 8009f8a:	bd38      	pop	{r3, r4, r5, pc}
 8009f8c:	b118      	cbz	r0, 8009f96 <_fflush_r+0x1a>
 8009f8e:	6a03      	ldr	r3, [r0, #32]
 8009f90:	b90b      	cbnz	r3, 8009f96 <_fflush_r+0x1a>
 8009f92:	f7fd fa73 	bl	800747c <__sinit>
 8009f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0f3      	beq.n	8009f86 <_fflush_r+0xa>
 8009f9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009fa0:	07d0      	lsls	r0, r2, #31
 8009fa2:	d404      	bmi.n	8009fae <_fflush_r+0x32>
 8009fa4:	0599      	lsls	r1, r3, #22
 8009fa6:	d402      	bmi.n	8009fae <_fflush_r+0x32>
 8009fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009faa:	f7fd fb7e 	bl	80076aa <__retarget_lock_acquire_recursive>
 8009fae:	4628      	mov	r0, r5
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	f7ff ff5f 	bl	8009e74 <__sflush_r>
 8009fb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fb8:	07da      	lsls	r2, r3, #31
 8009fba:	4605      	mov	r5, r0
 8009fbc:	d4e4      	bmi.n	8009f88 <_fflush_r+0xc>
 8009fbe:	89a3      	ldrh	r3, [r4, #12]
 8009fc0:	059b      	lsls	r3, r3, #22
 8009fc2:	d4e1      	bmi.n	8009f88 <_fflush_r+0xc>
 8009fc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fc6:	f7fd fb71 	bl	80076ac <__retarget_lock_release_recursive>
 8009fca:	e7dd      	b.n	8009f88 <_fflush_r+0xc>

08009fcc <memmove>:
 8009fcc:	4288      	cmp	r0, r1
 8009fce:	b510      	push	{r4, lr}
 8009fd0:	eb01 0402 	add.w	r4, r1, r2
 8009fd4:	d902      	bls.n	8009fdc <memmove+0x10>
 8009fd6:	4284      	cmp	r4, r0
 8009fd8:	4623      	mov	r3, r4
 8009fda:	d807      	bhi.n	8009fec <memmove+0x20>
 8009fdc:	1e43      	subs	r3, r0, #1
 8009fde:	42a1      	cmp	r1, r4
 8009fe0:	d008      	beq.n	8009ff4 <memmove+0x28>
 8009fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fea:	e7f8      	b.n	8009fde <memmove+0x12>
 8009fec:	4402      	add	r2, r0
 8009fee:	4601      	mov	r1, r0
 8009ff0:	428a      	cmp	r2, r1
 8009ff2:	d100      	bne.n	8009ff6 <memmove+0x2a>
 8009ff4:	bd10      	pop	{r4, pc}
 8009ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ffe:	e7f7      	b.n	8009ff0 <memmove+0x24>

0800a000 <strncmp>:
 800a000:	b510      	push	{r4, lr}
 800a002:	b16a      	cbz	r2, 800a020 <strncmp+0x20>
 800a004:	3901      	subs	r1, #1
 800a006:	1884      	adds	r4, r0, r2
 800a008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a00c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a010:	429a      	cmp	r2, r3
 800a012:	d103      	bne.n	800a01c <strncmp+0x1c>
 800a014:	42a0      	cmp	r0, r4
 800a016:	d001      	beq.n	800a01c <strncmp+0x1c>
 800a018:	2a00      	cmp	r2, #0
 800a01a:	d1f5      	bne.n	800a008 <strncmp+0x8>
 800a01c:	1ad0      	subs	r0, r2, r3
 800a01e:	bd10      	pop	{r4, pc}
 800a020:	4610      	mov	r0, r2
 800a022:	e7fc      	b.n	800a01e <strncmp+0x1e>

0800a024 <_sbrk_r>:
 800a024:	b538      	push	{r3, r4, r5, lr}
 800a026:	4d06      	ldr	r5, [pc, #24]	@ (800a040 <_sbrk_r+0x1c>)
 800a028:	2300      	movs	r3, #0
 800a02a:	4604      	mov	r4, r0
 800a02c:	4608      	mov	r0, r1
 800a02e:	602b      	str	r3, [r5, #0]
 800a030:	f7f8 f8f6 	bl	8002220 <_sbrk>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_sbrk_r+0x1a>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_sbrk_r+0x1a>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	20000b00 	.word	0x20000b00

0800a044 <memcpy>:
 800a044:	440a      	add	r2, r1
 800a046:	4291      	cmp	r1, r2
 800a048:	f100 33ff 	add.w	r3, r0, #4294967295
 800a04c:	d100      	bne.n	800a050 <memcpy+0xc>
 800a04e:	4770      	bx	lr
 800a050:	b510      	push	{r4, lr}
 800a052:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a056:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a05a:	4291      	cmp	r1, r2
 800a05c:	d1f9      	bne.n	800a052 <memcpy+0xe>
 800a05e:	bd10      	pop	{r4, pc}

0800a060 <nan>:
 800a060:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a068 <nan+0x8>
 800a064:	4770      	bx	lr
 800a066:	bf00      	nop
 800a068:	00000000 	.word	0x00000000
 800a06c:	7ff80000 	.word	0x7ff80000

0800a070 <__assert_func>:
 800a070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a072:	4614      	mov	r4, r2
 800a074:	461a      	mov	r2, r3
 800a076:	4b09      	ldr	r3, [pc, #36]	@ (800a09c <__assert_func+0x2c>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4605      	mov	r5, r0
 800a07c:	68d8      	ldr	r0, [r3, #12]
 800a07e:	b954      	cbnz	r4, 800a096 <__assert_func+0x26>
 800a080:	4b07      	ldr	r3, [pc, #28]	@ (800a0a0 <__assert_func+0x30>)
 800a082:	461c      	mov	r4, r3
 800a084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a088:	9100      	str	r1, [sp, #0]
 800a08a:	462b      	mov	r3, r5
 800a08c:	4905      	ldr	r1, [pc, #20]	@ (800a0a4 <__assert_func+0x34>)
 800a08e:	f000 fba7 	bl	800a7e0 <fiprintf>
 800a092:	f000 fbb7 	bl	800a804 <abort>
 800a096:	4b04      	ldr	r3, [pc, #16]	@ (800a0a8 <__assert_func+0x38>)
 800a098:	e7f4      	b.n	800a084 <__assert_func+0x14>
 800a09a:	bf00      	nop
 800a09c:	20000018 	.word	0x20000018
 800a0a0:	0800b1ed 	.word	0x0800b1ed
 800a0a4:	0800b1bf 	.word	0x0800b1bf
 800a0a8:	0800b1b2 	.word	0x0800b1b2

0800a0ac <_calloc_r>:
 800a0ac:	b570      	push	{r4, r5, r6, lr}
 800a0ae:	fba1 5402 	umull	r5, r4, r1, r2
 800a0b2:	b93c      	cbnz	r4, 800a0c4 <_calloc_r+0x18>
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	f7fe f9c3 	bl	8008440 <_malloc_r>
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	b928      	cbnz	r0, 800a0ca <_calloc_r+0x1e>
 800a0be:	2600      	movs	r6, #0
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	bd70      	pop	{r4, r5, r6, pc}
 800a0c4:	220c      	movs	r2, #12
 800a0c6:	6002      	str	r2, [r0, #0]
 800a0c8:	e7f9      	b.n	800a0be <_calloc_r+0x12>
 800a0ca:	462a      	mov	r2, r5
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	f7fd fa6e 	bl	80075ae <memset>
 800a0d2:	e7f5      	b.n	800a0c0 <_calloc_r+0x14>

0800a0d4 <rshift>:
 800a0d4:	6903      	ldr	r3, [r0, #16]
 800a0d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a0da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a0e2:	f100 0414 	add.w	r4, r0, #20
 800a0e6:	dd45      	ble.n	800a174 <rshift+0xa0>
 800a0e8:	f011 011f 	ands.w	r1, r1, #31
 800a0ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a0f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a0f4:	d10c      	bne.n	800a110 <rshift+0x3c>
 800a0f6:	f100 0710 	add.w	r7, r0, #16
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	42b1      	cmp	r1, r6
 800a0fe:	d334      	bcc.n	800a16a <rshift+0x96>
 800a100:	1a9b      	subs	r3, r3, r2
 800a102:	009b      	lsls	r3, r3, #2
 800a104:	1eea      	subs	r2, r5, #3
 800a106:	4296      	cmp	r6, r2
 800a108:	bf38      	it	cc
 800a10a:	2300      	movcc	r3, #0
 800a10c:	4423      	add	r3, r4
 800a10e:	e015      	b.n	800a13c <rshift+0x68>
 800a110:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a114:	f1c1 0820 	rsb	r8, r1, #32
 800a118:	40cf      	lsrs	r7, r1
 800a11a:	f105 0e04 	add.w	lr, r5, #4
 800a11e:	46a1      	mov	r9, r4
 800a120:	4576      	cmp	r6, lr
 800a122:	46f4      	mov	ip, lr
 800a124:	d815      	bhi.n	800a152 <rshift+0x7e>
 800a126:	1a9a      	subs	r2, r3, r2
 800a128:	0092      	lsls	r2, r2, #2
 800a12a:	3a04      	subs	r2, #4
 800a12c:	3501      	adds	r5, #1
 800a12e:	42ae      	cmp	r6, r5
 800a130:	bf38      	it	cc
 800a132:	2200      	movcc	r2, #0
 800a134:	18a3      	adds	r3, r4, r2
 800a136:	50a7      	str	r7, [r4, r2]
 800a138:	b107      	cbz	r7, 800a13c <rshift+0x68>
 800a13a:	3304      	adds	r3, #4
 800a13c:	1b1a      	subs	r2, r3, r4
 800a13e:	42a3      	cmp	r3, r4
 800a140:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a144:	bf08      	it	eq
 800a146:	2300      	moveq	r3, #0
 800a148:	6102      	str	r2, [r0, #16]
 800a14a:	bf08      	it	eq
 800a14c:	6143      	streq	r3, [r0, #20]
 800a14e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a152:	f8dc c000 	ldr.w	ip, [ip]
 800a156:	fa0c fc08 	lsl.w	ip, ip, r8
 800a15a:	ea4c 0707 	orr.w	r7, ip, r7
 800a15e:	f849 7b04 	str.w	r7, [r9], #4
 800a162:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a166:	40cf      	lsrs	r7, r1
 800a168:	e7da      	b.n	800a120 <rshift+0x4c>
 800a16a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a16e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a172:	e7c3      	b.n	800a0fc <rshift+0x28>
 800a174:	4623      	mov	r3, r4
 800a176:	e7e1      	b.n	800a13c <rshift+0x68>

0800a178 <__hexdig_fun>:
 800a178:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a17c:	2b09      	cmp	r3, #9
 800a17e:	d802      	bhi.n	800a186 <__hexdig_fun+0xe>
 800a180:	3820      	subs	r0, #32
 800a182:	b2c0      	uxtb	r0, r0
 800a184:	4770      	bx	lr
 800a186:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a18a:	2b05      	cmp	r3, #5
 800a18c:	d801      	bhi.n	800a192 <__hexdig_fun+0x1a>
 800a18e:	3847      	subs	r0, #71	@ 0x47
 800a190:	e7f7      	b.n	800a182 <__hexdig_fun+0xa>
 800a192:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a196:	2b05      	cmp	r3, #5
 800a198:	d801      	bhi.n	800a19e <__hexdig_fun+0x26>
 800a19a:	3827      	subs	r0, #39	@ 0x27
 800a19c:	e7f1      	b.n	800a182 <__hexdig_fun+0xa>
 800a19e:	2000      	movs	r0, #0
 800a1a0:	4770      	bx	lr
	...

0800a1a4 <__gethex>:
 800a1a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a8:	b085      	sub	sp, #20
 800a1aa:	468a      	mov	sl, r1
 800a1ac:	9302      	str	r3, [sp, #8]
 800a1ae:	680b      	ldr	r3, [r1, #0]
 800a1b0:	9001      	str	r0, [sp, #4]
 800a1b2:	4690      	mov	r8, r2
 800a1b4:	1c9c      	adds	r4, r3, #2
 800a1b6:	46a1      	mov	r9, r4
 800a1b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a1bc:	2830      	cmp	r0, #48	@ 0x30
 800a1be:	d0fa      	beq.n	800a1b6 <__gethex+0x12>
 800a1c0:	eba9 0303 	sub.w	r3, r9, r3
 800a1c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a1c8:	f7ff ffd6 	bl	800a178 <__hexdig_fun>
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d168      	bne.n	800a2a4 <__gethex+0x100>
 800a1d2:	49a0      	ldr	r1, [pc, #640]	@ (800a454 <__gethex+0x2b0>)
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	4648      	mov	r0, r9
 800a1d8:	f7ff ff12 	bl	800a000 <strncmp>
 800a1dc:	4607      	mov	r7, r0
 800a1de:	2800      	cmp	r0, #0
 800a1e0:	d167      	bne.n	800a2b2 <__gethex+0x10e>
 800a1e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a1e6:	4626      	mov	r6, r4
 800a1e8:	f7ff ffc6 	bl	800a178 <__hexdig_fun>
 800a1ec:	2800      	cmp	r0, #0
 800a1ee:	d062      	beq.n	800a2b6 <__gethex+0x112>
 800a1f0:	4623      	mov	r3, r4
 800a1f2:	7818      	ldrb	r0, [r3, #0]
 800a1f4:	2830      	cmp	r0, #48	@ 0x30
 800a1f6:	4699      	mov	r9, r3
 800a1f8:	f103 0301 	add.w	r3, r3, #1
 800a1fc:	d0f9      	beq.n	800a1f2 <__gethex+0x4e>
 800a1fe:	f7ff ffbb 	bl	800a178 <__hexdig_fun>
 800a202:	fab0 f580 	clz	r5, r0
 800a206:	096d      	lsrs	r5, r5, #5
 800a208:	f04f 0b01 	mov.w	fp, #1
 800a20c:	464a      	mov	r2, r9
 800a20e:	4616      	mov	r6, r2
 800a210:	3201      	adds	r2, #1
 800a212:	7830      	ldrb	r0, [r6, #0]
 800a214:	f7ff ffb0 	bl	800a178 <__hexdig_fun>
 800a218:	2800      	cmp	r0, #0
 800a21a:	d1f8      	bne.n	800a20e <__gethex+0x6a>
 800a21c:	498d      	ldr	r1, [pc, #564]	@ (800a454 <__gethex+0x2b0>)
 800a21e:	2201      	movs	r2, #1
 800a220:	4630      	mov	r0, r6
 800a222:	f7ff feed 	bl	800a000 <strncmp>
 800a226:	2800      	cmp	r0, #0
 800a228:	d13f      	bne.n	800a2aa <__gethex+0x106>
 800a22a:	b944      	cbnz	r4, 800a23e <__gethex+0x9a>
 800a22c:	1c74      	adds	r4, r6, #1
 800a22e:	4622      	mov	r2, r4
 800a230:	4616      	mov	r6, r2
 800a232:	3201      	adds	r2, #1
 800a234:	7830      	ldrb	r0, [r6, #0]
 800a236:	f7ff ff9f 	bl	800a178 <__hexdig_fun>
 800a23a:	2800      	cmp	r0, #0
 800a23c:	d1f8      	bne.n	800a230 <__gethex+0x8c>
 800a23e:	1ba4      	subs	r4, r4, r6
 800a240:	00a7      	lsls	r7, r4, #2
 800a242:	7833      	ldrb	r3, [r6, #0]
 800a244:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a248:	2b50      	cmp	r3, #80	@ 0x50
 800a24a:	d13e      	bne.n	800a2ca <__gethex+0x126>
 800a24c:	7873      	ldrb	r3, [r6, #1]
 800a24e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a250:	d033      	beq.n	800a2ba <__gethex+0x116>
 800a252:	2b2d      	cmp	r3, #45	@ 0x2d
 800a254:	d034      	beq.n	800a2c0 <__gethex+0x11c>
 800a256:	1c71      	adds	r1, r6, #1
 800a258:	2400      	movs	r4, #0
 800a25a:	7808      	ldrb	r0, [r1, #0]
 800a25c:	f7ff ff8c 	bl	800a178 <__hexdig_fun>
 800a260:	1e43      	subs	r3, r0, #1
 800a262:	b2db      	uxtb	r3, r3
 800a264:	2b18      	cmp	r3, #24
 800a266:	d830      	bhi.n	800a2ca <__gethex+0x126>
 800a268:	f1a0 0210 	sub.w	r2, r0, #16
 800a26c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a270:	f7ff ff82 	bl	800a178 <__hexdig_fun>
 800a274:	f100 3cff 	add.w	ip, r0, #4294967295
 800a278:	fa5f fc8c 	uxtb.w	ip, ip
 800a27c:	f1bc 0f18 	cmp.w	ip, #24
 800a280:	f04f 030a 	mov.w	r3, #10
 800a284:	d91e      	bls.n	800a2c4 <__gethex+0x120>
 800a286:	b104      	cbz	r4, 800a28a <__gethex+0xe6>
 800a288:	4252      	negs	r2, r2
 800a28a:	4417      	add	r7, r2
 800a28c:	f8ca 1000 	str.w	r1, [sl]
 800a290:	b1ed      	cbz	r5, 800a2ce <__gethex+0x12a>
 800a292:	f1bb 0f00 	cmp.w	fp, #0
 800a296:	bf0c      	ite	eq
 800a298:	2506      	moveq	r5, #6
 800a29a:	2500      	movne	r5, #0
 800a29c:	4628      	mov	r0, r5
 800a29e:	b005      	add	sp, #20
 800a2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a4:	2500      	movs	r5, #0
 800a2a6:	462c      	mov	r4, r5
 800a2a8:	e7b0      	b.n	800a20c <__gethex+0x68>
 800a2aa:	2c00      	cmp	r4, #0
 800a2ac:	d1c7      	bne.n	800a23e <__gethex+0x9a>
 800a2ae:	4627      	mov	r7, r4
 800a2b0:	e7c7      	b.n	800a242 <__gethex+0x9e>
 800a2b2:	464e      	mov	r6, r9
 800a2b4:	462f      	mov	r7, r5
 800a2b6:	2501      	movs	r5, #1
 800a2b8:	e7c3      	b.n	800a242 <__gethex+0x9e>
 800a2ba:	2400      	movs	r4, #0
 800a2bc:	1cb1      	adds	r1, r6, #2
 800a2be:	e7cc      	b.n	800a25a <__gethex+0xb6>
 800a2c0:	2401      	movs	r4, #1
 800a2c2:	e7fb      	b.n	800a2bc <__gethex+0x118>
 800a2c4:	fb03 0002 	mla	r0, r3, r2, r0
 800a2c8:	e7ce      	b.n	800a268 <__gethex+0xc4>
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	e7de      	b.n	800a28c <__gethex+0xe8>
 800a2ce:	eba6 0309 	sub.w	r3, r6, r9
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	4629      	mov	r1, r5
 800a2d6:	2b07      	cmp	r3, #7
 800a2d8:	dc0a      	bgt.n	800a2f0 <__gethex+0x14c>
 800a2da:	9801      	ldr	r0, [sp, #4]
 800a2dc:	f7fe f93c 	bl	8008558 <_Balloc>
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	b940      	cbnz	r0, 800a2f6 <__gethex+0x152>
 800a2e4:	4b5c      	ldr	r3, [pc, #368]	@ (800a458 <__gethex+0x2b4>)
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	21e4      	movs	r1, #228	@ 0xe4
 800a2ea:	485c      	ldr	r0, [pc, #368]	@ (800a45c <__gethex+0x2b8>)
 800a2ec:	f7ff fec0 	bl	800a070 <__assert_func>
 800a2f0:	3101      	adds	r1, #1
 800a2f2:	105b      	asrs	r3, r3, #1
 800a2f4:	e7ef      	b.n	800a2d6 <__gethex+0x132>
 800a2f6:	f100 0a14 	add.w	sl, r0, #20
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	4655      	mov	r5, sl
 800a2fe:	469b      	mov	fp, r3
 800a300:	45b1      	cmp	r9, r6
 800a302:	d337      	bcc.n	800a374 <__gethex+0x1d0>
 800a304:	f845 bb04 	str.w	fp, [r5], #4
 800a308:	eba5 050a 	sub.w	r5, r5, sl
 800a30c:	10ad      	asrs	r5, r5, #2
 800a30e:	6125      	str	r5, [r4, #16]
 800a310:	4658      	mov	r0, fp
 800a312:	f7fe fa13 	bl	800873c <__hi0bits>
 800a316:	016d      	lsls	r5, r5, #5
 800a318:	f8d8 6000 	ldr.w	r6, [r8]
 800a31c:	1a2d      	subs	r5, r5, r0
 800a31e:	42b5      	cmp	r5, r6
 800a320:	dd54      	ble.n	800a3cc <__gethex+0x228>
 800a322:	1bad      	subs	r5, r5, r6
 800a324:	4629      	mov	r1, r5
 800a326:	4620      	mov	r0, r4
 800a328:	f7fe fda7 	bl	8008e7a <__any_on>
 800a32c:	4681      	mov	r9, r0
 800a32e:	b178      	cbz	r0, 800a350 <__gethex+0x1ac>
 800a330:	1e6b      	subs	r3, r5, #1
 800a332:	1159      	asrs	r1, r3, #5
 800a334:	f003 021f 	and.w	r2, r3, #31
 800a338:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a33c:	f04f 0901 	mov.w	r9, #1
 800a340:	fa09 f202 	lsl.w	r2, r9, r2
 800a344:	420a      	tst	r2, r1
 800a346:	d003      	beq.n	800a350 <__gethex+0x1ac>
 800a348:	454b      	cmp	r3, r9
 800a34a:	dc36      	bgt.n	800a3ba <__gethex+0x216>
 800a34c:	f04f 0902 	mov.w	r9, #2
 800a350:	4629      	mov	r1, r5
 800a352:	4620      	mov	r0, r4
 800a354:	f7ff febe 	bl	800a0d4 <rshift>
 800a358:	442f      	add	r7, r5
 800a35a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a35e:	42bb      	cmp	r3, r7
 800a360:	da42      	bge.n	800a3e8 <__gethex+0x244>
 800a362:	9801      	ldr	r0, [sp, #4]
 800a364:	4621      	mov	r1, r4
 800a366:	f7fe f937 	bl	80085d8 <_Bfree>
 800a36a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a36c:	2300      	movs	r3, #0
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	25a3      	movs	r5, #163	@ 0xa3
 800a372:	e793      	b.n	800a29c <__gethex+0xf8>
 800a374:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a378:	2a2e      	cmp	r2, #46	@ 0x2e
 800a37a:	d012      	beq.n	800a3a2 <__gethex+0x1fe>
 800a37c:	2b20      	cmp	r3, #32
 800a37e:	d104      	bne.n	800a38a <__gethex+0x1e6>
 800a380:	f845 bb04 	str.w	fp, [r5], #4
 800a384:	f04f 0b00 	mov.w	fp, #0
 800a388:	465b      	mov	r3, fp
 800a38a:	7830      	ldrb	r0, [r6, #0]
 800a38c:	9303      	str	r3, [sp, #12]
 800a38e:	f7ff fef3 	bl	800a178 <__hexdig_fun>
 800a392:	9b03      	ldr	r3, [sp, #12]
 800a394:	f000 000f 	and.w	r0, r0, #15
 800a398:	4098      	lsls	r0, r3
 800a39a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a39e:	3304      	adds	r3, #4
 800a3a0:	e7ae      	b.n	800a300 <__gethex+0x15c>
 800a3a2:	45b1      	cmp	r9, r6
 800a3a4:	d8ea      	bhi.n	800a37c <__gethex+0x1d8>
 800a3a6:	492b      	ldr	r1, [pc, #172]	@ (800a454 <__gethex+0x2b0>)
 800a3a8:	9303      	str	r3, [sp, #12]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f7ff fe27 	bl	800a000 <strncmp>
 800a3b2:	9b03      	ldr	r3, [sp, #12]
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d1e1      	bne.n	800a37c <__gethex+0x1d8>
 800a3b8:	e7a2      	b.n	800a300 <__gethex+0x15c>
 800a3ba:	1ea9      	subs	r1, r5, #2
 800a3bc:	4620      	mov	r0, r4
 800a3be:	f7fe fd5c 	bl	8008e7a <__any_on>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d0c2      	beq.n	800a34c <__gethex+0x1a8>
 800a3c6:	f04f 0903 	mov.w	r9, #3
 800a3ca:	e7c1      	b.n	800a350 <__gethex+0x1ac>
 800a3cc:	da09      	bge.n	800a3e2 <__gethex+0x23e>
 800a3ce:	1b75      	subs	r5, r6, r5
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	9801      	ldr	r0, [sp, #4]
 800a3d4:	462a      	mov	r2, r5
 800a3d6:	f7fe fb17 	bl	8008a08 <__lshift>
 800a3da:	1b7f      	subs	r7, r7, r5
 800a3dc:	4604      	mov	r4, r0
 800a3de:	f100 0a14 	add.w	sl, r0, #20
 800a3e2:	f04f 0900 	mov.w	r9, #0
 800a3e6:	e7b8      	b.n	800a35a <__gethex+0x1b6>
 800a3e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a3ec:	42bd      	cmp	r5, r7
 800a3ee:	dd6f      	ble.n	800a4d0 <__gethex+0x32c>
 800a3f0:	1bed      	subs	r5, r5, r7
 800a3f2:	42ae      	cmp	r6, r5
 800a3f4:	dc34      	bgt.n	800a460 <__gethex+0x2bc>
 800a3f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d022      	beq.n	800a444 <__gethex+0x2a0>
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d024      	beq.n	800a44c <__gethex+0x2a8>
 800a402:	2b01      	cmp	r3, #1
 800a404:	d115      	bne.n	800a432 <__gethex+0x28e>
 800a406:	42ae      	cmp	r6, r5
 800a408:	d113      	bne.n	800a432 <__gethex+0x28e>
 800a40a:	2e01      	cmp	r6, #1
 800a40c:	d10b      	bne.n	800a426 <__gethex+0x282>
 800a40e:	9a02      	ldr	r2, [sp, #8]
 800a410:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a414:	6013      	str	r3, [r2, #0]
 800a416:	2301      	movs	r3, #1
 800a418:	6123      	str	r3, [r4, #16]
 800a41a:	f8ca 3000 	str.w	r3, [sl]
 800a41e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a420:	2562      	movs	r5, #98	@ 0x62
 800a422:	601c      	str	r4, [r3, #0]
 800a424:	e73a      	b.n	800a29c <__gethex+0xf8>
 800a426:	1e71      	subs	r1, r6, #1
 800a428:	4620      	mov	r0, r4
 800a42a:	f7fe fd26 	bl	8008e7a <__any_on>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d1ed      	bne.n	800a40e <__gethex+0x26a>
 800a432:	9801      	ldr	r0, [sp, #4]
 800a434:	4621      	mov	r1, r4
 800a436:	f7fe f8cf 	bl	80085d8 <_Bfree>
 800a43a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a43c:	2300      	movs	r3, #0
 800a43e:	6013      	str	r3, [r2, #0]
 800a440:	2550      	movs	r5, #80	@ 0x50
 800a442:	e72b      	b.n	800a29c <__gethex+0xf8>
 800a444:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a446:	2b00      	cmp	r3, #0
 800a448:	d1f3      	bne.n	800a432 <__gethex+0x28e>
 800a44a:	e7e0      	b.n	800a40e <__gethex+0x26a>
 800a44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d1dd      	bne.n	800a40e <__gethex+0x26a>
 800a452:	e7ee      	b.n	800a432 <__gethex+0x28e>
 800a454:	0800b040 	.word	0x0800b040
 800a458:	0800aed5 	.word	0x0800aed5
 800a45c:	0800b1ee 	.word	0x0800b1ee
 800a460:	1e6f      	subs	r7, r5, #1
 800a462:	f1b9 0f00 	cmp.w	r9, #0
 800a466:	d130      	bne.n	800a4ca <__gethex+0x326>
 800a468:	b127      	cbz	r7, 800a474 <__gethex+0x2d0>
 800a46a:	4639      	mov	r1, r7
 800a46c:	4620      	mov	r0, r4
 800a46e:	f7fe fd04 	bl	8008e7a <__any_on>
 800a472:	4681      	mov	r9, r0
 800a474:	117a      	asrs	r2, r7, #5
 800a476:	2301      	movs	r3, #1
 800a478:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a47c:	f007 071f 	and.w	r7, r7, #31
 800a480:	40bb      	lsls	r3, r7
 800a482:	4213      	tst	r3, r2
 800a484:	4629      	mov	r1, r5
 800a486:	4620      	mov	r0, r4
 800a488:	bf18      	it	ne
 800a48a:	f049 0902 	orrne.w	r9, r9, #2
 800a48e:	f7ff fe21 	bl	800a0d4 <rshift>
 800a492:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a496:	1b76      	subs	r6, r6, r5
 800a498:	2502      	movs	r5, #2
 800a49a:	f1b9 0f00 	cmp.w	r9, #0
 800a49e:	d047      	beq.n	800a530 <__gethex+0x38c>
 800a4a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	d015      	beq.n	800a4d4 <__gethex+0x330>
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d017      	beq.n	800a4dc <__gethex+0x338>
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d109      	bne.n	800a4c4 <__gethex+0x320>
 800a4b0:	f019 0f02 	tst.w	r9, #2
 800a4b4:	d006      	beq.n	800a4c4 <__gethex+0x320>
 800a4b6:	f8da 3000 	ldr.w	r3, [sl]
 800a4ba:	ea49 0903 	orr.w	r9, r9, r3
 800a4be:	f019 0f01 	tst.w	r9, #1
 800a4c2:	d10e      	bne.n	800a4e2 <__gethex+0x33e>
 800a4c4:	f045 0510 	orr.w	r5, r5, #16
 800a4c8:	e032      	b.n	800a530 <__gethex+0x38c>
 800a4ca:	f04f 0901 	mov.w	r9, #1
 800a4ce:	e7d1      	b.n	800a474 <__gethex+0x2d0>
 800a4d0:	2501      	movs	r5, #1
 800a4d2:	e7e2      	b.n	800a49a <__gethex+0x2f6>
 800a4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4d6:	f1c3 0301 	rsb	r3, r3, #1
 800a4da:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d0f0      	beq.n	800a4c4 <__gethex+0x320>
 800a4e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4e6:	f104 0314 	add.w	r3, r4, #20
 800a4ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a4f2:	f04f 0c00 	mov.w	ip, #0
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a500:	d01b      	beq.n	800a53a <__gethex+0x396>
 800a502:	3201      	adds	r2, #1
 800a504:	6002      	str	r2, [r0, #0]
 800a506:	2d02      	cmp	r5, #2
 800a508:	f104 0314 	add.w	r3, r4, #20
 800a50c:	d13c      	bne.n	800a588 <__gethex+0x3e4>
 800a50e:	f8d8 2000 	ldr.w	r2, [r8]
 800a512:	3a01      	subs	r2, #1
 800a514:	42b2      	cmp	r2, r6
 800a516:	d109      	bne.n	800a52c <__gethex+0x388>
 800a518:	1171      	asrs	r1, r6, #5
 800a51a:	2201      	movs	r2, #1
 800a51c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a520:	f006 061f 	and.w	r6, r6, #31
 800a524:	fa02 f606 	lsl.w	r6, r2, r6
 800a528:	421e      	tst	r6, r3
 800a52a:	d13a      	bne.n	800a5a2 <__gethex+0x3fe>
 800a52c:	f045 0520 	orr.w	r5, r5, #32
 800a530:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a532:	601c      	str	r4, [r3, #0]
 800a534:	9b02      	ldr	r3, [sp, #8]
 800a536:	601f      	str	r7, [r3, #0]
 800a538:	e6b0      	b.n	800a29c <__gethex+0xf8>
 800a53a:	4299      	cmp	r1, r3
 800a53c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a540:	d8d9      	bhi.n	800a4f6 <__gethex+0x352>
 800a542:	68a3      	ldr	r3, [r4, #8]
 800a544:	459b      	cmp	fp, r3
 800a546:	db17      	blt.n	800a578 <__gethex+0x3d4>
 800a548:	6861      	ldr	r1, [r4, #4]
 800a54a:	9801      	ldr	r0, [sp, #4]
 800a54c:	3101      	adds	r1, #1
 800a54e:	f7fe f803 	bl	8008558 <_Balloc>
 800a552:	4681      	mov	r9, r0
 800a554:	b918      	cbnz	r0, 800a55e <__gethex+0x3ba>
 800a556:	4b1a      	ldr	r3, [pc, #104]	@ (800a5c0 <__gethex+0x41c>)
 800a558:	4602      	mov	r2, r0
 800a55a:	2184      	movs	r1, #132	@ 0x84
 800a55c:	e6c5      	b.n	800a2ea <__gethex+0x146>
 800a55e:	6922      	ldr	r2, [r4, #16]
 800a560:	3202      	adds	r2, #2
 800a562:	f104 010c 	add.w	r1, r4, #12
 800a566:	0092      	lsls	r2, r2, #2
 800a568:	300c      	adds	r0, #12
 800a56a:	f7ff fd6b 	bl	800a044 <memcpy>
 800a56e:	4621      	mov	r1, r4
 800a570:	9801      	ldr	r0, [sp, #4]
 800a572:	f7fe f831 	bl	80085d8 <_Bfree>
 800a576:	464c      	mov	r4, r9
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	1c5a      	adds	r2, r3, #1
 800a57c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a580:	6122      	str	r2, [r4, #16]
 800a582:	2201      	movs	r2, #1
 800a584:	615a      	str	r2, [r3, #20]
 800a586:	e7be      	b.n	800a506 <__gethex+0x362>
 800a588:	6922      	ldr	r2, [r4, #16]
 800a58a:	455a      	cmp	r2, fp
 800a58c:	dd0b      	ble.n	800a5a6 <__gethex+0x402>
 800a58e:	2101      	movs	r1, #1
 800a590:	4620      	mov	r0, r4
 800a592:	f7ff fd9f 	bl	800a0d4 <rshift>
 800a596:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a59a:	3701      	adds	r7, #1
 800a59c:	42bb      	cmp	r3, r7
 800a59e:	f6ff aee0 	blt.w	800a362 <__gethex+0x1be>
 800a5a2:	2501      	movs	r5, #1
 800a5a4:	e7c2      	b.n	800a52c <__gethex+0x388>
 800a5a6:	f016 061f 	ands.w	r6, r6, #31
 800a5aa:	d0fa      	beq.n	800a5a2 <__gethex+0x3fe>
 800a5ac:	4453      	add	r3, sl
 800a5ae:	f1c6 0620 	rsb	r6, r6, #32
 800a5b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a5b6:	f7fe f8c1 	bl	800873c <__hi0bits>
 800a5ba:	42b0      	cmp	r0, r6
 800a5bc:	dbe7      	blt.n	800a58e <__gethex+0x3ea>
 800a5be:	e7f0      	b.n	800a5a2 <__gethex+0x3fe>
 800a5c0:	0800aed5 	.word	0x0800aed5

0800a5c4 <L_shift>:
 800a5c4:	f1c2 0208 	rsb	r2, r2, #8
 800a5c8:	0092      	lsls	r2, r2, #2
 800a5ca:	b570      	push	{r4, r5, r6, lr}
 800a5cc:	f1c2 0620 	rsb	r6, r2, #32
 800a5d0:	6843      	ldr	r3, [r0, #4]
 800a5d2:	6804      	ldr	r4, [r0, #0]
 800a5d4:	fa03 f506 	lsl.w	r5, r3, r6
 800a5d8:	432c      	orrs	r4, r5
 800a5da:	40d3      	lsrs	r3, r2
 800a5dc:	6004      	str	r4, [r0, #0]
 800a5de:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5e2:	4288      	cmp	r0, r1
 800a5e4:	d3f4      	bcc.n	800a5d0 <L_shift+0xc>
 800a5e6:	bd70      	pop	{r4, r5, r6, pc}

0800a5e8 <__match>:
 800a5e8:	b530      	push	{r4, r5, lr}
 800a5ea:	6803      	ldr	r3, [r0, #0]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5f2:	b914      	cbnz	r4, 800a5fa <__match+0x12>
 800a5f4:	6003      	str	r3, [r0, #0]
 800a5f6:	2001      	movs	r0, #1
 800a5f8:	bd30      	pop	{r4, r5, pc}
 800a5fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a602:	2d19      	cmp	r5, #25
 800a604:	bf98      	it	ls
 800a606:	3220      	addls	r2, #32
 800a608:	42a2      	cmp	r2, r4
 800a60a:	d0f0      	beq.n	800a5ee <__match+0x6>
 800a60c:	2000      	movs	r0, #0
 800a60e:	e7f3      	b.n	800a5f8 <__match+0x10>

0800a610 <__hexnan>:
 800a610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a614:	680b      	ldr	r3, [r1, #0]
 800a616:	6801      	ldr	r1, [r0, #0]
 800a618:	115e      	asrs	r6, r3, #5
 800a61a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a61e:	f013 031f 	ands.w	r3, r3, #31
 800a622:	b087      	sub	sp, #28
 800a624:	bf18      	it	ne
 800a626:	3604      	addne	r6, #4
 800a628:	2500      	movs	r5, #0
 800a62a:	1f37      	subs	r7, r6, #4
 800a62c:	4682      	mov	sl, r0
 800a62e:	4690      	mov	r8, r2
 800a630:	9301      	str	r3, [sp, #4]
 800a632:	f846 5c04 	str.w	r5, [r6, #-4]
 800a636:	46b9      	mov	r9, r7
 800a638:	463c      	mov	r4, r7
 800a63a:	9502      	str	r5, [sp, #8]
 800a63c:	46ab      	mov	fp, r5
 800a63e:	784a      	ldrb	r2, [r1, #1]
 800a640:	1c4b      	adds	r3, r1, #1
 800a642:	9303      	str	r3, [sp, #12]
 800a644:	b342      	cbz	r2, 800a698 <__hexnan+0x88>
 800a646:	4610      	mov	r0, r2
 800a648:	9105      	str	r1, [sp, #20]
 800a64a:	9204      	str	r2, [sp, #16]
 800a64c:	f7ff fd94 	bl	800a178 <__hexdig_fun>
 800a650:	2800      	cmp	r0, #0
 800a652:	d151      	bne.n	800a6f8 <__hexnan+0xe8>
 800a654:	9a04      	ldr	r2, [sp, #16]
 800a656:	9905      	ldr	r1, [sp, #20]
 800a658:	2a20      	cmp	r2, #32
 800a65a:	d818      	bhi.n	800a68e <__hexnan+0x7e>
 800a65c:	9b02      	ldr	r3, [sp, #8]
 800a65e:	459b      	cmp	fp, r3
 800a660:	dd13      	ble.n	800a68a <__hexnan+0x7a>
 800a662:	454c      	cmp	r4, r9
 800a664:	d206      	bcs.n	800a674 <__hexnan+0x64>
 800a666:	2d07      	cmp	r5, #7
 800a668:	dc04      	bgt.n	800a674 <__hexnan+0x64>
 800a66a:	462a      	mov	r2, r5
 800a66c:	4649      	mov	r1, r9
 800a66e:	4620      	mov	r0, r4
 800a670:	f7ff ffa8 	bl	800a5c4 <L_shift>
 800a674:	4544      	cmp	r4, r8
 800a676:	d952      	bls.n	800a71e <__hexnan+0x10e>
 800a678:	2300      	movs	r3, #0
 800a67a:	f1a4 0904 	sub.w	r9, r4, #4
 800a67e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a682:	f8cd b008 	str.w	fp, [sp, #8]
 800a686:	464c      	mov	r4, r9
 800a688:	461d      	mov	r5, r3
 800a68a:	9903      	ldr	r1, [sp, #12]
 800a68c:	e7d7      	b.n	800a63e <__hexnan+0x2e>
 800a68e:	2a29      	cmp	r2, #41	@ 0x29
 800a690:	d157      	bne.n	800a742 <__hexnan+0x132>
 800a692:	3102      	adds	r1, #2
 800a694:	f8ca 1000 	str.w	r1, [sl]
 800a698:	f1bb 0f00 	cmp.w	fp, #0
 800a69c:	d051      	beq.n	800a742 <__hexnan+0x132>
 800a69e:	454c      	cmp	r4, r9
 800a6a0:	d206      	bcs.n	800a6b0 <__hexnan+0xa0>
 800a6a2:	2d07      	cmp	r5, #7
 800a6a4:	dc04      	bgt.n	800a6b0 <__hexnan+0xa0>
 800a6a6:	462a      	mov	r2, r5
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f7ff ff8a 	bl	800a5c4 <L_shift>
 800a6b0:	4544      	cmp	r4, r8
 800a6b2:	d936      	bls.n	800a722 <__hexnan+0x112>
 800a6b4:	f1a8 0204 	sub.w	r2, r8, #4
 800a6b8:	4623      	mov	r3, r4
 800a6ba:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6be:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6c2:	429f      	cmp	r7, r3
 800a6c4:	d2f9      	bcs.n	800a6ba <__hexnan+0xaa>
 800a6c6:	1b3b      	subs	r3, r7, r4
 800a6c8:	f023 0303 	bic.w	r3, r3, #3
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	3401      	adds	r4, #1
 800a6d0:	3e03      	subs	r6, #3
 800a6d2:	42b4      	cmp	r4, r6
 800a6d4:	bf88      	it	hi
 800a6d6:	2304      	movhi	r3, #4
 800a6d8:	4443      	add	r3, r8
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f843 2b04 	str.w	r2, [r3], #4
 800a6e0:	429f      	cmp	r7, r3
 800a6e2:	d2fb      	bcs.n	800a6dc <__hexnan+0xcc>
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	b91b      	cbnz	r3, 800a6f0 <__hexnan+0xe0>
 800a6e8:	4547      	cmp	r7, r8
 800a6ea:	d128      	bne.n	800a73e <__hexnan+0x12e>
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	603b      	str	r3, [r7, #0]
 800a6f0:	2005      	movs	r0, #5
 800a6f2:	b007      	add	sp, #28
 800a6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f8:	3501      	adds	r5, #1
 800a6fa:	2d08      	cmp	r5, #8
 800a6fc:	f10b 0b01 	add.w	fp, fp, #1
 800a700:	dd06      	ble.n	800a710 <__hexnan+0x100>
 800a702:	4544      	cmp	r4, r8
 800a704:	d9c1      	bls.n	800a68a <__hexnan+0x7a>
 800a706:	2300      	movs	r3, #0
 800a708:	f844 3c04 	str.w	r3, [r4, #-4]
 800a70c:	2501      	movs	r5, #1
 800a70e:	3c04      	subs	r4, #4
 800a710:	6822      	ldr	r2, [r4, #0]
 800a712:	f000 000f 	and.w	r0, r0, #15
 800a716:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a71a:	6020      	str	r0, [r4, #0]
 800a71c:	e7b5      	b.n	800a68a <__hexnan+0x7a>
 800a71e:	2508      	movs	r5, #8
 800a720:	e7b3      	b.n	800a68a <__hexnan+0x7a>
 800a722:	9b01      	ldr	r3, [sp, #4]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d0dd      	beq.n	800a6e4 <__hexnan+0xd4>
 800a728:	f1c3 0320 	rsb	r3, r3, #32
 800a72c:	f04f 32ff 	mov.w	r2, #4294967295
 800a730:	40da      	lsrs	r2, r3
 800a732:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a736:	4013      	ands	r3, r2
 800a738:	f846 3c04 	str.w	r3, [r6, #-4]
 800a73c:	e7d2      	b.n	800a6e4 <__hexnan+0xd4>
 800a73e:	3f04      	subs	r7, #4
 800a740:	e7d0      	b.n	800a6e4 <__hexnan+0xd4>
 800a742:	2004      	movs	r0, #4
 800a744:	e7d5      	b.n	800a6f2 <__hexnan+0xe2>

0800a746 <__ascii_mbtowc>:
 800a746:	b082      	sub	sp, #8
 800a748:	b901      	cbnz	r1, 800a74c <__ascii_mbtowc+0x6>
 800a74a:	a901      	add	r1, sp, #4
 800a74c:	b142      	cbz	r2, 800a760 <__ascii_mbtowc+0x1a>
 800a74e:	b14b      	cbz	r3, 800a764 <__ascii_mbtowc+0x1e>
 800a750:	7813      	ldrb	r3, [r2, #0]
 800a752:	600b      	str	r3, [r1, #0]
 800a754:	7812      	ldrb	r2, [r2, #0]
 800a756:	1e10      	subs	r0, r2, #0
 800a758:	bf18      	it	ne
 800a75a:	2001      	movne	r0, #1
 800a75c:	b002      	add	sp, #8
 800a75e:	4770      	bx	lr
 800a760:	4610      	mov	r0, r2
 800a762:	e7fb      	b.n	800a75c <__ascii_mbtowc+0x16>
 800a764:	f06f 0001 	mvn.w	r0, #1
 800a768:	e7f8      	b.n	800a75c <__ascii_mbtowc+0x16>

0800a76a <_realloc_r>:
 800a76a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a76e:	4680      	mov	r8, r0
 800a770:	4615      	mov	r5, r2
 800a772:	460c      	mov	r4, r1
 800a774:	b921      	cbnz	r1, 800a780 <_realloc_r+0x16>
 800a776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a77a:	4611      	mov	r1, r2
 800a77c:	f7fd be60 	b.w	8008440 <_malloc_r>
 800a780:	b92a      	cbnz	r2, 800a78e <_realloc_r+0x24>
 800a782:	f7fd fde9 	bl	8008358 <_free_r>
 800a786:	2400      	movs	r4, #0
 800a788:	4620      	mov	r0, r4
 800a78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a78e:	f000 f840 	bl	800a812 <_malloc_usable_size_r>
 800a792:	4285      	cmp	r5, r0
 800a794:	4606      	mov	r6, r0
 800a796:	d802      	bhi.n	800a79e <_realloc_r+0x34>
 800a798:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a79c:	d8f4      	bhi.n	800a788 <_realloc_r+0x1e>
 800a79e:	4629      	mov	r1, r5
 800a7a0:	4640      	mov	r0, r8
 800a7a2:	f7fd fe4d 	bl	8008440 <_malloc_r>
 800a7a6:	4607      	mov	r7, r0
 800a7a8:	2800      	cmp	r0, #0
 800a7aa:	d0ec      	beq.n	800a786 <_realloc_r+0x1c>
 800a7ac:	42b5      	cmp	r5, r6
 800a7ae:	462a      	mov	r2, r5
 800a7b0:	4621      	mov	r1, r4
 800a7b2:	bf28      	it	cs
 800a7b4:	4632      	movcs	r2, r6
 800a7b6:	f7ff fc45 	bl	800a044 <memcpy>
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4640      	mov	r0, r8
 800a7be:	f7fd fdcb 	bl	8008358 <_free_r>
 800a7c2:	463c      	mov	r4, r7
 800a7c4:	e7e0      	b.n	800a788 <_realloc_r+0x1e>

0800a7c6 <__ascii_wctomb>:
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	b141      	cbz	r1, 800a7de <__ascii_wctomb+0x18>
 800a7cc:	2aff      	cmp	r2, #255	@ 0xff
 800a7ce:	d904      	bls.n	800a7da <__ascii_wctomb+0x14>
 800a7d0:	228a      	movs	r2, #138	@ 0x8a
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d8:	4770      	bx	lr
 800a7da:	700a      	strb	r2, [r1, #0]
 800a7dc:	2001      	movs	r0, #1
 800a7de:	4770      	bx	lr

0800a7e0 <fiprintf>:
 800a7e0:	b40e      	push	{r1, r2, r3}
 800a7e2:	b503      	push	{r0, r1, lr}
 800a7e4:	4601      	mov	r1, r0
 800a7e6:	ab03      	add	r3, sp, #12
 800a7e8:	4805      	ldr	r0, [pc, #20]	@ (800a800 <fiprintf+0x20>)
 800a7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7ee:	6800      	ldr	r0, [r0, #0]
 800a7f0:	9301      	str	r3, [sp, #4]
 800a7f2:	f000 f83f 	bl	800a874 <_vfiprintf_r>
 800a7f6:	b002      	add	sp, #8
 800a7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7fc:	b003      	add	sp, #12
 800a7fe:	4770      	bx	lr
 800a800:	20000018 	.word	0x20000018

0800a804 <abort>:
 800a804:	b508      	push	{r3, lr}
 800a806:	2006      	movs	r0, #6
 800a808:	f000 fa08 	bl	800ac1c <raise>
 800a80c:	2001      	movs	r0, #1
 800a80e:	f7f7 fc8f 	bl	8002130 <_exit>

0800a812 <_malloc_usable_size_r>:
 800a812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a816:	1f18      	subs	r0, r3, #4
 800a818:	2b00      	cmp	r3, #0
 800a81a:	bfbc      	itt	lt
 800a81c:	580b      	ldrlt	r3, [r1, r0]
 800a81e:	18c0      	addlt	r0, r0, r3
 800a820:	4770      	bx	lr

0800a822 <__sfputc_r>:
 800a822:	6893      	ldr	r3, [r2, #8]
 800a824:	3b01      	subs	r3, #1
 800a826:	2b00      	cmp	r3, #0
 800a828:	b410      	push	{r4}
 800a82a:	6093      	str	r3, [r2, #8]
 800a82c:	da08      	bge.n	800a840 <__sfputc_r+0x1e>
 800a82e:	6994      	ldr	r4, [r2, #24]
 800a830:	42a3      	cmp	r3, r4
 800a832:	db01      	blt.n	800a838 <__sfputc_r+0x16>
 800a834:	290a      	cmp	r1, #10
 800a836:	d103      	bne.n	800a840 <__sfputc_r+0x1e>
 800a838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a83c:	f000 b932 	b.w	800aaa4 <__swbuf_r>
 800a840:	6813      	ldr	r3, [r2, #0]
 800a842:	1c58      	adds	r0, r3, #1
 800a844:	6010      	str	r0, [r2, #0]
 800a846:	7019      	strb	r1, [r3, #0]
 800a848:	4608      	mov	r0, r1
 800a84a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <__sfputs_r>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	4606      	mov	r6, r0
 800a854:	460f      	mov	r7, r1
 800a856:	4614      	mov	r4, r2
 800a858:	18d5      	adds	r5, r2, r3
 800a85a:	42ac      	cmp	r4, r5
 800a85c:	d101      	bne.n	800a862 <__sfputs_r+0x12>
 800a85e:	2000      	movs	r0, #0
 800a860:	e007      	b.n	800a872 <__sfputs_r+0x22>
 800a862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a866:	463a      	mov	r2, r7
 800a868:	4630      	mov	r0, r6
 800a86a:	f7ff ffda 	bl	800a822 <__sfputc_r>
 800a86e:	1c43      	adds	r3, r0, #1
 800a870:	d1f3      	bne.n	800a85a <__sfputs_r+0xa>
 800a872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a874 <_vfiprintf_r>:
 800a874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a878:	460d      	mov	r5, r1
 800a87a:	b09d      	sub	sp, #116	@ 0x74
 800a87c:	4614      	mov	r4, r2
 800a87e:	4698      	mov	r8, r3
 800a880:	4606      	mov	r6, r0
 800a882:	b118      	cbz	r0, 800a88c <_vfiprintf_r+0x18>
 800a884:	6a03      	ldr	r3, [r0, #32]
 800a886:	b90b      	cbnz	r3, 800a88c <_vfiprintf_r+0x18>
 800a888:	f7fc fdf8 	bl	800747c <__sinit>
 800a88c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a88e:	07d9      	lsls	r1, r3, #31
 800a890:	d405      	bmi.n	800a89e <_vfiprintf_r+0x2a>
 800a892:	89ab      	ldrh	r3, [r5, #12]
 800a894:	059a      	lsls	r2, r3, #22
 800a896:	d402      	bmi.n	800a89e <_vfiprintf_r+0x2a>
 800a898:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a89a:	f7fc ff06 	bl	80076aa <__retarget_lock_acquire_recursive>
 800a89e:	89ab      	ldrh	r3, [r5, #12]
 800a8a0:	071b      	lsls	r3, r3, #28
 800a8a2:	d501      	bpl.n	800a8a8 <_vfiprintf_r+0x34>
 800a8a4:	692b      	ldr	r3, [r5, #16]
 800a8a6:	b99b      	cbnz	r3, 800a8d0 <_vfiprintf_r+0x5c>
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	4630      	mov	r0, r6
 800a8ac:	f000 f938 	bl	800ab20 <__swsetup_r>
 800a8b0:	b170      	cbz	r0, 800a8d0 <_vfiprintf_r+0x5c>
 800a8b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8b4:	07dc      	lsls	r4, r3, #31
 800a8b6:	d504      	bpl.n	800a8c2 <_vfiprintf_r+0x4e>
 800a8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8bc:	b01d      	add	sp, #116	@ 0x74
 800a8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c2:	89ab      	ldrh	r3, [r5, #12]
 800a8c4:	0598      	lsls	r0, r3, #22
 800a8c6:	d4f7      	bmi.n	800a8b8 <_vfiprintf_r+0x44>
 800a8c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8ca:	f7fc feef 	bl	80076ac <__retarget_lock_release_recursive>
 800a8ce:	e7f3      	b.n	800a8b8 <_vfiprintf_r+0x44>
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8d4:	2320      	movs	r3, #32
 800a8d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8de:	2330      	movs	r3, #48	@ 0x30
 800a8e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa90 <_vfiprintf_r+0x21c>
 800a8e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8e8:	f04f 0901 	mov.w	r9, #1
 800a8ec:	4623      	mov	r3, r4
 800a8ee:	469a      	mov	sl, r3
 800a8f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8f4:	b10a      	cbz	r2, 800a8fa <_vfiprintf_r+0x86>
 800a8f6:	2a25      	cmp	r2, #37	@ 0x25
 800a8f8:	d1f9      	bne.n	800a8ee <_vfiprintf_r+0x7a>
 800a8fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a8fe:	d00b      	beq.n	800a918 <_vfiprintf_r+0xa4>
 800a900:	465b      	mov	r3, fp
 800a902:	4622      	mov	r2, r4
 800a904:	4629      	mov	r1, r5
 800a906:	4630      	mov	r0, r6
 800a908:	f7ff ffa2 	bl	800a850 <__sfputs_r>
 800a90c:	3001      	adds	r0, #1
 800a90e:	f000 80a7 	beq.w	800aa60 <_vfiprintf_r+0x1ec>
 800a912:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a914:	445a      	add	r2, fp
 800a916:	9209      	str	r2, [sp, #36]	@ 0x24
 800a918:	f89a 3000 	ldrb.w	r3, [sl]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 809f 	beq.w	800aa60 <_vfiprintf_r+0x1ec>
 800a922:	2300      	movs	r3, #0
 800a924:	f04f 32ff 	mov.w	r2, #4294967295
 800a928:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a92c:	f10a 0a01 	add.w	sl, sl, #1
 800a930:	9304      	str	r3, [sp, #16]
 800a932:	9307      	str	r3, [sp, #28]
 800a934:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a938:	931a      	str	r3, [sp, #104]	@ 0x68
 800a93a:	4654      	mov	r4, sl
 800a93c:	2205      	movs	r2, #5
 800a93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a942:	4853      	ldr	r0, [pc, #332]	@ (800aa90 <_vfiprintf_r+0x21c>)
 800a944:	f7f5 fc44 	bl	80001d0 <memchr>
 800a948:	9a04      	ldr	r2, [sp, #16]
 800a94a:	b9d8      	cbnz	r0, 800a984 <_vfiprintf_r+0x110>
 800a94c:	06d1      	lsls	r1, r2, #27
 800a94e:	bf44      	itt	mi
 800a950:	2320      	movmi	r3, #32
 800a952:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a956:	0713      	lsls	r3, r2, #28
 800a958:	bf44      	itt	mi
 800a95a:	232b      	movmi	r3, #43	@ 0x2b
 800a95c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a960:	f89a 3000 	ldrb.w	r3, [sl]
 800a964:	2b2a      	cmp	r3, #42	@ 0x2a
 800a966:	d015      	beq.n	800a994 <_vfiprintf_r+0x120>
 800a968:	9a07      	ldr	r2, [sp, #28]
 800a96a:	4654      	mov	r4, sl
 800a96c:	2000      	movs	r0, #0
 800a96e:	f04f 0c0a 	mov.w	ip, #10
 800a972:	4621      	mov	r1, r4
 800a974:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a978:	3b30      	subs	r3, #48	@ 0x30
 800a97a:	2b09      	cmp	r3, #9
 800a97c:	d94b      	bls.n	800aa16 <_vfiprintf_r+0x1a2>
 800a97e:	b1b0      	cbz	r0, 800a9ae <_vfiprintf_r+0x13a>
 800a980:	9207      	str	r2, [sp, #28]
 800a982:	e014      	b.n	800a9ae <_vfiprintf_r+0x13a>
 800a984:	eba0 0308 	sub.w	r3, r0, r8
 800a988:	fa09 f303 	lsl.w	r3, r9, r3
 800a98c:	4313      	orrs	r3, r2
 800a98e:	9304      	str	r3, [sp, #16]
 800a990:	46a2      	mov	sl, r4
 800a992:	e7d2      	b.n	800a93a <_vfiprintf_r+0xc6>
 800a994:	9b03      	ldr	r3, [sp, #12]
 800a996:	1d19      	adds	r1, r3, #4
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	9103      	str	r1, [sp, #12]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	bfbb      	ittet	lt
 800a9a0:	425b      	neglt	r3, r3
 800a9a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a9a6:	9307      	strge	r3, [sp, #28]
 800a9a8:	9307      	strlt	r3, [sp, #28]
 800a9aa:	bfb8      	it	lt
 800a9ac:	9204      	strlt	r2, [sp, #16]
 800a9ae:	7823      	ldrb	r3, [r4, #0]
 800a9b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9b2:	d10a      	bne.n	800a9ca <_vfiprintf_r+0x156>
 800a9b4:	7863      	ldrb	r3, [r4, #1]
 800a9b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9b8:	d132      	bne.n	800aa20 <_vfiprintf_r+0x1ac>
 800a9ba:	9b03      	ldr	r3, [sp, #12]
 800a9bc:	1d1a      	adds	r2, r3, #4
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	9203      	str	r2, [sp, #12]
 800a9c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9c6:	3402      	adds	r4, #2
 800a9c8:	9305      	str	r3, [sp, #20]
 800a9ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aaa0 <_vfiprintf_r+0x22c>
 800a9ce:	7821      	ldrb	r1, [r4, #0]
 800a9d0:	2203      	movs	r2, #3
 800a9d2:	4650      	mov	r0, sl
 800a9d4:	f7f5 fbfc 	bl	80001d0 <memchr>
 800a9d8:	b138      	cbz	r0, 800a9ea <_vfiprintf_r+0x176>
 800a9da:	9b04      	ldr	r3, [sp, #16]
 800a9dc:	eba0 000a 	sub.w	r0, r0, sl
 800a9e0:	2240      	movs	r2, #64	@ 0x40
 800a9e2:	4082      	lsls	r2, r0
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	3401      	adds	r4, #1
 800a9e8:	9304      	str	r3, [sp, #16]
 800a9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9ee:	4829      	ldr	r0, [pc, #164]	@ (800aa94 <_vfiprintf_r+0x220>)
 800a9f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9f4:	2206      	movs	r2, #6
 800a9f6:	f7f5 fbeb 	bl	80001d0 <memchr>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d03f      	beq.n	800aa7e <_vfiprintf_r+0x20a>
 800a9fe:	4b26      	ldr	r3, [pc, #152]	@ (800aa98 <_vfiprintf_r+0x224>)
 800aa00:	bb1b      	cbnz	r3, 800aa4a <_vfiprintf_r+0x1d6>
 800aa02:	9b03      	ldr	r3, [sp, #12]
 800aa04:	3307      	adds	r3, #7
 800aa06:	f023 0307 	bic.w	r3, r3, #7
 800aa0a:	3308      	adds	r3, #8
 800aa0c:	9303      	str	r3, [sp, #12]
 800aa0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa10:	443b      	add	r3, r7
 800aa12:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa14:	e76a      	b.n	800a8ec <_vfiprintf_r+0x78>
 800aa16:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	2001      	movs	r0, #1
 800aa1e:	e7a8      	b.n	800a972 <_vfiprintf_r+0xfe>
 800aa20:	2300      	movs	r3, #0
 800aa22:	3401      	adds	r4, #1
 800aa24:	9305      	str	r3, [sp, #20]
 800aa26:	4619      	mov	r1, r3
 800aa28:	f04f 0c0a 	mov.w	ip, #10
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa32:	3a30      	subs	r2, #48	@ 0x30
 800aa34:	2a09      	cmp	r2, #9
 800aa36:	d903      	bls.n	800aa40 <_vfiprintf_r+0x1cc>
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d0c6      	beq.n	800a9ca <_vfiprintf_r+0x156>
 800aa3c:	9105      	str	r1, [sp, #20]
 800aa3e:	e7c4      	b.n	800a9ca <_vfiprintf_r+0x156>
 800aa40:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa44:	4604      	mov	r4, r0
 800aa46:	2301      	movs	r3, #1
 800aa48:	e7f0      	b.n	800aa2c <_vfiprintf_r+0x1b8>
 800aa4a:	ab03      	add	r3, sp, #12
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	462a      	mov	r2, r5
 800aa50:	4b12      	ldr	r3, [pc, #72]	@ (800aa9c <_vfiprintf_r+0x228>)
 800aa52:	a904      	add	r1, sp, #16
 800aa54:	4630      	mov	r0, r6
 800aa56:	f7fb feb9 	bl	80067cc <_printf_float>
 800aa5a:	4607      	mov	r7, r0
 800aa5c:	1c78      	adds	r0, r7, #1
 800aa5e:	d1d6      	bne.n	800aa0e <_vfiprintf_r+0x19a>
 800aa60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa62:	07d9      	lsls	r1, r3, #31
 800aa64:	d405      	bmi.n	800aa72 <_vfiprintf_r+0x1fe>
 800aa66:	89ab      	ldrh	r3, [r5, #12]
 800aa68:	059a      	lsls	r2, r3, #22
 800aa6a:	d402      	bmi.n	800aa72 <_vfiprintf_r+0x1fe>
 800aa6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa6e:	f7fc fe1d 	bl	80076ac <__retarget_lock_release_recursive>
 800aa72:	89ab      	ldrh	r3, [r5, #12]
 800aa74:	065b      	lsls	r3, r3, #25
 800aa76:	f53f af1f 	bmi.w	800a8b8 <_vfiprintf_r+0x44>
 800aa7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa7c:	e71e      	b.n	800a8bc <_vfiprintf_r+0x48>
 800aa7e:	ab03      	add	r3, sp, #12
 800aa80:	9300      	str	r3, [sp, #0]
 800aa82:	462a      	mov	r2, r5
 800aa84:	4b05      	ldr	r3, [pc, #20]	@ (800aa9c <_vfiprintf_r+0x228>)
 800aa86:	a904      	add	r1, sp, #16
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f7fc f937 	bl	8006cfc <_printf_i>
 800aa8e:	e7e4      	b.n	800aa5a <_vfiprintf_r+0x1e6>
 800aa90:	0800b199 	.word	0x0800b199
 800aa94:	0800b1a3 	.word	0x0800b1a3
 800aa98:	080067cd 	.word	0x080067cd
 800aa9c:	0800a851 	.word	0x0800a851
 800aaa0:	0800b19f 	.word	0x0800b19f

0800aaa4 <__swbuf_r>:
 800aaa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa6:	460e      	mov	r6, r1
 800aaa8:	4614      	mov	r4, r2
 800aaaa:	4605      	mov	r5, r0
 800aaac:	b118      	cbz	r0, 800aab6 <__swbuf_r+0x12>
 800aaae:	6a03      	ldr	r3, [r0, #32]
 800aab0:	b90b      	cbnz	r3, 800aab6 <__swbuf_r+0x12>
 800aab2:	f7fc fce3 	bl	800747c <__sinit>
 800aab6:	69a3      	ldr	r3, [r4, #24]
 800aab8:	60a3      	str	r3, [r4, #8]
 800aaba:	89a3      	ldrh	r3, [r4, #12]
 800aabc:	071a      	lsls	r2, r3, #28
 800aabe:	d501      	bpl.n	800aac4 <__swbuf_r+0x20>
 800aac0:	6923      	ldr	r3, [r4, #16]
 800aac2:	b943      	cbnz	r3, 800aad6 <__swbuf_r+0x32>
 800aac4:	4621      	mov	r1, r4
 800aac6:	4628      	mov	r0, r5
 800aac8:	f000 f82a 	bl	800ab20 <__swsetup_r>
 800aacc:	b118      	cbz	r0, 800aad6 <__swbuf_r+0x32>
 800aace:	f04f 37ff 	mov.w	r7, #4294967295
 800aad2:	4638      	mov	r0, r7
 800aad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	6922      	ldr	r2, [r4, #16]
 800aada:	1a98      	subs	r0, r3, r2
 800aadc:	6963      	ldr	r3, [r4, #20]
 800aade:	b2f6      	uxtb	r6, r6
 800aae0:	4283      	cmp	r3, r0
 800aae2:	4637      	mov	r7, r6
 800aae4:	dc05      	bgt.n	800aaf2 <__swbuf_r+0x4e>
 800aae6:	4621      	mov	r1, r4
 800aae8:	4628      	mov	r0, r5
 800aaea:	f7ff fa47 	bl	8009f7c <_fflush_r>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d1ed      	bne.n	800aace <__swbuf_r+0x2a>
 800aaf2:	68a3      	ldr	r3, [r4, #8]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	60a3      	str	r3, [r4, #8]
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	1c5a      	adds	r2, r3, #1
 800aafc:	6022      	str	r2, [r4, #0]
 800aafe:	701e      	strb	r6, [r3, #0]
 800ab00:	6962      	ldr	r2, [r4, #20]
 800ab02:	1c43      	adds	r3, r0, #1
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d004      	beq.n	800ab12 <__swbuf_r+0x6e>
 800ab08:	89a3      	ldrh	r3, [r4, #12]
 800ab0a:	07db      	lsls	r3, r3, #31
 800ab0c:	d5e1      	bpl.n	800aad2 <__swbuf_r+0x2e>
 800ab0e:	2e0a      	cmp	r6, #10
 800ab10:	d1df      	bne.n	800aad2 <__swbuf_r+0x2e>
 800ab12:	4621      	mov	r1, r4
 800ab14:	4628      	mov	r0, r5
 800ab16:	f7ff fa31 	bl	8009f7c <_fflush_r>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	d0d9      	beq.n	800aad2 <__swbuf_r+0x2e>
 800ab1e:	e7d6      	b.n	800aace <__swbuf_r+0x2a>

0800ab20 <__swsetup_r>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	4b29      	ldr	r3, [pc, #164]	@ (800abc8 <__swsetup_r+0xa8>)
 800ab24:	4605      	mov	r5, r0
 800ab26:	6818      	ldr	r0, [r3, #0]
 800ab28:	460c      	mov	r4, r1
 800ab2a:	b118      	cbz	r0, 800ab34 <__swsetup_r+0x14>
 800ab2c:	6a03      	ldr	r3, [r0, #32]
 800ab2e:	b90b      	cbnz	r3, 800ab34 <__swsetup_r+0x14>
 800ab30:	f7fc fca4 	bl	800747c <__sinit>
 800ab34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab38:	0719      	lsls	r1, r3, #28
 800ab3a:	d422      	bmi.n	800ab82 <__swsetup_r+0x62>
 800ab3c:	06da      	lsls	r2, r3, #27
 800ab3e:	d407      	bmi.n	800ab50 <__swsetup_r+0x30>
 800ab40:	2209      	movs	r2, #9
 800ab42:	602a      	str	r2, [r5, #0]
 800ab44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4e:	e033      	b.n	800abb8 <__swsetup_r+0x98>
 800ab50:	0758      	lsls	r0, r3, #29
 800ab52:	d512      	bpl.n	800ab7a <__swsetup_r+0x5a>
 800ab54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab56:	b141      	cbz	r1, 800ab6a <__swsetup_r+0x4a>
 800ab58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	d002      	beq.n	800ab66 <__swsetup_r+0x46>
 800ab60:	4628      	mov	r0, r5
 800ab62:	f7fd fbf9 	bl	8008358 <_free_r>
 800ab66:	2300      	movs	r3, #0
 800ab68:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab6a:	89a3      	ldrh	r3, [r4, #12]
 800ab6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	2300      	movs	r3, #0
 800ab74:	6063      	str	r3, [r4, #4]
 800ab76:	6923      	ldr	r3, [r4, #16]
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	f043 0308 	orr.w	r3, r3, #8
 800ab80:	81a3      	strh	r3, [r4, #12]
 800ab82:	6923      	ldr	r3, [r4, #16]
 800ab84:	b94b      	cbnz	r3, 800ab9a <__swsetup_r+0x7a>
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab90:	d003      	beq.n	800ab9a <__swsetup_r+0x7a>
 800ab92:	4621      	mov	r1, r4
 800ab94:	4628      	mov	r0, r5
 800ab96:	f000 f883 	bl	800aca0 <__smakebuf_r>
 800ab9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab9e:	f013 0201 	ands.w	r2, r3, #1
 800aba2:	d00a      	beq.n	800abba <__swsetup_r+0x9a>
 800aba4:	2200      	movs	r2, #0
 800aba6:	60a2      	str	r2, [r4, #8]
 800aba8:	6962      	ldr	r2, [r4, #20]
 800abaa:	4252      	negs	r2, r2
 800abac:	61a2      	str	r2, [r4, #24]
 800abae:	6922      	ldr	r2, [r4, #16]
 800abb0:	b942      	cbnz	r2, 800abc4 <__swsetup_r+0xa4>
 800abb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800abb6:	d1c5      	bne.n	800ab44 <__swsetup_r+0x24>
 800abb8:	bd38      	pop	{r3, r4, r5, pc}
 800abba:	0799      	lsls	r1, r3, #30
 800abbc:	bf58      	it	pl
 800abbe:	6962      	ldrpl	r2, [r4, #20]
 800abc0:	60a2      	str	r2, [r4, #8]
 800abc2:	e7f4      	b.n	800abae <__swsetup_r+0x8e>
 800abc4:	2000      	movs	r0, #0
 800abc6:	e7f7      	b.n	800abb8 <__swsetup_r+0x98>
 800abc8:	20000018 	.word	0x20000018

0800abcc <_raise_r>:
 800abcc:	291f      	cmp	r1, #31
 800abce:	b538      	push	{r3, r4, r5, lr}
 800abd0:	4605      	mov	r5, r0
 800abd2:	460c      	mov	r4, r1
 800abd4:	d904      	bls.n	800abe0 <_raise_r+0x14>
 800abd6:	2316      	movs	r3, #22
 800abd8:	6003      	str	r3, [r0, #0]
 800abda:	f04f 30ff 	mov.w	r0, #4294967295
 800abde:	bd38      	pop	{r3, r4, r5, pc}
 800abe0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800abe2:	b112      	cbz	r2, 800abea <_raise_r+0x1e>
 800abe4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abe8:	b94b      	cbnz	r3, 800abfe <_raise_r+0x32>
 800abea:	4628      	mov	r0, r5
 800abec:	f000 f830 	bl	800ac50 <_getpid_r>
 800abf0:	4622      	mov	r2, r4
 800abf2:	4601      	mov	r1, r0
 800abf4:	4628      	mov	r0, r5
 800abf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abfa:	f000 b817 	b.w	800ac2c <_kill_r>
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d00a      	beq.n	800ac18 <_raise_r+0x4c>
 800ac02:	1c59      	adds	r1, r3, #1
 800ac04:	d103      	bne.n	800ac0e <_raise_r+0x42>
 800ac06:	2316      	movs	r3, #22
 800ac08:	6003      	str	r3, [r0, #0]
 800ac0a:	2001      	movs	r0, #1
 800ac0c:	e7e7      	b.n	800abde <_raise_r+0x12>
 800ac0e:	2100      	movs	r1, #0
 800ac10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ac14:	4620      	mov	r0, r4
 800ac16:	4798      	blx	r3
 800ac18:	2000      	movs	r0, #0
 800ac1a:	e7e0      	b.n	800abde <_raise_r+0x12>

0800ac1c <raise>:
 800ac1c:	4b02      	ldr	r3, [pc, #8]	@ (800ac28 <raise+0xc>)
 800ac1e:	4601      	mov	r1, r0
 800ac20:	6818      	ldr	r0, [r3, #0]
 800ac22:	f7ff bfd3 	b.w	800abcc <_raise_r>
 800ac26:	bf00      	nop
 800ac28:	20000018 	.word	0x20000018

0800ac2c <_kill_r>:
 800ac2c:	b538      	push	{r3, r4, r5, lr}
 800ac2e:	4d07      	ldr	r5, [pc, #28]	@ (800ac4c <_kill_r+0x20>)
 800ac30:	2300      	movs	r3, #0
 800ac32:	4604      	mov	r4, r0
 800ac34:	4608      	mov	r0, r1
 800ac36:	4611      	mov	r1, r2
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	f7f7 fa69 	bl	8002110 <_kill>
 800ac3e:	1c43      	adds	r3, r0, #1
 800ac40:	d102      	bne.n	800ac48 <_kill_r+0x1c>
 800ac42:	682b      	ldr	r3, [r5, #0]
 800ac44:	b103      	cbz	r3, 800ac48 <_kill_r+0x1c>
 800ac46:	6023      	str	r3, [r4, #0]
 800ac48:	bd38      	pop	{r3, r4, r5, pc}
 800ac4a:	bf00      	nop
 800ac4c:	20000b00 	.word	0x20000b00

0800ac50 <_getpid_r>:
 800ac50:	f7f7 ba56 	b.w	8002100 <_getpid>

0800ac54 <__swhatbuf_r>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	460c      	mov	r4, r1
 800ac58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac5c:	2900      	cmp	r1, #0
 800ac5e:	b096      	sub	sp, #88	@ 0x58
 800ac60:	4615      	mov	r5, r2
 800ac62:	461e      	mov	r6, r3
 800ac64:	da0d      	bge.n	800ac82 <__swhatbuf_r+0x2e>
 800ac66:	89a3      	ldrh	r3, [r4, #12]
 800ac68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac6c:	f04f 0100 	mov.w	r1, #0
 800ac70:	bf14      	ite	ne
 800ac72:	2340      	movne	r3, #64	@ 0x40
 800ac74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac78:	2000      	movs	r0, #0
 800ac7a:	6031      	str	r1, [r6, #0]
 800ac7c:	602b      	str	r3, [r5, #0]
 800ac7e:	b016      	add	sp, #88	@ 0x58
 800ac80:	bd70      	pop	{r4, r5, r6, pc}
 800ac82:	466a      	mov	r2, sp
 800ac84:	f000 f848 	bl	800ad18 <_fstat_r>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	dbec      	blt.n	800ac66 <__swhatbuf_r+0x12>
 800ac8c:	9901      	ldr	r1, [sp, #4]
 800ac8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac96:	4259      	negs	r1, r3
 800ac98:	4159      	adcs	r1, r3
 800ac9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac9e:	e7eb      	b.n	800ac78 <__swhatbuf_r+0x24>

0800aca0 <__smakebuf_r>:
 800aca0:	898b      	ldrh	r3, [r1, #12]
 800aca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aca4:	079d      	lsls	r5, r3, #30
 800aca6:	4606      	mov	r6, r0
 800aca8:	460c      	mov	r4, r1
 800acaa:	d507      	bpl.n	800acbc <__smakebuf_r+0x1c>
 800acac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800acb0:	6023      	str	r3, [r4, #0]
 800acb2:	6123      	str	r3, [r4, #16]
 800acb4:	2301      	movs	r3, #1
 800acb6:	6163      	str	r3, [r4, #20]
 800acb8:	b003      	add	sp, #12
 800acba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acbc:	ab01      	add	r3, sp, #4
 800acbe:	466a      	mov	r2, sp
 800acc0:	f7ff ffc8 	bl	800ac54 <__swhatbuf_r>
 800acc4:	9f00      	ldr	r7, [sp, #0]
 800acc6:	4605      	mov	r5, r0
 800acc8:	4639      	mov	r1, r7
 800acca:	4630      	mov	r0, r6
 800accc:	f7fd fbb8 	bl	8008440 <_malloc_r>
 800acd0:	b948      	cbnz	r0, 800ace6 <__smakebuf_r+0x46>
 800acd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd6:	059a      	lsls	r2, r3, #22
 800acd8:	d4ee      	bmi.n	800acb8 <__smakebuf_r+0x18>
 800acda:	f023 0303 	bic.w	r3, r3, #3
 800acde:	f043 0302 	orr.w	r3, r3, #2
 800ace2:	81a3      	strh	r3, [r4, #12]
 800ace4:	e7e2      	b.n	800acac <__smakebuf_r+0xc>
 800ace6:	89a3      	ldrh	r3, [r4, #12]
 800ace8:	6020      	str	r0, [r4, #0]
 800acea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acee:	81a3      	strh	r3, [r4, #12]
 800acf0:	9b01      	ldr	r3, [sp, #4]
 800acf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acf6:	b15b      	cbz	r3, 800ad10 <__smakebuf_r+0x70>
 800acf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acfc:	4630      	mov	r0, r6
 800acfe:	f000 f81d 	bl	800ad3c <_isatty_r>
 800ad02:	b128      	cbz	r0, 800ad10 <__smakebuf_r+0x70>
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	f023 0303 	bic.w	r3, r3, #3
 800ad0a:	f043 0301 	orr.w	r3, r3, #1
 800ad0e:	81a3      	strh	r3, [r4, #12]
 800ad10:	89a3      	ldrh	r3, [r4, #12]
 800ad12:	431d      	orrs	r5, r3
 800ad14:	81a5      	strh	r5, [r4, #12]
 800ad16:	e7cf      	b.n	800acb8 <__smakebuf_r+0x18>

0800ad18 <_fstat_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	@ (800ad38 <_fstat_r+0x20>)
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	4604      	mov	r4, r0
 800ad20:	4608      	mov	r0, r1
 800ad22:	4611      	mov	r1, r2
 800ad24:	602b      	str	r3, [r5, #0]
 800ad26:	f7f7 fa53 	bl	80021d0 <_fstat>
 800ad2a:	1c43      	adds	r3, r0, #1
 800ad2c:	d102      	bne.n	800ad34 <_fstat_r+0x1c>
 800ad2e:	682b      	ldr	r3, [r5, #0]
 800ad30:	b103      	cbz	r3, 800ad34 <_fstat_r+0x1c>
 800ad32:	6023      	str	r3, [r4, #0]
 800ad34:	bd38      	pop	{r3, r4, r5, pc}
 800ad36:	bf00      	nop
 800ad38:	20000b00 	.word	0x20000b00

0800ad3c <_isatty_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d06      	ldr	r5, [pc, #24]	@ (800ad58 <_isatty_r+0x1c>)
 800ad40:	2300      	movs	r3, #0
 800ad42:	4604      	mov	r4, r0
 800ad44:	4608      	mov	r0, r1
 800ad46:	602b      	str	r3, [r5, #0]
 800ad48:	f7f7 fa52 	bl	80021f0 <_isatty>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_isatty_r+0x1a>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_isatty_r+0x1a>
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	20000b00 	.word	0x20000b00

0800ad5c <_init>:
 800ad5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5e:	bf00      	nop
 800ad60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad62:	bc08      	pop	{r3}
 800ad64:	469e      	mov	lr, r3
 800ad66:	4770      	bx	lr

0800ad68 <_fini>:
 800ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6a:	bf00      	nop
 800ad6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad6e:	bc08      	pop	{r3}
 800ad70:	469e      	mov	lr, r3
 800ad72:	4770      	bx	lr
